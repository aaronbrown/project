
12test.elf:     file format elf32-littlenios2
12test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01080120

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x01080000 align 2**12
         filesz 0x00000120 memsz 0x00000120 flags r-x
    LOAD off    0x00002120 vaddr 0x01080120 paddr 0x01080120 align 2**12
         filesz 0x00003698 memsz 0x00003698 flags r-x
    LOAD off    0x000057b8 vaddr 0x010837b8 paddr 0x0108501c align 2**12
         filesz 0x00001864 memsz 0x00001864 flags rw-
    LOAD off    0x00007880 vaddr 0x01086880 paddr 0x01086880 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-
    LOAD off    0x00008000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  01104020  01080000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003670  01080120  01080120  00002120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  01083790  01083790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001864  010837b8  0108501c  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  01086880  01086880  00007880  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000718  00000000  00000000  00008048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000a6f  00000000  00000000  00008760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00011fd4  00000000  00000000  000091cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004117  00000000  00000000  0001b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a2d8  00000000  00000000  0001f2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ad0  00000000  00000000  00029594  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c96  00000000  00000000  0002a064  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003b10  00000000  00000000  0002bcfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002f80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000370  00000000  00000000  0002f820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000319a5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000319a8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000319ad  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000319ae  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000319b2  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000319b6  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000319ba  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000319c5  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000319d0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000014  00000000  00000000  000319db  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000031  00000000  00000000  000319ef  2**0
                  CONTENTS, READONLY
 28 .jdi          0000497d  00000000  00000000  00031a20  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00039020  00000000  00000000  0003639d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
01080120 l    d  .text	00000000 .text
01083790 l    d  .rodata	00000000 .rodata
010837b8 l    d  .rwdata	00000000 .rwdata
01086880 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01080158 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
010837b8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01081b00 l     F .text	00000058 std
01081c0c l     F .text	00000008 __fp_lock
01081c14 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
01082bb0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0108500c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01082e88 l     F .text	0000004c altera_avalon_jtag_uart_timeout
01082f54 l     F .text	000000ec altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
010835c4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
010829ac g     F .text	00000070 _isatty_r
01082c7c g     F .text	0000003c alt_main
010801c8 g     F .text	000000a0 _puts_r
010868d0 g     O .bss	00000100 alt_irq
01082a1c g     F .text	00000078 _lseek_r
0108501c g       *ABS*	00000000 __flash_rwdata_start
010869d0 g       *ABS*	00000000 __alt_heap_start
010825e8 g     F .text	00000068 __sseek
01081b68 g     F .text	000000a4 __sinit
01081c68 g     F .text	0000009c __sfmoreglue
01082cbc g     F .text	00000004 __malloc_unlock
01081050 g     F .text	000000e0 memmove
01081c58 g     F .text	00000010 _cleanup
01082cc0 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
01104000 g     F .entry	0000000c __reset
01080000 g       *ABS*	00000000 __flash_exceptions_start
01082938 g     F .text	00000074 _fstat_r
0108688c g     O .bss	00000004 errno
01086894 g     O .bss	00000004 alt_argv
0108cff8 g       *ABS*	00000000 _gp
01080fb0 g     F .text	000000a0 memcpy
01081c4c g     F .text	0000000c _cleanup_r
01080268 g     F .text	00000014 puts
01083584 g     F .text	00000008 altera_nios2_irq_init
01083040 g     F .text	00000158 altera_avalon_jtag_uart_read
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01082ba4 g     F .text	0000000c isatty
01086880 g     O .bss	00000004 __malloc_top_pad
010802f0 g     F .text	0000049c __sfvwrite_r
01081724 g     F .text	00000070 _sbrk_r
01082a94 g     F .text	00000078 _read_r
01082814 g     F .text	00000110 _fclose_r
01081acc g     F .text	00000034 fflush
01086884 g     O .bss	00000004 __malloc_max_sbrked_mem
01082c3c g     F .text	00000040 lseek
01084ffc g     O .rwdata	00000004 _global_impure_ptr
01081130 g     F .text	000005f4 _realloc_r
010869d0 g       *ABS*	00000000 __bss_end
01083438 g     F .text	0000006c alt_iic_isr_register
010834d8 g     F .text	000000ac alt_tick
01081c34 g     F .text	00000018 __fp_lock_all
0108339c g     F .text	00000018 alt_ic_irq_enabled
010834a4 g     F .text	00000034 alt_alarm_stop
0108689c g     O .bss	00000004 alt_irq_active
011040ec g     F .exceptions	00000054 alt_irq_handler
01083394 g     F .text	00000004 alt_dcache_flush_all
0108501c g       *ABS*	00000000 __ram_rwdata_end
01082da4 g     F .text	00000078 write
010837b8 g       *ABS*	00000000 __ram_rodata_end
01083fc0 g     O .rwdata	00001038 jtag_uart_0
01082b84 g     F .text	00000020 fstat
010869d0 g       *ABS*	00000000 end
01082ed4 g     F .text	00000080 altera_avalon_jtag_uart_init
01100000 g       *ABS*	00000000 __alt_stack_pointer
01083198 g     F .text	0000016c altera_avalon_jtag_uart_write
01081b58 g     F .text	00000004 __sfp_lock_acquire
01080ecc g     F .text	000000e4 memchr
01081f20 g     F .text	00000314 _free_r
010835c8 g     F .text	000001b0 __call_exitprocs
01085004 g     O .rwdata	00000004 __malloc_sbrk_base
01080120 g     F .text	0000003c _start
0108015c g     F .text	00000030 makePurple
010868a0 g     O .bss	00000004 _alt_tick_rate
010868a4 g     O .bss	00000004 _alt_nticks
01082cf8 g     F .text	0000005c read
01082e1c g     F .text	00000014 alt_sys_init
01082e50 g     F .text	00000038 altera_avalon_jtag_uart_close
01082b0c g     F .text	00000038 __mulsi3
010837b8 g       *ABS*	00000000 __ram_rwdata_start
01083790 g       *ABS*	00000000 __ram_rodata_start
010868a8 g     O .bss	00000028 __malloc_current_mallinfo
010827a4 g     F .text	00000070 _close_r
010869d0 g       *ABS*	00000000 __alt_stack_base
01081794 g     F .text	0000013c __swsetup_r
01081d04 g     F .text	000000f0 __sfp
01083bb8 g     O .rwdata	00000408 __malloc_av_
01081b64 g     F .text	00000004 __sinit_lock_release
010826cc g     F .text	00000060 __sread
01082cb8 g     F .text	00000004 __malloc_lock
01082d54 g     F .text	00000050 sbrk
010818d0 g     F .text	000001fc _fflush_r
01086880 g       *ABS*	00000000 __bss_start
01082548 g     F .text	00000098 memset
0108018c g     F .text	0000003c main
01086898 g     O .bss	00000004 alt_envp
01086888 g     O .bss	00000004 __malloc_max_total_mem
010825e0 g     F .text	00000008 __sclose
01100000 g       *ABS*	00000000 __alt_heap_limit
01082924 g     F .text	00000014 fclose
0108078c g     F .text	00000740 _malloc_r
01085008 g     O .rwdata	00000004 alt_errno
010822fc g     F .text	000000b8 _fwalk
01081df4 g     F .text	0000012c _malloc_trim_r
01083790 g       *ABS*	00000000 __flash_rodata_start
01082e30 g     F .text	00000020 alt_irq_init
0108272c g     F .text	00000078 _write_r
01084ff8 g     O .rwdata	00000004 _impure_ptr
01086890 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
01104020 g       .exceptions	00000000 alt_irq_entry
01081c1c g     F .text	00000018 __fp_unlock_all
01104020 g       *ABS*	00000000 __ram_exceptions_start
01083434 g     F .text	00000004 alt_ic_isr_register
0108501c g       *ABS*	00000000 _edata
010869d0 g       *ABS*	00000000 _end
01104140 g       *ABS*	00000000 __ram_exceptions_end
010833f4 g     F .text	00000040 alt_ic_irq_disable
01082650 g     F .text	0000007c __swrite
01085000 g     O .rwdata	00000004 __malloc_trim_threshold
0108358c g     F .text	00000038 exit
01082234 g     F .text	000000c8 _fwalk_reent
01100000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
01081b5c g     F .text	00000004 __sfp_lock_release
01083778 g     F .text	00000014 _exit
01083304 g     F .text	00000090 alt_alarm_start
010823b4 g     F .text	00000194 __smakebuf_r
0108027c g     F .text	00000074 strlen
01080000 g       *ABS*	00000000 __alt_mem_sram_16bit_512k_0
01083398 g     F .text	00000004 alt_icache_flush_all
01085010 g     O .rwdata	00000004 alt_priority_mask
010833b4 g     F .text	00000040 alt_ic_irq_enable
01085014 g     O .rwdata	00000008 alt_alarm_list
01082b44 g     F .text	00000040 close
01082bd0 g     F .text	0000006c alt_load
00000000  w      *UND*	00000000 free
01081b60 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00404234 	movhi	at,264
    ori r1, r1, %lo(_start)
 1104004:	08404814 	ori	at,at,288
    jmp r1
 1104008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	deffff04 	addi	sp,sp,-4
 11040f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11040f4:	0009313a 	rdctl	r4,ipending
 11040f8:	00c00044 	movi	r3,1
 11040fc:	01404234 	movhi	r5,264
 1104100:	295a3404 	addi	r5,r5,26832
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1104104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110410c:	10000726 	beq	r2,zero,110412c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104110:	29000117 	ldw	r4,4(r5)
 1104114:	28800017 	ldw	r2,0(r5)
 1104118:	103ee83a 	callr	r2
 110411c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 1104120:	10000426 	beq	r2,zero,1104134 <alt_irq_handler+0x48>
 1104124:	1009883a 	mov	r4,r2
 1104128:	003ff306 	br	11040f8 <alt_irq_handler+0xc>
 110412c:	29400204 	addi	r5,r5,8
 1104130:	003ff406 	br	1104104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1104134:	dfc00017 	ldw	ra,0(sp)
 1104138:	dec00104 	addi	sp,sp,4
 110413c:	f800283a 	ret

Disassembly of section .text:

01080120 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1080120:	06c04434 	movhi	sp,272
    ori sp, sp, %lo(__alt_stack_pointer)
 1080124:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 1080128:	06804234 	movhi	gp,264
    ori gp, gp, %lo(_gp)
 108012c:	d6b3fe14 	ori	gp,gp,53240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1080130:	00804234 	movhi	r2,264
    ori r2, r2, %lo(__bss_start)
 1080134:	109a2014 	ori	r2,r2,26752

    movhi r3, %hi(__bss_end)
 1080138:	00c04234 	movhi	r3,264
    ori r3, r3, %lo(__bss_end)
 108013c:	18da7414 	ori	r3,r3,27088

    beq r2, r3, 1f
 1080140:	10c00326 	beq	r2,r3,1080150 <_start+0x30>

0:
    stw zero, (r2)
 1080144:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1080148:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 108014c:	10fffd36 	bltu	r2,r3,1080144 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1080150:	1082bd00 	call	1082bd0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1080154:	1082c7c0 	call	1082c7c <alt_main>

01080158 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1080158:	003fff06 	br	1080158 <alt_after_alt_main>

0108015c <makePurple>:

#define BASE_ADDRESS 0x00800000

void makePurple () {

 IOWR_16DIRECT(procCntl, 0, 0xFFFF);
 108015c:	00ffffd4 	movui	r3,65535
 1080160:	00804474 	movhi	r2,273
 1080164:	10a40804 	addi	r2,r2,-28640
 1080168:	10c0002d 	sthio	r3,0(r2)
 108016c:	00802034 	movhi	r2,128
 1080170:	0100ffc4 	movi	r4,1023
 1080174:	00c04274 	movhi	r3,265
 1080178:	18d80004 	addi	r3,r3,24576

  //lastAddress is (640 * 480 * 2) + BASE_ADDRESS, to account for both B and
  //R values. We don't consider G since they've been piggybacked onto B and R.
  //We dont' write to lastAddress as it points to where (0,480) would be.
  for(i = 0; i < lastAddress; i += 2)
    IOWR_16DIRECT(BASE_ADDRESS, i, 0x03ff);
 108017c:	1100002d 	sthio	r4,0(r2)
 1080180:	10800084 	addi	r2,r2,2
  int lastAddress = (640 * 480 * 2) + BASE_ADDRESS;

  //lastAddress is (640 * 480 * 2) + BASE_ADDRESS, to account for both B and
  //R values. We don't consider G since they've been piggybacked onto B and R.
  //We dont' write to lastAddress as it points to where (0,480) would be.
  for(i = 0; i < lastAddress; i += 2)
 1080184:	10fffd1e 	bne	r2,r3,108017c <makePurple+0x20>
    IOWR_16DIRECT(BASE_ADDRESS, i, 0x03ff);

}
 1080188:	f800283a 	ret

0108018c <main>:


int main()
{ 
 108018c:	deffff04 	addi	sp,sp,-4

  alt_putstr("Hello from Nios II!\n");
 1080190:	01004234 	movhi	r4,264
 1080194:	210de404 	addi	r4,r4,14224

}


int main()
{ 
 1080198:	dfc00015 	stw	ra,0(sp)

  alt_putstr("Hello from Nios II!\n");
 108019c:	1082cc00 	call	1082cc0 <alt_putstr>
  makePurple();
 10801a0:	108015c0 	call	108015c <makePurple>

  /* Event loop never exits. */
  while (1)
  {
	  if (*(char*)procCntl != (char)0xFF)
 10801a4:	00804474 	movhi	r2,273
 10801a8:	10a40804 	addi	r2,r2,-28640
 10801ac:	10c00007 	ldb	r3,0(r2)
 10801b0:	00bfffc4 	movi	r2,-1
		  printf("ALERT!\n");
 10801b4:	01004234 	movhi	r4,264
 10801b8:	210dea04 	addi	r4,r4,14248
  makePurple();

  /* Event loop never exits. */
  while (1)
  {
	  if (*(char*)procCntl != (char)0xFF)
 10801bc:	18bff926 	beq	r3,r2,10801a4 <main+0x18>
		  printf("ALERT!\n");
 10801c0:	10802680 	call	1080268 <puts>
 10801c4:	003ff706 	br	10801a4 <main+0x18>

010801c8 <_puts_r>:
 10801c8:	defff604 	addi	sp,sp,-40
 10801cc:	dc400715 	stw	r17,28(sp)
 10801d0:	2023883a 	mov	r17,r4
 10801d4:	2809883a 	mov	r4,r5
 10801d8:	dfc00915 	stw	ra,36(sp)
 10801dc:	dcc00815 	stw	r19,32(sp)
 10801e0:	2827883a 	mov	r19,r5
 10801e4:	108027c0 	call	108027c <strlen>
 10801e8:	89400217 	ldw	r5,8(r17)
 10801ec:	00c04234 	movhi	r3,264
 10801f0:	18cdec04 	addi	r3,r3,14256
 10801f4:	01c00044 	movi	r7,1
 10801f8:	12000044 	addi	r8,r2,1
 10801fc:	d8c00515 	stw	r3,20(sp)
 1080200:	d9c00615 	stw	r7,24(sp)
 1080204:	d8c00304 	addi	r3,sp,12
 1080208:	01c00084 	movi	r7,2
 108020c:	8809883a 	mov	r4,r17
 1080210:	d80d883a 	mov	r6,sp
 1080214:	d8c00015 	stw	r3,0(sp)
 1080218:	dcc00315 	stw	r19,12(sp)
 108021c:	da000215 	stw	r8,8(sp)
 1080220:	d9c00115 	stw	r7,4(sp)
 1080224:	d8800415 	stw	r2,16(sp)
 1080228:	10802f00 	call	10802f0 <__sfvwrite_r>
 108022c:	00ffffc4 	movi	r3,-1
 1080230:	10000626 	beq	r2,zero,108024c <_puts_r+0x84>
 1080234:	1805883a 	mov	r2,r3
 1080238:	dfc00917 	ldw	ra,36(sp)
 108023c:	dcc00817 	ldw	r19,32(sp)
 1080240:	dc400717 	ldw	r17,28(sp)
 1080244:	dec00a04 	addi	sp,sp,40
 1080248:	f800283a 	ret
 108024c:	00c00284 	movi	r3,10
 1080250:	1805883a 	mov	r2,r3
 1080254:	dfc00917 	ldw	ra,36(sp)
 1080258:	dcc00817 	ldw	r19,32(sp)
 108025c:	dc400717 	ldw	r17,28(sp)
 1080260:	dec00a04 	addi	sp,sp,40
 1080264:	f800283a 	ret

01080268 <puts>:
 1080268:	00804234 	movhi	r2,264
 108026c:	1093fe04 	addi	r2,r2,20472
 1080270:	200b883a 	mov	r5,r4
 1080274:	11000017 	ldw	r4,0(r2)
 1080278:	10801c81 	jmpi	10801c8 <_puts_r>

0108027c <strlen>:
 108027c:	208000cc 	andi	r2,r4,3
 1080280:	2011883a 	mov	r8,r4
 1080284:	1000161e 	bne	r2,zero,10802e0 <strlen+0x64>
 1080288:	20c00017 	ldw	r3,0(r4)
 108028c:	017fbff4 	movhi	r5,65279
 1080290:	297fbfc4 	addi	r5,r5,-257
 1080294:	01e02074 	movhi	r7,32897
 1080298:	39e02004 	addi	r7,r7,-32640
 108029c:	1945883a 	add	r2,r3,r5
 10802a0:	11c4703a 	and	r2,r2,r7
 10802a4:	00c6303a 	nor	r3,zero,r3
 10802a8:	1886703a 	and	r3,r3,r2
 10802ac:	18000c1e 	bne	r3,zero,10802e0 <strlen+0x64>
 10802b0:	280d883a 	mov	r6,r5
 10802b4:	380b883a 	mov	r5,r7
 10802b8:	21000104 	addi	r4,r4,4
 10802bc:	20800017 	ldw	r2,0(r4)
 10802c0:	1187883a 	add	r3,r2,r6
 10802c4:	1946703a 	and	r3,r3,r5
 10802c8:	0084303a 	nor	r2,zero,r2
 10802cc:	10c4703a 	and	r2,r2,r3
 10802d0:	103ff926 	beq	r2,zero,10802b8 <strlen+0x3c>
 10802d4:	20800007 	ldb	r2,0(r4)
 10802d8:	10000326 	beq	r2,zero,10802e8 <strlen+0x6c>
 10802dc:	21000044 	addi	r4,r4,1
 10802e0:	20800007 	ldb	r2,0(r4)
 10802e4:	103ffd1e 	bne	r2,zero,10802dc <strlen+0x60>
 10802e8:	2205c83a 	sub	r2,r4,r8
 10802ec:	f800283a 	ret

010802f0 <__sfvwrite_r>:
 10802f0:	30800217 	ldw	r2,8(r6)
 10802f4:	defff504 	addi	sp,sp,-44
 10802f8:	df000915 	stw	fp,36(sp)
 10802fc:	dd800715 	stw	r22,28(sp)
 1080300:	dc800315 	stw	r18,12(sp)
 1080304:	dfc00a15 	stw	ra,40(sp)
 1080308:	ddc00815 	stw	r23,32(sp)
 108030c:	dd400615 	stw	r21,24(sp)
 1080310:	dd000515 	stw	r20,20(sp)
 1080314:	dcc00415 	stw	r19,16(sp)
 1080318:	dc400215 	stw	r17,8(sp)
 108031c:	dc000115 	stw	r16,4(sp)
 1080320:	302d883a 	mov	r22,r6
 1080324:	2039883a 	mov	fp,r4
 1080328:	2825883a 	mov	r18,r5
 108032c:	10001c26 	beq	r2,zero,10803a0 <__sfvwrite_r+0xb0>
 1080330:	29c0030b 	ldhu	r7,12(r5)
 1080334:	3880020c 	andi	r2,r7,8
 1080338:	10002726 	beq	r2,zero,10803d8 <__sfvwrite_r+0xe8>
 108033c:	28800417 	ldw	r2,16(r5)
 1080340:	10002526 	beq	r2,zero,10803d8 <__sfvwrite_r+0xe8>
 1080344:	3880008c 	andi	r2,r7,2
 1080348:	b5400017 	ldw	r21,0(r22)
 108034c:	10002826 	beq	r2,zero,10803f0 <__sfvwrite_r+0x100>
 1080350:	0021883a 	mov	r16,zero
 1080354:	0023883a 	mov	r17,zero
 1080358:	880d883a 	mov	r6,r17
 108035c:	e009883a 	mov	r4,fp
 1080360:	00810004 	movi	r2,1024
 1080364:	80006e26 	beq	r16,zero,1080520 <__sfvwrite_r+0x230>
 1080368:	800f883a 	mov	r7,r16
 108036c:	91400717 	ldw	r5,28(r18)
 1080370:	1400012e 	bgeu	r2,r16,1080378 <__sfvwrite_r+0x88>
 1080374:	100f883a 	mov	r7,r2
 1080378:	90c00917 	ldw	r3,36(r18)
 108037c:	183ee83a 	callr	r3
 1080380:	1007883a 	mov	r3,r2
 1080384:	80a1c83a 	sub	r16,r16,r2
 1080388:	88a3883a 	add	r17,r17,r2
 108038c:	00806d0e 	bge	zero,r2,1080544 <__sfvwrite_r+0x254>
 1080390:	b0800217 	ldw	r2,8(r22)
 1080394:	10c5c83a 	sub	r2,r2,r3
 1080398:	b0800215 	stw	r2,8(r22)
 108039c:	103fee1e 	bne	r2,zero,1080358 <__sfvwrite_r+0x68>
 10803a0:	0009883a 	mov	r4,zero
 10803a4:	2005883a 	mov	r2,r4
 10803a8:	dfc00a17 	ldw	ra,40(sp)
 10803ac:	df000917 	ldw	fp,36(sp)
 10803b0:	ddc00817 	ldw	r23,32(sp)
 10803b4:	dd800717 	ldw	r22,28(sp)
 10803b8:	dd400617 	ldw	r21,24(sp)
 10803bc:	dd000517 	ldw	r20,20(sp)
 10803c0:	dcc00417 	ldw	r19,16(sp)
 10803c4:	dc800317 	ldw	r18,12(sp)
 10803c8:	dc400217 	ldw	r17,8(sp)
 10803cc:	dc000117 	ldw	r16,4(sp)
 10803d0:	dec00b04 	addi	sp,sp,44
 10803d4:	f800283a 	ret
 10803d8:	10817940 	call	1081794 <__swsetup_r>
 10803dc:	1000e41e 	bne	r2,zero,1080770 <__sfvwrite_r+0x480>
 10803e0:	91c0030b 	ldhu	r7,12(r18)
 10803e4:	b5400017 	ldw	r21,0(r22)
 10803e8:	3880008c 	andi	r2,r7,2
 10803ec:	103fd81e 	bne	r2,zero,1080350 <__sfvwrite_r+0x60>
 10803f0:	3880004c 	andi	r2,r7,1
 10803f4:	1005003a 	cmpeq	r2,r2,zero
 10803f8:	10005726 	beq	r2,zero,1080558 <__sfvwrite_r+0x268>
 10803fc:	0029883a 	mov	r20,zero
 1080400:	002f883a 	mov	r23,zero
 1080404:	a0004226 	beq	r20,zero,1080510 <__sfvwrite_r+0x220>
 1080408:	3880800c 	andi	r2,r7,512
 108040c:	94000217 	ldw	r16,8(r18)
 1080410:	10008b26 	beq	r2,zero,1080640 <__sfvwrite_r+0x350>
 1080414:	800d883a 	mov	r6,r16
 1080418:	a400a536 	bltu	r20,r16,10806b0 <__sfvwrite_r+0x3c0>
 108041c:	3881200c 	andi	r2,r7,1152
 1080420:	10002726 	beq	r2,zero,10804c0 <__sfvwrite_r+0x1d0>
 1080424:	90800517 	ldw	r2,20(r18)
 1080428:	92000417 	ldw	r8,16(r18)
 108042c:	91400017 	ldw	r5,0(r18)
 1080430:	1087883a 	add	r3,r2,r2
 1080434:	1887883a 	add	r3,r3,r2
 1080438:	1808d7fa 	srli	r4,r3,31
 108043c:	2a21c83a 	sub	r16,r5,r8
 1080440:	80800044 	addi	r2,r16,1
 1080444:	20c9883a 	add	r4,r4,r3
 1080448:	2027d07a 	srai	r19,r4,1
 108044c:	a085883a 	add	r2,r20,r2
 1080450:	980d883a 	mov	r6,r19
 1080454:	9880022e 	bgeu	r19,r2,1080460 <__sfvwrite_r+0x170>
 1080458:	1027883a 	mov	r19,r2
 108045c:	100d883a 	mov	r6,r2
 1080460:	3881000c 	andi	r2,r7,1024
 1080464:	1000b826 	beq	r2,zero,1080748 <__sfvwrite_r+0x458>
 1080468:	300b883a 	mov	r5,r6
 108046c:	e009883a 	mov	r4,fp
 1080470:	108078c0 	call	108078c <_malloc_r>
 1080474:	10003126 	beq	r2,zero,108053c <__sfvwrite_r+0x24c>
 1080478:	91400417 	ldw	r5,16(r18)
 108047c:	1009883a 	mov	r4,r2
 1080480:	800d883a 	mov	r6,r16
 1080484:	1023883a 	mov	r17,r2
 1080488:	1080fb00 	call	1080fb0 <memcpy>
 108048c:	90c0030b 	ldhu	r3,12(r18)
 1080490:	00beffc4 	movi	r2,-1025
 1080494:	1886703a 	and	r3,r3,r2
 1080498:	18c02014 	ori	r3,r3,128
 108049c:	90c0030d 	sth	r3,12(r18)
 10804a0:	9c07c83a 	sub	r3,r19,r16
 10804a4:	8c05883a 	add	r2,r17,r16
 10804a8:	a00d883a 	mov	r6,r20
 10804ac:	a021883a 	mov	r16,r20
 10804b0:	90800015 	stw	r2,0(r18)
 10804b4:	90c00215 	stw	r3,8(r18)
 10804b8:	94400415 	stw	r17,16(r18)
 10804bc:	94c00515 	stw	r19,20(r18)
 10804c0:	91000017 	ldw	r4,0(r18)
 10804c4:	b80b883a 	mov	r5,r23
 10804c8:	a023883a 	mov	r17,r20
 10804cc:	10810500 	call	1081050 <memmove>
 10804d0:	90c00217 	ldw	r3,8(r18)
 10804d4:	90800017 	ldw	r2,0(r18)
 10804d8:	a027883a 	mov	r19,r20
 10804dc:	1c07c83a 	sub	r3,r3,r16
 10804e0:	1405883a 	add	r2,r2,r16
 10804e4:	90c00215 	stw	r3,8(r18)
 10804e8:	a021883a 	mov	r16,r20
 10804ec:	90800015 	stw	r2,0(r18)
 10804f0:	b0800217 	ldw	r2,8(r22)
 10804f4:	1405c83a 	sub	r2,r2,r16
 10804f8:	b0800215 	stw	r2,8(r22)
 10804fc:	103fa826 	beq	r2,zero,10803a0 <__sfvwrite_r+0xb0>
 1080500:	a469c83a 	sub	r20,r20,r17
 1080504:	91c0030b 	ldhu	r7,12(r18)
 1080508:	bcef883a 	add	r23,r23,r19
 108050c:	a03fbe1e 	bne	r20,zero,1080408 <__sfvwrite_r+0x118>
 1080510:	adc00017 	ldw	r23,0(r21)
 1080514:	ad000117 	ldw	r20,4(r21)
 1080518:	ad400204 	addi	r21,r21,8
 108051c:	003fb906 	br	1080404 <__sfvwrite_r+0x114>
 1080520:	ac400017 	ldw	r17,0(r21)
 1080524:	ac000117 	ldw	r16,4(r21)
 1080528:	ad400204 	addi	r21,r21,8
 108052c:	003f8a06 	br	1080358 <__sfvwrite_r+0x68>
 1080530:	91400417 	ldw	r5,16(r18)
 1080534:	e009883a 	mov	r4,fp
 1080538:	1081f200 	call	1081f20 <_free_r>
 108053c:	00800304 	movi	r2,12
 1080540:	e0800015 	stw	r2,0(fp)
 1080544:	9080030b 	ldhu	r2,12(r18)
 1080548:	013fffc4 	movi	r4,-1
 108054c:	10801014 	ori	r2,r2,64
 1080550:	9080030d 	sth	r2,12(r18)
 1080554:	003f9306 	br	10803a4 <__sfvwrite_r+0xb4>
 1080558:	0027883a 	mov	r19,zero
 108055c:	002f883a 	mov	r23,zero
 1080560:	d8000015 	stw	zero,0(sp)
 1080564:	0029883a 	mov	r20,zero
 1080568:	98001e26 	beq	r19,zero,10805e4 <__sfvwrite_r+0x2f4>
 108056c:	d8c00017 	ldw	r3,0(sp)
 1080570:	1804c03a 	cmpne	r2,r3,zero
 1080574:	10005e26 	beq	r2,zero,10806f0 <__sfvwrite_r+0x400>
 1080578:	9821883a 	mov	r16,r19
 108057c:	a4c0012e 	bgeu	r20,r19,1080584 <__sfvwrite_r+0x294>
 1080580:	a021883a 	mov	r16,r20
 1080584:	91000017 	ldw	r4,0(r18)
 1080588:	90800417 	ldw	r2,16(r18)
 108058c:	91800217 	ldw	r6,8(r18)
 1080590:	91c00517 	ldw	r7,20(r18)
 1080594:	1100022e 	bgeu	r2,r4,10805a0 <__sfvwrite_r+0x2b0>
 1080598:	31e3883a 	add	r17,r6,r7
 108059c:	8c001616 	blt	r17,r16,10805f8 <__sfvwrite_r+0x308>
 10805a0:	81c03816 	blt	r16,r7,1080684 <__sfvwrite_r+0x394>
 10805a4:	90c00917 	ldw	r3,36(r18)
 10805a8:	91400717 	ldw	r5,28(r18)
 10805ac:	e009883a 	mov	r4,fp
 10805b0:	b80d883a 	mov	r6,r23
 10805b4:	183ee83a 	callr	r3
 10805b8:	1023883a 	mov	r17,r2
 10805bc:	00bfe10e 	bge	zero,r2,1080544 <__sfvwrite_r+0x254>
 10805c0:	a469c83a 	sub	r20,r20,r17
 10805c4:	a0001826 	beq	r20,zero,1080628 <__sfvwrite_r+0x338>
 10805c8:	b0800217 	ldw	r2,8(r22)
 10805cc:	1445c83a 	sub	r2,r2,r17
 10805d0:	b0800215 	stw	r2,8(r22)
 10805d4:	103f7226 	beq	r2,zero,10803a0 <__sfvwrite_r+0xb0>
 10805d8:	9c67c83a 	sub	r19,r19,r17
 10805dc:	bc6f883a 	add	r23,r23,r17
 10805e0:	983fe21e 	bne	r19,zero,108056c <__sfvwrite_r+0x27c>
 10805e4:	adc00017 	ldw	r23,0(r21)
 10805e8:	acc00117 	ldw	r19,4(r21)
 10805ec:	ad400204 	addi	r21,r21,8
 10805f0:	d8000015 	stw	zero,0(sp)
 10805f4:	003fdc06 	br	1080568 <__sfvwrite_r+0x278>
 10805f8:	b80b883a 	mov	r5,r23
 10805fc:	880d883a 	mov	r6,r17
 1080600:	10810500 	call	1081050 <memmove>
 1080604:	90c00017 	ldw	r3,0(r18)
 1080608:	e009883a 	mov	r4,fp
 108060c:	900b883a 	mov	r5,r18
 1080610:	1c47883a 	add	r3,r3,r17
 1080614:	90c00015 	stw	r3,0(r18)
 1080618:	10818d00 	call	10818d0 <_fflush_r>
 108061c:	103fc91e 	bne	r2,zero,1080544 <__sfvwrite_r+0x254>
 1080620:	a469c83a 	sub	r20,r20,r17
 1080624:	a03fe81e 	bne	r20,zero,10805c8 <__sfvwrite_r+0x2d8>
 1080628:	e009883a 	mov	r4,fp
 108062c:	900b883a 	mov	r5,r18
 1080630:	10818d00 	call	10818d0 <_fflush_r>
 1080634:	103fc31e 	bne	r2,zero,1080544 <__sfvwrite_r+0x254>
 1080638:	d8000015 	stw	zero,0(sp)
 108063c:	003fe206 	br	10805c8 <__sfvwrite_r+0x2d8>
 1080640:	91000017 	ldw	r4,0(r18)
 1080644:	90800417 	ldw	r2,16(r18)
 1080648:	1100022e 	bgeu	r2,r4,1080654 <__sfvwrite_r+0x364>
 108064c:	8023883a 	mov	r17,r16
 1080650:	85003136 	bltu	r16,r20,1080718 <__sfvwrite_r+0x428>
 1080654:	91c00517 	ldw	r7,20(r18)
 1080658:	a1c01836 	bltu	r20,r7,10806bc <__sfvwrite_r+0x3cc>
 108065c:	90c00917 	ldw	r3,36(r18)
 1080660:	91400717 	ldw	r5,28(r18)
 1080664:	e009883a 	mov	r4,fp
 1080668:	b80d883a 	mov	r6,r23
 108066c:	183ee83a 	callr	r3
 1080670:	1021883a 	mov	r16,r2
 1080674:	00bfb30e 	bge	zero,r2,1080544 <__sfvwrite_r+0x254>
 1080678:	1023883a 	mov	r17,r2
 108067c:	1027883a 	mov	r19,r2
 1080680:	003f9b06 	br	10804f0 <__sfvwrite_r+0x200>
 1080684:	b80b883a 	mov	r5,r23
 1080688:	800d883a 	mov	r6,r16
 108068c:	10810500 	call	1081050 <memmove>
 1080690:	90c00217 	ldw	r3,8(r18)
 1080694:	90800017 	ldw	r2,0(r18)
 1080698:	8023883a 	mov	r17,r16
 108069c:	1c07c83a 	sub	r3,r3,r16
 10806a0:	1405883a 	add	r2,r2,r16
 10806a4:	90c00215 	stw	r3,8(r18)
 10806a8:	90800015 	stw	r2,0(r18)
 10806ac:	003fc406 	br	10805c0 <__sfvwrite_r+0x2d0>
 10806b0:	a00d883a 	mov	r6,r20
 10806b4:	a021883a 	mov	r16,r20
 10806b8:	003f8106 	br	10804c0 <__sfvwrite_r+0x1d0>
 10806bc:	b80b883a 	mov	r5,r23
 10806c0:	a00d883a 	mov	r6,r20
 10806c4:	10810500 	call	1081050 <memmove>
 10806c8:	90c00217 	ldw	r3,8(r18)
 10806cc:	90800017 	ldw	r2,0(r18)
 10806d0:	a021883a 	mov	r16,r20
 10806d4:	1d07c83a 	sub	r3,r3,r20
 10806d8:	1505883a 	add	r2,r2,r20
 10806dc:	a023883a 	mov	r17,r20
 10806e0:	a027883a 	mov	r19,r20
 10806e4:	90c00215 	stw	r3,8(r18)
 10806e8:	90800015 	stw	r2,0(r18)
 10806ec:	003f8006 	br	10804f0 <__sfvwrite_r+0x200>
 10806f0:	b809883a 	mov	r4,r23
 10806f4:	01400284 	movi	r5,10
 10806f8:	980d883a 	mov	r6,r19
 10806fc:	1080ecc0 	call	1080ecc <memchr>
 1080700:	10001726 	beq	r2,zero,1080760 <__sfvwrite_r+0x470>
 1080704:	15c5c83a 	sub	r2,r2,r23
 1080708:	15000044 	addi	r20,r2,1
 108070c:	00800044 	movi	r2,1
 1080710:	d8800015 	stw	r2,0(sp)
 1080714:	003f9806 	br	1080578 <__sfvwrite_r+0x288>
 1080718:	b80b883a 	mov	r5,r23
 108071c:	800d883a 	mov	r6,r16
 1080720:	10810500 	call	1081050 <memmove>
 1080724:	90c00017 	ldw	r3,0(r18)
 1080728:	e009883a 	mov	r4,fp
 108072c:	900b883a 	mov	r5,r18
 1080730:	1c07883a 	add	r3,r3,r16
 1080734:	90c00015 	stw	r3,0(r18)
 1080738:	8027883a 	mov	r19,r16
 108073c:	10818d00 	call	10818d0 <_fflush_r>
 1080740:	103f6b26 	beq	r2,zero,10804f0 <__sfvwrite_r+0x200>
 1080744:	003f7f06 	br	1080544 <__sfvwrite_r+0x254>
 1080748:	400b883a 	mov	r5,r8
 108074c:	e009883a 	mov	r4,fp
 1080750:	10811300 	call	1081130 <_realloc_r>
 1080754:	103f7626 	beq	r2,zero,1080530 <__sfvwrite_r+0x240>
 1080758:	1023883a 	mov	r17,r2
 108075c:	003f5006 	br	10804a0 <__sfvwrite_r+0x1b0>
 1080760:	00c00044 	movi	r3,1
 1080764:	9d000044 	addi	r20,r19,1
 1080768:	d8c00015 	stw	r3,0(sp)
 108076c:	003f8206 	br	1080578 <__sfvwrite_r+0x288>
 1080770:	9080030b 	ldhu	r2,12(r18)
 1080774:	00c00244 	movi	r3,9
 1080778:	013fffc4 	movi	r4,-1
 108077c:	10801014 	ori	r2,r2,64
 1080780:	9080030d 	sth	r2,12(r18)
 1080784:	e0c00015 	stw	r3,0(fp)
 1080788:	003f0606 	br	10803a4 <__sfvwrite_r+0xb4>

0108078c <_malloc_r>:
 108078c:	defff604 	addi	sp,sp,-40
 1080790:	28c002c4 	addi	r3,r5,11
 1080794:	00800584 	movi	r2,22
 1080798:	dc800215 	stw	r18,8(sp)
 108079c:	dfc00915 	stw	ra,36(sp)
 10807a0:	df000815 	stw	fp,32(sp)
 10807a4:	ddc00715 	stw	r23,28(sp)
 10807a8:	dd800615 	stw	r22,24(sp)
 10807ac:	dd400515 	stw	r21,20(sp)
 10807b0:	dd000415 	stw	r20,16(sp)
 10807b4:	dcc00315 	stw	r19,12(sp)
 10807b8:	dc400115 	stw	r17,4(sp)
 10807bc:	dc000015 	stw	r16,0(sp)
 10807c0:	2025883a 	mov	r18,r4
 10807c4:	10c01236 	bltu	r2,r3,1080810 <_malloc_r+0x84>
 10807c8:	04400404 	movi	r17,16
 10807cc:	8940142e 	bgeu	r17,r5,1080820 <_malloc_r+0x94>
 10807d0:	00800304 	movi	r2,12
 10807d4:	0007883a 	mov	r3,zero
 10807d8:	90800015 	stw	r2,0(r18)
 10807dc:	1805883a 	mov	r2,r3
 10807e0:	dfc00917 	ldw	ra,36(sp)
 10807e4:	df000817 	ldw	fp,32(sp)
 10807e8:	ddc00717 	ldw	r23,28(sp)
 10807ec:	dd800617 	ldw	r22,24(sp)
 10807f0:	dd400517 	ldw	r21,20(sp)
 10807f4:	dd000417 	ldw	r20,16(sp)
 10807f8:	dcc00317 	ldw	r19,12(sp)
 10807fc:	dc800217 	ldw	r18,8(sp)
 1080800:	dc400117 	ldw	r17,4(sp)
 1080804:	dc000017 	ldw	r16,0(sp)
 1080808:	dec00a04 	addi	sp,sp,40
 108080c:	f800283a 	ret
 1080810:	00bffe04 	movi	r2,-8
 1080814:	18a2703a 	and	r17,r3,r2
 1080818:	883fed16 	blt	r17,zero,10807d0 <_malloc_r+0x44>
 108081c:	897fec36 	bltu	r17,r5,10807d0 <_malloc_r+0x44>
 1080820:	9009883a 	mov	r4,r18
 1080824:	1082cb80 	call	1082cb8 <__malloc_lock>
 1080828:	00807dc4 	movi	r2,503
 108082c:	14402b2e 	bgeu	r2,r17,10808dc <_malloc_r+0x150>
 1080830:	8806d27a 	srli	r3,r17,9
 1080834:	18003f1e 	bne	r3,zero,1080934 <_malloc_r+0x1a8>
 1080838:	880cd0fa 	srli	r6,r17,3
 108083c:	300490fa 	slli	r2,r6,3
 1080840:	02c04234 	movhi	r11,264
 1080844:	5aceee04 	addi	r11,r11,15288
 1080848:	12cb883a 	add	r5,r2,r11
 108084c:	2c000317 	ldw	r16,12(r5)
 1080850:	580f883a 	mov	r7,r11
 1080854:	2c00041e 	bne	r5,r16,1080868 <_malloc_r+0xdc>
 1080858:	00000a06 	br	1080884 <_malloc_r+0xf8>
 108085c:	1800860e 	bge	r3,zero,1080a78 <_malloc_r+0x2ec>
 1080860:	84000317 	ldw	r16,12(r16)
 1080864:	2c000726 	beq	r5,r16,1080884 <_malloc_r+0xf8>
 1080868:	80800117 	ldw	r2,4(r16)
 108086c:	00ffff04 	movi	r3,-4
 1080870:	10c8703a 	and	r4,r2,r3
 1080874:	2447c83a 	sub	r3,r4,r17
 1080878:	008003c4 	movi	r2,15
 108087c:	10fff70e 	bge	r2,r3,108085c <_malloc_r+0xd0>
 1080880:	31bfffc4 	addi	r6,r6,-1
 1080884:	32400044 	addi	r9,r6,1
 1080888:	02804234 	movhi	r10,264
 108088c:	528ef004 	addi	r10,r10,15296
 1080890:	54000217 	ldw	r16,8(r10)
 1080894:	8280a026 	beq	r16,r10,1080b18 <_malloc_r+0x38c>
 1080898:	80800117 	ldw	r2,4(r16)
 108089c:	00ffff04 	movi	r3,-4
 10808a0:	10ca703a 	and	r5,r2,r3
 10808a4:	2c4dc83a 	sub	r6,r5,r17
 10808a8:	008003c4 	movi	r2,15
 10808ac:	11808316 	blt	r2,r6,1080abc <_malloc_r+0x330>
 10808b0:	52800315 	stw	r10,12(r10)
 10808b4:	52800215 	stw	r10,8(r10)
 10808b8:	30002916 	blt	r6,zero,1080960 <_malloc_r+0x1d4>
 10808bc:	8147883a 	add	r3,r16,r5
 10808c0:	18800117 	ldw	r2,4(r3)
 10808c4:	9009883a 	mov	r4,r18
 10808c8:	10800054 	ori	r2,r2,1
 10808cc:	18800115 	stw	r2,4(r3)
 10808d0:	1082cbc0 	call	1082cbc <__malloc_unlock>
 10808d4:	80c00204 	addi	r3,r16,8
 10808d8:	003fc006 	br	10807dc <_malloc_r+0x50>
 10808dc:	02c04234 	movhi	r11,264
 10808e0:	5aceee04 	addi	r11,r11,15288
 10808e4:	8ac5883a 	add	r2,r17,r11
 10808e8:	14000317 	ldw	r16,12(r2)
 10808ec:	580f883a 	mov	r7,r11
 10808f0:	8806d0fa 	srli	r3,r17,3
 10808f4:	14006c26 	beq	r2,r16,1080aa8 <_malloc_r+0x31c>
 10808f8:	80c00117 	ldw	r3,4(r16)
 10808fc:	00bfff04 	movi	r2,-4
 1080900:	81800317 	ldw	r6,12(r16)
 1080904:	1886703a 	and	r3,r3,r2
 1080908:	80c7883a 	add	r3,r16,r3
 108090c:	18800117 	ldw	r2,4(r3)
 1080910:	81400217 	ldw	r5,8(r16)
 1080914:	9009883a 	mov	r4,r18
 1080918:	10800054 	ori	r2,r2,1
 108091c:	18800115 	stw	r2,4(r3)
 1080920:	31400215 	stw	r5,8(r6)
 1080924:	29800315 	stw	r6,12(r5)
 1080928:	1082cbc0 	call	1082cbc <__malloc_unlock>
 108092c:	80c00204 	addi	r3,r16,8
 1080930:	003faa06 	br	10807dc <_malloc_r+0x50>
 1080934:	00800104 	movi	r2,4
 1080938:	10c0052e 	bgeu	r2,r3,1080950 <_malloc_r+0x1c4>
 108093c:	00800504 	movi	r2,20
 1080940:	10c07836 	bltu	r2,r3,1080b24 <_malloc_r+0x398>
 1080944:	198016c4 	addi	r6,r3,91
 1080948:	300490fa 	slli	r2,r6,3
 108094c:	003fbc06 	br	1080840 <_malloc_r+0xb4>
 1080950:	8804d1ba 	srli	r2,r17,6
 1080954:	11800e04 	addi	r6,r2,56
 1080958:	300490fa 	slli	r2,r6,3
 108095c:	003fb806 	br	1080840 <_malloc_r+0xb4>
 1080960:	00807fc4 	movi	r2,511
 1080964:	1140bb36 	bltu	r2,r5,1080c54 <_malloc_r+0x4c8>
 1080968:	2806d0fa 	srli	r3,r5,3
 108096c:	573ffe04 	addi	fp,r10,-8
 1080970:	00800044 	movi	r2,1
 1080974:	180890fa 	slli	r4,r3,3
 1080978:	1807d0ba 	srai	r3,r3,2
 108097c:	e1c00117 	ldw	r7,4(fp)
 1080980:	5909883a 	add	r4,r11,r4
 1080984:	21400217 	ldw	r5,8(r4)
 1080988:	10c4983a 	sll	r2,r2,r3
 108098c:	81000315 	stw	r4,12(r16)
 1080990:	81400215 	stw	r5,8(r16)
 1080994:	388eb03a 	or	r7,r7,r2
 1080998:	2c000315 	stw	r16,12(r5)
 108099c:	24000215 	stw	r16,8(r4)
 10809a0:	e1c00115 	stw	r7,4(fp)
 10809a4:	4807883a 	mov	r3,r9
 10809a8:	4800cd16 	blt	r9,zero,1080ce0 <_malloc_r+0x554>
 10809ac:	1807d0ba 	srai	r3,r3,2
 10809b0:	00800044 	movi	r2,1
 10809b4:	10c8983a 	sll	r4,r2,r3
 10809b8:	39004436 	bltu	r7,r4,1080acc <_malloc_r+0x340>
 10809bc:	21c4703a 	and	r2,r4,r7
 10809c0:	10000a1e 	bne	r2,zero,10809ec <_malloc_r+0x260>
 10809c4:	2109883a 	add	r4,r4,r4
 10809c8:	00bfff04 	movi	r2,-4
 10809cc:	4884703a 	and	r2,r9,r2
 10809d0:	3906703a 	and	r3,r7,r4
 10809d4:	12400104 	addi	r9,r2,4
 10809d8:	1800041e 	bne	r3,zero,10809ec <_malloc_r+0x260>
 10809dc:	2109883a 	add	r4,r4,r4
 10809e0:	3904703a 	and	r2,r7,r4
 10809e4:	4a400104 	addi	r9,r9,4
 10809e8:	103ffc26 	beq	r2,zero,10809dc <_malloc_r+0x250>
 10809ec:	480490fa 	slli	r2,r9,3
 10809f0:	4819883a 	mov	r12,r9
 10809f4:	023fff04 	movi	r8,-4
 10809f8:	589b883a 	add	r13,r11,r2
 10809fc:	6807883a 	mov	r3,r13
 1080a00:	014003c4 	movi	r5,15
 1080a04:	1c000317 	ldw	r16,12(r3)
 1080a08:	1c00041e 	bne	r3,r16,1080a1c <_malloc_r+0x290>
 1080a0c:	0000a706 	br	1080cac <_malloc_r+0x520>
 1080a10:	3000ab0e 	bge	r6,zero,1080cc0 <_malloc_r+0x534>
 1080a14:	84000317 	ldw	r16,12(r16)
 1080a18:	1c00a426 	beq	r3,r16,1080cac <_malloc_r+0x520>
 1080a1c:	80800117 	ldw	r2,4(r16)
 1080a20:	1204703a 	and	r2,r2,r8
 1080a24:	144dc83a 	sub	r6,r2,r17
 1080a28:	29bff90e 	bge	r5,r6,1080a10 <_malloc_r+0x284>
 1080a2c:	81000317 	ldw	r4,12(r16)
 1080a30:	80c00217 	ldw	r3,8(r16)
 1080a34:	89400054 	ori	r5,r17,1
 1080a38:	8445883a 	add	r2,r16,r17
 1080a3c:	20c00215 	stw	r3,8(r4)
 1080a40:	19000315 	stw	r4,12(r3)
 1080a44:	81400115 	stw	r5,4(r16)
 1080a48:	1187883a 	add	r3,r2,r6
 1080a4c:	31000054 	ori	r4,r6,1
 1080a50:	50800315 	stw	r2,12(r10)
 1080a54:	50800215 	stw	r2,8(r10)
 1080a58:	19800015 	stw	r6,0(r3)
 1080a5c:	11000115 	stw	r4,4(r2)
 1080a60:	12800215 	stw	r10,8(r2)
 1080a64:	12800315 	stw	r10,12(r2)
 1080a68:	9009883a 	mov	r4,r18
 1080a6c:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1080a70:	80c00204 	addi	r3,r16,8
 1080a74:	003f5906 	br	10807dc <_malloc_r+0x50>
 1080a78:	8109883a 	add	r4,r16,r4
 1080a7c:	20800117 	ldw	r2,4(r4)
 1080a80:	80c00217 	ldw	r3,8(r16)
 1080a84:	81400317 	ldw	r5,12(r16)
 1080a88:	10800054 	ori	r2,r2,1
 1080a8c:	20800115 	stw	r2,4(r4)
 1080a90:	28c00215 	stw	r3,8(r5)
 1080a94:	19400315 	stw	r5,12(r3)
 1080a98:	9009883a 	mov	r4,r18
 1080a9c:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1080aa0:	80c00204 	addi	r3,r16,8
 1080aa4:	003f4d06 	br	10807dc <_malloc_r+0x50>
 1080aa8:	80800204 	addi	r2,r16,8
 1080aac:	14000317 	ldw	r16,12(r2)
 1080ab0:	143f911e 	bne	r2,r16,10808f8 <_malloc_r+0x16c>
 1080ab4:	1a400084 	addi	r9,r3,2
 1080ab8:	003f7306 	br	1080888 <_malloc_r+0xfc>
 1080abc:	88c00054 	ori	r3,r17,1
 1080ac0:	8445883a 	add	r2,r16,r17
 1080ac4:	80c00115 	stw	r3,4(r16)
 1080ac8:	003fdf06 	br	1080a48 <_malloc_r+0x2bc>
 1080acc:	e4000217 	ldw	r16,8(fp)
 1080ad0:	00bfff04 	movi	r2,-4
 1080ad4:	80c00117 	ldw	r3,4(r16)
 1080ad8:	802d883a 	mov	r22,r16
 1080adc:	18aa703a 	and	r21,r3,r2
 1080ae0:	ac401636 	bltu	r21,r17,1080b3c <_malloc_r+0x3b0>
 1080ae4:	ac49c83a 	sub	r4,r21,r17
 1080ae8:	008003c4 	movi	r2,15
 1080aec:	1100130e 	bge	r2,r4,1080b3c <_malloc_r+0x3b0>
 1080af0:	88800054 	ori	r2,r17,1
 1080af4:	8447883a 	add	r3,r16,r17
 1080af8:	80800115 	stw	r2,4(r16)
 1080afc:	20800054 	ori	r2,r4,1
 1080b00:	18800115 	stw	r2,4(r3)
 1080b04:	e0c00215 	stw	r3,8(fp)
 1080b08:	9009883a 	mov	r4,r18
 1080b0c:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1080b10:	80c00204 	addi	r3,r16,8
 1080b14:	003f3106 	br	10807dc <_malloc_r+0x50>
 1080b18:	39c00117 	ldw	r7,4(r7)
 1080b1c:	573ffe04 	addi	fp,r10,-8
 1080b20:	003fa006 	br	10809a4 <_malloc_r+0x218>
 1080b24:	00801504 	movi	r2,84
 1080b28:	10c06736 	bltu	r2,r3,1080cc8 <_malloc_r+0x53c>
 1080b2c:	8804d33a 	srli	r2,r17,12
 1080b30:	11801b84 	addi	r6,r2,110
 1080b34:	300490fa 	slli	r2,r6,3
 1080b38:	003f4106 	br	1080840 <_malloc_r+0xb4>
 1080b3c:	d0a62217 	ldw	r2,-26488(gp)
 1080b40:	d0e00317 	ldw	r3,-32756(gp)
 1080b44:	053fffc4 	movi	r20,-1
 1080b48:	10800404 	addi	r2,r2,16
 1080b4c:	88a7883a 	add	r19,r17,r2
 1080b50:	1d000326 	beq	r3,r20,1080b60 <_malloc_r+0x3d4>
 1080b54:	98c3ffc4 	addi	r3,r19,4095
 1080b58:	00bc0004 	movi	r2,-4096
 1080b5c:	18a6703a 	and	r19,r3,r2
 1080b60:	9009883a 	mov	r4,r18
 1080b64:	980b883a 	mov	r5,r19
 1080b68:	10817240 	call	1081724 <_sbrk_r>
 1080b6c:	1009883a 	mov	r4,r2
 1080b70:	15000426 	beq	r2,r20,1080b84 <_malloc_r+0x3f8>
 1080b74:	854b883a 	add	r5,r16,r21
 1080b78:	1029883a 	mov	r20,r2
 1080b7c:	11405a2e 	bgeu	r2,r5,1080ce8 <_malloc_r+0x55c>
 1080b80:	87000c26 	beq	r16,fp,1080bb4 <_malloc_r+0x428>
 1080b84:	e4000217 	ldw	r16,8(fp)
 1080b88:	80c00117 	ldw	r3,4(r16)
 1080b8c:	00bfff04 	movi	r2,-4
 1080b90:	1884703a 	and	r2,r3,r2
 1080b94:	14400336 	bltu	r2,r17,1080ba4 <_malloc_r+0x418>
 1080b98:	1449c83a 	sub	r4,r2,r17
 1080b9c:	008003c4 	movi	r2,15
 1080ba0:	113fd316 	blt	r2,r4,1080af0 <_malloc_r+0x364>
 1080ba4:	9009883a 	mov	r4,r18
 1080ba8:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1080bac:	0007883a 	mov	r3,zero
 1080bb0:	003f0a06 	br	10807dc <_malloc_r+0x50>
 1080bb4:	05c04234 	movhi	r23,264
 1080bb8:	bdda2a04 	addi	r23,r23,26792
 1080bbc:	b8800017 	ldw	r2,0(r23)
 1080bc0:	988d883a 	add	r6,r19,r2
 1080bc4:	b9800015 	stw	r6,0(r23)
 1080bc8:	d0e00317 	ldw	r3,-32756(gp)
 1080bcc:	00bfffc4 	movi	r2,-1
 1080bd0:	18808e26 	beq	r3,r2,1080e0c <_malloc_r+0x680>
 1080bd4:	2145c83a 	sub	r2,r4,r5
 1080bd8:	3085883a 	add	r2,r6,r2
 1080bdc:	b8800015 	stw	r2,0(r23)
 1080be0:	20c001cc 	andi	r3,r4,7
 1080be4:	18005f1e 	bne	r3,zero,1080d64 <_malloc_r+0x5d8>
 1080be8:	000b883a 	mov	r5,zero
 1080bec:	a4c5883a 	add	r2,r20,r19
 1080bf0:	1083ffcc 	andi	r2,r2,4095
 1080bf4:	00c40004 	movi	r3,4096
 1080bf8:	1887c83a 	sub	r3,r3,r2
 1080bfc:	28e7883a 	add	r19,r5,r3
 1080c00:	9009883a 	mov	r4,r18
 1080c04:	980b883a 	mov	r5,r19
 1080c08:	10817240 	call	1081724 <_sbrk_r>
 1080c0c:	1007883a 	mov	r3,r2
 1080c10:	00bfffc4 	movi	r2,-1
 1080c14:	18807a26 	beq	r3,r2,1080e00 <_malloc_r+0x674>
 1080c18:	1d05c83a 	sub	r2,r3,r20
 1080c1c:	9885883a 	add	r2,r19,r2
 1080c20:	10c00054 	ori	r3,r2,1
 1080c24:	b8800017 	ldw	r2,0(r23)
 1080c28:	a021883a 	mov	r16,r20
 1080c2c:	a0c00115 	stw	r3,4(r20)
 1080c30:	9885883a 	add	r2,r19,r2
 1080c34:	b8800015 	stw	r2,0(r23)
 1080c38:	e5000215 	stw	r20,8(fp)
 1080c3c:	b7003626 	beq	r22,fp,1080d18 <_malloc_r+0x58c>
 1080c40:	018003c4 	movi	r6,15
 1080c44:	35404b36 	bltu	r6,r21,1080d74 <_malloc_r+0x5e8>
 1080c48:	00800044 	movi	r2,1
 1080c4c:	a0800115 	stw	r2,4(r20)
 1080c50:	003fcd06 	br	1080b88 <_malloc_r+0x3fc>
 1080c54:	2808d27a 	srli	r4,r5,9
 1080c58:	2000371e 	bne	r4,zero,1080d38 <_malloc_r+0x5ac>
 1080c5c:	2808d0fa 	srli	r4,r5,3
 1080c60:	200690fa 	slli	r3,r4,3
 1080c64:	1ad1883a 	add	r8,r3,r11
 1080c68:	41800217 	ldw	r6,8(r8)
 1080c6c:	41805b26 	beq	r8,r6,1080ddc <_malloc_r+0x650>
 1080c70:	30800117 	ldw	r2,4(r6)
 1080c74:	00ffff04 	movi	r3,-4
 1080c78:	10c4703a 	and	r2,r2,r3
 1080c7c:	2880022e 	bgeu	r5,r2,1080c88 <_malloc_r+0x4fc>
 1080c80:	31800217 	ldw	r6,8(r6)
 1080c84:	41bffa1e 	bne	r8,r6,1080c70 <_malloc_r+0x4e4>
 1080c88:	32000317 	ldw	r8,12(r6)
 1080c8c:	39c00117 	ldw	r7,4(r7)
 1080c90:	82000315 	stw	r8,12(r16)
 1080c94:	81800215 	stw	r6,8(r16)
 1080c98:	07004234 	movhi	fp,264
 1080c9c:	e70eee04 	addi	fp,fp,15288
 1080ca0:	34000315 	stw	r16,12(r6)
 1080ca4:	44000215 	stw	r16,8(r8)
 1080ca8:	003f3e06 	br	10809a4 <_malloc_r+0x218>
 1080cac:	63000044 	addi	r12,r12,1
 1080cb0:	608000cc 	andi	r2,r12,3
 1080cb4:	10005d26 	beq	r2,zero,1080e2c <_malloc_r+0x6a0>
 1080cb8:	18c00204 	addi	r3,r3,8
 1080cbc:	003f5106 	br	1080a04 <_malloc_r+0x278>
 1080cc0:	8089883a 	add	r4,r16,r2
 1080cc4:	003f6d06 	br	1080a7c <_malloc_r+0x2f0>
 1080cc8:	00805504 	movi	r2,340
 1080ccc:	10c02036 	bltu	r2,r3,1080d50 <_malloc_r+0x5c4>
 1080cd0:	8804d3fa 	srli	r2,r17,15
 1080cd4:	11801dc4 	addi	r6,r2,119
 1080cd8:	300490fa 	slli	r2,r6,3
 1080cdc:	003ed806 	br	1080840 <_malloc_r+0xb4>
 1080ce0:	48c000c4 	addi	r3,r9,3
 1080ce4:	003f3106 	br	10809ac <_malloc_r+0x220>
 1080ce8:	05c04234 	movhi	r23,264
 1080cec:	bdda2a04 	addi	r23,r23,26792
 1080cf0:	b8800017 	ldw	r2,0(r23)
 1080cf4:	988d883a 	add	r6,r19,r2
 1080cf8:	b9800015 	stw	r6,0(r23)
 1080cfc:	293fb21e 	bne	r5,r4,1080bc8 <_malloc_r+0x43c>
 1080d00:	2083ffcc 	andi	r2,r4,4095
 1080d04:	103fb01e 	bne	r2,zero,1080bc8 <_malloc_r+0x43c>
 1080d08:	e4000217 	ldw	r16,8(fp)
 1080d0c:	9d45883a 	add	r2,r19,r21
 1080d10:	10800054 	ori	r2,r2,1
 1080d14:	80800115 	stw	r2,4(r16)
 1080d18:	b8c00017 	ldw	r3,0(r23)
 1080d1c:	d0a62317 	ldw	r2,-26484(gp)
 1080d20:	10c0012e 	bgeu	r2,r3,1080d28 <_malloc_r+0x59c>
 1080d24:	d0e62315 	stw	r3,-26484(gp)
 1080d28:	d0a62417 	ldw	r2,-26480(gp)
 1080d2c:	10ff962e 	bgeu	r2,r3,1080b88 <_malloc_r+0x3fc>
 1080d30:	d0e62415 	stw	r3,-26480(gp)
 1080d34:	003f9406 	br	1080b88 <_malloc_r+0x3fc>
 1080d38:	00800104 	movi	r2,4
 1080d3c:	11001e36 	bltu	r2,r4,1080db8 <_malloc_r+0x62c>
 1080d40:	2804d1ba 	srli	r2,r5,6
 1080d44:	11000e04 	addi	r4,r2,56
 1080d48:	200690fa 	slli	r3,r4,3
 1080d4c:	003fc506 	br	1080c64 <_malloc_r+0x4d8>
 1080d50:	00815504 	movi	r2,1364
 1080d54:	10c01d2e 	bgeu	r2,r3,1080dcc <_malloc_r+0x640>
 1080d58:	01801f84 	movi	r6,126
 1080d5c:	0080fc04 	movi	r2,1008
 1080d60:	003eb706 	br	1080840 <_malloc_r+0xb4>
 1080d64:	00800204 	movi	r2,8
 1080d68:	10cbc83a 	sub	r5,r2,r3
 1080d6c:	2169883a 	add	r20,r4,r5
 1080d70:	003f9e06 	br	1080bec <_malloc_r+0x460>
 1080d74:	00bffe04 	movi	r2,-8
 1080d78:	a93ffd04 	addi	r4,r21,-12
 1080d7c:	2088703a 	and	r4,r4,r2
 1080d80:	b10b883a 	add	r5,r22,r4
 1080d84:	00c00144 	movi	r3,5
 1080d88:	28c00215 	stw	r3,8(r5)
 1080d8c:	28c00115 	stw	r3,4(r5)
 1080d90:	b0800117 	ldw	r2,4(r22)
 1080d94:	1080004c 	andi	r2,r2,1
 1080d98:	2084b03a 	or	r2,r4,r2
 1080d9c:	b0800115 	stw	r2,4(r22)
 1080da0:	313fdd2e 	bgeu	r6,r4,1080d18 <_malloc_r+0x58c>
 1080da4:	b1400204 	addi	r5,r22,8
 1080da8:	9009883a 	mov	r4,r18
 1080dac:	1081f200 	call	1081f20 <_free_r>
 1080db0:	e4000217 	ldw	r16,8(fp)
 1080db4:	003fd806 	br	1080d18 <_malloc_r+0x58c>
 1080db8:	00800504 	movi	r2,20
 1080dbc:	11001536 	bltu	r2,r4,1080e14 <_malloc_r+0x688>
 1080dc0:	210016c4 	addi	r4,r4,91
 1080dc4:	200690fa 	slli	r3,r4,3
 1080dc8:	003fa606 	br	1080c64 <_malloc_r+0x4d8>
 1080dcc:	8804d4ba 	srli	r2,r17,18
 1080dd0:	11801f04 	addi	r6,r2,124
 1080dd4:	300490fa 	slli	r2,r6,3
 1080dd8:	003e9906 	br	1080840 <_malloc_r+0xb4>
 1080ddc:	2009d0ba 	srai	r4,r4,2
 1080de0:	01404234 	movhi	r5,264
 1080de4:	294eee04 	addi	r5,r5,15288
 1080de8:	00c00044 	movi	r3,1
 1080dec:	28800117 	ldw	r2,4(r5)
 1080df0:	1906983a 	sll	r3,r3,r4
 1080df4:	10c4b03a 	or	r2,r2,r3
 1080df8:	28800115 	stw	r2,4(r5)
 1080dfc:	003fa306 	br	1080c8c <_malloc_r+0x500>
 1080e00:	0027883a 	mov	r19,zero
 1080e04:	00c00044 	movi	r3,1
 1080e08:	003f8606 	br	1080c24 <_malloc_r+0x498>
 1080e0c:	d1200315 	stw	r4,-32756(gp)
 1080e10:	003f7306 	br	1080be0 <_malloc_r+0x454>
 1080e14:	00801504 	movi	r2,84
 1080e18:	11001936 	bltu	r2,r4,1080e80 <_malloc_r+0x6f4>
 1080e1c:	2804d33a 	srli	r2,r5,12
 1080e20:	11001b84 	addi	r4,r2,110
 1080e24:	200690fa 	slli	r3,r4,3
 1080e28:	003f8e06 	br	1080c64 <_malloc_r+0x4d8>
 1080e2c:	480b883a 	mov	r5,r9
 1080e30:	6807883a 	mov	r3,r13
 1080e34:	288000cc 	andi	r2,r5,3
 1080e38:	18fffe04 	addi	r3,r3,-8
 1080e3c:	297fffc4 	addi	r5,r5,-1
 1080e40:	10001526 	beq	r2,zero,1080e98 <_malloc_r+0x70c>
 1080e44:	18800217 	ldw	r2,8(r3)
 1080e48:	10fffa26 	beq	r2,r3,1080e34 <_malloc_r+0x6a8>
 1080e4c:	2109883a 	add	r4,r4,r4
 1080e50:	393f1e36 	bltu	r7,r4,1080acc <_malloc_r+0x340>
 1080e54:	203f1d26 	beq	r4,zero,1080acc <_malloc_r+0x340>
 1080e58:	21c4703a 	and	r2,r4,r7
 1080e5c:	10000226 	beq	r2,zero,1080e68 <_malloc_r+0x6dc>
 1080e60:	6013883a 	mov	r9,r12
 1080e64:	003ee106 	br	10809ec <_malloc_r+0x260>
 1080e68:	2109883a 	add	r4,r4,r4
 1080e6c:	3904703a 	and	r2,r7,r4
 1080e70:	63000104 	addi	r12,r12,4
 1080e74:	103ffc26 	beq	r2,zero,1080e68 <_malloc_r+0x6dc>
 1080e78:	6013883a 	mov	r9,r12
 1080e7c:	003edb06 	br	10809ec <_malloc_r+0x260>
 1080e80:	00805504 	movi	r2,340
 1080e84:	11000836 	bltu	r2,r4,1080ea8 <_malloc_r+0x71c>
 1080e88:	2804d3fa 	srli	r2,r5,15
 1080e8c:	11001dc4 	addi	r4,r2,119
 1080e90:	200690fa 	slli	r3,r4,3
 1080e94:	003f7306 	br	1080c64 <_malloc_r+0x4d8>
 1080e98:	0104303a 	nor	r2,zero,r4
 1080e9c:	388e703a 	and	r7,r7,r2
 1080ea0:	e1c00115 	stw	r7,4(fp)
 1080ea4:	003fe906 	br	1080e4c <_malloc_r+0x6c0>
 1080ea8:	00815504 	movi	r2,1364
 1080eac:	1100032e 	bgeu	r2,r4,1080ebc <_malloc_r+0x730>
 1080eb0:	01001f84 	movi	r4,126
 1080eb4:	00c0fc04 	movi	r3,1008
 1080eb8:	003f6a06 	br	1080c64 <_malloc_r+0x4d8>
 1080ebc:	2804d4ba 	srli	r2,r5,18
 1080ec0:	11001f04 	addi	r4,r2,124
 1080ec4:	200690fa 	slli	r3,r4,3
 1080ec8:	003f6606 	br	1080c64 <_malloc_r+0x4d8>

01080ecc <memchr>:
 1080ecc:	008000c4 	movi	r2,3
 1080ed0:	29403fcc 	andi	r5,r5,255
 1080ed4:	2007883a 	mov	r3,r4
 1080ed8:	1180022e 	bgeu	r2,r6,1080ee4 <memchr+0x18>
 1080edc:	2084703a 	and	r2,r4,r2
 1080ee0:	10000b26 	beq	r2,zero,1080f10 <memchr+0x44>
 1080ee4:	313fffc4 	addi	r4,r6,-1
 1080ee8:	3000051e 	bne	r6,zero,1080f00 <memchr+0x34>
 1080eec:	00002c06 	br	1080fa0 <memchr+0xd4>
 1080ef0:	213fffc4 	addi	r4,r4,-1
 1080ef4:	00bfffc4 	movi	r2,-1
 1080ef8:	18c00044 	addi	r3,r3,1
 1080efc:	20802826 	beq	r4,r2,1080fa0 <memchr+0xd4>
 1080f00:	18800003 	ldbu	r2,0(r3)
 1080f04:	28bffa1e 	bne	r5,r2,1080ef0 <memchr+0x24>
 1080f08:	1805883a 	mov	r2,r3
 1080f0c:	f800283a 	ret
 1080f10:	0011883a 	mov	r8,zero
 1080f14:	0007883a 	mov	r3,zero
 1080f18:	01c00104 	movi	r7,4
 1080f1c:	4004923a 	slli	r2,r8,8
 1080f20:	18c00044 	addi	r3,r3,1
 1080f24:	1151883a 	add	r8,r2,r5
 1080f28:	19fffc1e 	bne	r3,r7,1080f1c <memchr+0x50>
 1080f2c:	02bfbff4 	movhi	r10,65279
 1080f30:	52bfbfc4 	addi	r10,r10,-257
 1080f34:	02602074 	movhi	r9,32897
 1080f38:	4a602004 	addi	r9,r9,-32640
 1080f3c:	02c000c4 	movi	r11,3
 1080f40:	20800017 	ldw	r2,0(r4)
 1080f44:	31bfff04 	addi	r6,r6,-4
 1080f48:	200f883a 	mov	r7,r4
 1080f4c:	1204f03a 	xor	r2,r2,r8
 1080f50:	1287883a 	add	r3,r2,r10
 1080f54:	1a46703a 	and	r3,r3,r9
 1080f58:	0084303a 	nor	r2,zero,r2
 1080f5c:	10c4703a 	and	r2,r2,r3
 1080f60:	10000b26 	beq	r2,zero,1080f90 <memchr+0xc4>
 1080f64:	20800003 	ldbu	r2,0(r4)
 1080f68:	28800f26 	beq	r5,r2,1080fa8 <memchr+0xdc>
 1080f6c:	20800043 	ldbu	r2,1(r4)
 1080f70:	21c00044 	addi	r7,r4,1
 1080f74:	28800c26 	beq	r5,r2,1080fa8 <memchr+0xdc>
 1080f78:	20800083 	ldbu	r2,2(r4)
 1080f7c:	21c00084 	addi	r7,r4,2
 1080f80:	28800926 	beq	r5,r2,1080fa8 <memchr+0xdc>
 1080f84:	208000c3 	ldbu	r2,3(r4)
 1080f88:	21c000c4 	addi	r7,r4,3
 1080f8c:	28800626 	beq	r5,r2,1080fa8 <memchr+0xdc>
 1080f90:	21000104 	addi	r4,r4,4
 1080f94:	59bfea36 	bltu	r11,r6,1080f40 <memchr+0x74>
 1080f98:	2007883a 	mov	r3,r4
 1080f9c:	003fd106 	br	1080ee4 <memchr+0x18>
 1080fa0:	0005883a 	mov	r2,zero
 1080fa4:	f800283a 	ret
 1080fa8:	3805883a 	mov	r2,r7
 1080fac:	f800283a 	ret

01080fb0 <memcpy>:
 1080fb0:	01c003c4 	movi	r7,15
 1080fb4:	2007883a 	mov	r3,r4
 1080fb8:	3980032e 	bgeu	r7,r6,1080fc8 <memcpy+0x18>
 1080fbc:	2904b03a 	or	r2,r5,r4
 1080fc0:	108000cc 	andi	r2,r2,3
 1080fc4:	10000926 	beq	r2,zero,1080fec <memcpy+0x3c>
 1080fc8:	30000626 	beq	r6,zero,1080fe4 <memcpy+0x34>
 1080fcc:	30cd883a 	add	r6,r6,r3
 1080fd0:	28800003 	ldbu	r2,0(r5)
 1080fd4:	29400044 	addi	r5,r5,1
 1080fd8:	18800005 	stb	r2,0(r3)
 1080fdc:	18c00044 	addi	r3,r3,1
 1080fe0:	30fffb1e 	bne	r6,r3,1080fd0 <memcpy+0x20>
 1080fe4:	2005883a 	mov	r2,r4
 1080fe8:	f800283a 	ret
 1080fec:	3811883a 	mov	r8,r7
 1080ff0:	200f883a 	mov	r7,r4
 1080ff4:	28c00017 	ldw	r3,0(r5)
 1080ff8:	31bffc04 	addi	r6,r6,-16
 1080ffc:	38c00015 	stw	r3,0(r7)
 1081000:	28800117 	ldw	r2,4(r5)
 1081004:	38800115 	stw	r2,4(r7)
 1081008:	28c00217 	ldw	r3,8(r5)
 108100c:	38c00215 	stw	r3,8(r7)
 1081010:	28800317 	ldw	r2,12(r5)
 1081014:	29400404 	addi	r5,r5,16
 1081018:	38800315 	stw	r2,12(r7)
 108101c:	39c00404 	addi	r7,r7,16
 1081020:	41bff436 	bltu	r8,r6,1080ff4 <memcpy+0x44>
 1081024:	008000c4 	movi	r2,3
 1081028:	1180072e 	bgeu	r2,r6,1081048 <memcpy+0x98>
 108102c:	1007883a 	mov	r3,r2
 1081030:	28800017 	ldw	r2,0(r5)
 1081034:	31bfff04 	addi	r6,r6,-4
 1081038:	29400104 	addi	r5,r5,4
 108103c:	38800015 	stw	r2,0(r7)
 1081040:	39c00104 	addi	r7,r7,4
 1081044:	19bffa36 	bltu	r3,r6,1081030 <memcpy+0x80>
 1081048:	3807883a 	mov	r3,r7
 108104c:	003fde06 	br	1080fc8 <memcpy+0x18>

01081050 <memmove>:
 1081050:	2807883a 	mov	r3,r5
 1081054:	2011883a 	mov	r8,r4
 1081058:	29000c2e 	bgeu	r5,r4,108108c <memmove+0x3c>
 108105c:	298f883a 	add	r7,r5,r6
 1081060:	21c00a2e 	bgeu	r4,r7,108108c <memmove+0x3c>
 1081064:	30000726 	beq	r6,zero,1081084 <memmove+0x34>
 1081068:	2187883a 	add	r3,r4,r6
 108106c:	198dc83a 	sub	r6,r3,r6
 1081070:	39ffffc4 	addi	r7,r7,-1
 1081074:	38800003 	ldbu	r2,0(r7)
 1081078:	18ffffc4 	addi	r3,r3,-1
 108107c:	18800005 	stb	r2,0(r3)
 1081080:	19bffb1e 	bne	r3,r6,1081070 <memmove+0x20>
 1081084:	2005883a 	mov	r2,r4
 1081088:	f800283a 	ret
 108108c:	01c003c4 	movi	r7,15
 1081090:	39800a36 	bltu	r7,r6,10810bc <memmove+0x6c>
 1081094:	303ffb26 	beq	r6,zero,1081084 <memmove+0x34>
 1081098:	400f883a 	mov	r7,r8
 108109c:	320d883a 	add	r6,r6,r8
 10810a0:	28800003 	ldbu	r2,0(r5)
 10810a4:	29400044 	addi	r5,r5,1
 10810a8:	38800005 	stb	r2,0(r7)
 10810ac:	39c00044 	addi	r7,r7,1
 10810b0:	39bffb1e 	bne	r7,r6,10810a0 <memmove+0x50>
 10810b4:	2005883a 	mov	r2,r4
 10810b8:	f800283a 	ret
 10810bc:	1904b03a 	or	r2,r3,r4
 10810c0:	108000cc 	andi	r2,r2,3
 10810c4:	103ff31e 	bne	r2,zero,1081094 <memmove+0x44>
 10810c8:	3811883a 	mov	r8,r7
 10810cc:	180b883a 	mov	r5,r3
 10810d0:	200f883a 	mov	r7,r4
 10810d4:	28c00017 	ldw	r3,0(r5)
 10810d8:	31bffc04 	addi	r6,r6,-16
 10810dc:	38c00015 	stw	r3,0(r7)
 10810e0:	28800117 	ldw	r2,4(r5)
 10810e4:	38800115 	stw	r2,4(r7)
 10810e8:	28c00217 	ldw	r3,8(r5)
 10810ec:	38c00215 	stw	r3,8(r7)
 10810f0:	28800317 	ldw	r2,12(r5)
 10810f4:	29400404 	addi	r5,r5,16
 10810f8:	38800315 	stw	r2,12(r7)
 10810fc:	39c00404 	addi	r7,r7,16
 1081100:	41bff436 	bltu	r8,r6,10810d4 <memmove+0x84>
 1081104:	008000c4 	movi	r2,3
 1081108:	1180072e 	bgeu	r2,r6,1081128 <memmove+0xd8>
 108110c:	1007883a 	mov	r3,r2
 1081110:	28800017 	ldw	r2,0(r5)
 1081114:	31bfff04 	addi	r6,r6,-4
 1081118:	29400104 	addi	r5,r5,4
 108111c:	38800015 	stw	r2,0(r7)
 1081120:	39c00104 	addi	r7,r7,4
 1081124:	19bffa36 	bltu	r3,r6,1081110 <memmove+0xc0>
 1081128:	3811883a 	mov	r8,r7
 108112c:	003fd906 	br	1081094 <memmove+0x44>

01081130 <_realloc_r>:
 1081130:	defff404 	addi	sp,sp,-48
 1081134:	dd800815 	stw	r22,32(sp)
 1081138:	dc800415 	stw	r18,16(sp)
 108113c:	dc400315 	stw	r17,12(sp)
 1081140:	dfc00b15 	stw	ra,44(sp)
 1081144:	df000a15 	stw	fp,40(sp)
 1081148:	ddc00915 	stw	r23,36(sp)
 108114c:	dd400715 	stw	r21,28(sp)
 1081150:	dd000615 	stw	r20,24(sp)
 1081154:	dcc00515 	stw	r19,20(sp)
 1081158:	dc000215 	stw	r16,8(sp)
 108115c:	2825883a 	mov	r18,r5
 1081160:	3023883a 	mov	r17,r6
 1081164:	202d883a 	mov	r22,r4
 1081168:	2800c926 	beq	r5,zero,1081490 <_realloc_r+0x360>
 108116c:	1082cb80 	call	1082cb8 <__malloc_lock>
 1081170:	943ffe04 	addi	r16,r18,-8
 1081174:	88c002c4 	addi	r3,r17,11
 1081178:	00800584 	movi	r2,22
 108117c:	82000117 	ldw	r8,4(r16)
 1081180:	10c01b2e 	bgeu	r2,r3,10811f0 <_realloc_r+0xc0>
 1081184:	00bffe04 	movi	r2,-8
 1081188:	188e703a 	and	r7,r3,r2
 108118c:	3839883a 	mov	fp,r7
 1081190:	38001a16 	blt	r7,zero,10811fc <_realloc_r+0xcc>
 1081194:	e4401936 	bltu	fp,r17,10811fc <_realloc_r+0xcc>
 1081198:	013fff04 	movi	r4,-4
 108119c:	4126703a 	and	r19,r8,r4
 10811a0:	99c02616 	blt	r19,r7,108123c <_realloc_r+0x10c>
 10811a4:	802b883a 	mov	r21,r16
 10811a8:	9829883a 	mov	r20,r19
 10811ac:	84000204 	addi	r16,r16,8
 10811b0:	a80f883a 	mov	r7,r21
 10811b4:	a70dc83a 	sub	r6,r20,fp
 10811b8:	008003c4 	movi	r2,15
 10811bc:	1180c136 	bltu	r2,r6,10814c4 <_realloc_r+0x394>
 10811c0:	38800117 	ldw	r2,4(r7)
 10811c4:	a549883a 	add	r4,r20,r21
 10811c8:	1080004c 	andi	r2,r2,1
 10811cc:	a084b03a 	or	r2,r20,r2
 10811d0:	38800115 	stw	r2,4(r7)
 10811d4:	20c00117 	ldw	r3,4(r4)
 10811d8:	18c00054 	ori	r3,r3,1
 10811dc:	20c00115 	stw	r3,4(r4)
 10811e0:	b009883a 	mov	r4,r22
 10811e4:	1082cbc0 	call	1082cbc <__malloc_unlock>
 10811e8:	8023883a 	mov	r17,r16
 10811ec:	00000606 	br	1081208 <_realloc_r+0xd8>
 10811f0:	01c00404 	movi	r7,16
 10811f4:	3839883a 	mov	fp,r7
 10811f8:	e47fe72e 	bgeu	fp,r17,1081198 <_realloc_r+0x68>
 10811fc:	00800304 	movi	r2,12
 1081200:	0023883a 	mov	r17,zero
 1081204:	b0800015 	stw	r2,0(r22)
 1081208:	8805883a 	mov	r2,r17
 108120c:	dfc00b17 	ldw	ra,44(sp)
 1081210:	df000a17 	ldw	fp,40(sp)
 1081214:	ddc00917 	ldw	r23,36(sp)
 1081218:	dd800817 	ldw	r22,32(sp)
 108121c:	dd400717 	ldw	r21,28(sp)
 1081220:	dd000617 	ldw	r20,24(sp)
 1081224:	dcc00517 	ldw	r19,20(sp)
 1081228:	dc800417 	ldw	r18,16(sp)
 108122c:	dc400317 	ldw	r17,12(sp)
 1081230:	dc000217 	ldw	r16,8(sp)
 1081234:	dec00c04 	addi	sp,sp,48
 1081238:	f800283a 	ret
 108123c:	00804234 	movhi	r2,264
 1081240:	108eee04 	addi	r2,r2,15288
 1081244:	12400217 	ldw	r9,8(r2)
 1081248:	84cd883a 	add	r6,r16,r19
 108124c:	802b883a 	mov	r21,r16
 1081250:	3240b926 	beq	r6,r9,1081538 <_realloc_r+0x408>
 1081254:	31400117 	ldw	r5,4(r6)
 1081258:	00bfff84 	movi	r2,-2
 108125c:	2884703a 	and	r2,r5,r2
 1081260:	1185883a 	add	r2,r2,r6
 1081264:	10c00117 	ldw	r3,4(r2)
 1081268:	18c0004c 	andi	r3,r3,1
 108126c:	1807003a 	cmpeq	r3,r3,zero
 1081270:	1800a326 	beq	r3,zero,1081500 <_realloc_r+0x3d0>
 1081274:	2908703a 	and	r4,r5,r4
 1081278:	9929883a 	add	r20,r19,r4
 108127c:	a1c0a30e 	bge	r20,r7,108150c <_realloc_r+0x3dc>
 1081280:	4080004c 	andi	r2,r8,1
 1081284:	1000551e 	bne	r2,zero,10813dc <_realloc_r+0x2ac>
 1081288:	80800017 	ldw	r2,0(r16)
 108128c:	80afc83a 	sub	r23,r16,r2
 1081290:	b8c00117 	ldw	r3,4(r23)
 1081294:	00bfff04 	movi	r2,-4
 1081298:	1884703a 	and	r2,r3,r2
 108129c:	30002e26 	beq	r6,zero,1081358 <_realloc_r+0x228>
 10812a0:	3240b926 	beq	r6,r9,1081588 <_realloc_r+0x458>
 10812a4:	98a9883a 	add	r20,r19,r2
 10812a8:	2509883a 	add	r4,r4,r20
 10812ac:	d9000015 	stw	r4,0(sp)
 10812b0:	21c02a16 	blt	r4,r7,108135c <_realloc_r+0x22c>
 10812b4:	30800317 	ldw	r2,12(r6)
 10812b8:	30c00217 	ldw	r3,8(r6)
 10812bc:	01400904 	movi	r5,36
 10812c0:	99bfff04 	addi	r6,r19,-4
 10812c4:	18800315 	stw	r2,12(r3)
 10812c8:	10c00215 	stw	r3,8(r2)
 10812cc:	b9000317 	ldw	r4,12(r23)
 10812d0:	b8800217 	ldw	r2,8(r23)
 10812d4:	b82b883a 	mov	r21,r23
 10812d8:	bc000204 	addi	r16,r23,8
 10812dc:	20800215 	stw	r2,8(r4)
 10812e0:	11000315 	stw	r4,12(r2)
 10812e4:	2980e436 	bltu	r5,r6,1081678 <_realloc_r+0x548>
 10812e8:	008004c4 	movi	r2,19
 10812ec:	9009883a 	mov	r4,r18
 10812f0:	8011883a 	mov	r8,r16
 10812f4:	11800f2e 	bgeu	r2,r6,1081334 <_realloc_r+0x204>
 10812f8:	90800017 	ldw	r2,0(r18)
 10812fc:	ba000404 	addi	r8,r23,16
 1081300:	91000204 	addi	r4,r18,8
 1081304:	b8800215 	stw	r2,8(r23)
 1081308:	90c00117 	ldw	r3,4(r18)
 108130c:	008006c4 	movi	r2,27
 1081310:	b8c00315 	stw	r3,12(r23)
 1081314:	1180072e 	bgeu	r2,r6,1081334 <_realloc_r+0x204>
 1081318:	90c00217 	ldw	r3,8(r18)
 108131c:	ba000604 	addi	r8,r23,24
 1081320:	91000404 	addi	r4,r18,16
 1081324:	b8c00415 	stw	r3,16(r23)
 1081328:	90800317 	ldw	r2,12(r18)
 108132c:	b8800515 	stw	r2,20(r23)
 1081330:	3140e726 	beq	r6,r5,10816d0 <_realloc_r+0x5a0>
 1081334:	20800017 	ldw	r2,0(r4)
 1081338:	dd000017 	ldw	r20,0(sp)
 108133c:	b80f883a 	mov	r7,r23
 1081340:	40800015 	stw	r2,0(r8)
 1081344:	20c00117 	ldw	r3,4(r4)
 1081348:	40c00115 	stw	r3,4(r8)
 108134c:	20800217 	ldw	r2,8(r4)
 1081350:	40800215 	stw	r2,8(r8)
 1081354:	003f9706 	br	10811b4 <_realloc_r+0x84>
 1081358:	98a9883a 	add	r20,r19,r2
 108135c:	a1c01f16 	blt	r20,r7,10813dc <_realloc_r+0x2ac>
 1081360:	b8c00317 	ldw	r3,12(r23)
 1081364:	b8800217 	ldw	r2,8(r23)
 1081368:	99bfff04 	addi	r6,r19,-4
 108136c:	01400904 	movi	r5,36
 1081370:	b82b883a 	mov	r21,r23
 1081374:	18800215 	stw	r2,8(r3)
 1081378:	10c00315 	stw	r3,12(r2)
 108137c:	bc000204 	addi	r16,r23,8
 1081380:	2980c336 	bltu	r5,r6,1081690 <_realloc_r+0x560>
 1081384:	008004c4 	movi	r2,19
 1081388:	9009883a 	mov	r4,r18
 108138c:	8011883a 	mov	r8,r16
 1081390:	11800f2e 	bgeu	r2,r6,10813d0 <_realloc_r+0x2a0>
 1081394:	90800017 	ldw	r2,0(r18)
 1081398:	ba000404 	addi	r8,r23,16
 108139c:	91000204 	addi	r4,r18,8
 10813a0:	b8800215 	stw	r2,8(r23)
 10813a4:	90c00117 	ldw	r3,4(r18)
 10813a8:	008006c4 	movi	r2,27
 10813ac:	b8c00315 	stw	r3,12(r23)
 10813b0:	1180072e 	bgeu	r2,r6,10813d0 <_realloc_r+0x2a0>
 10813b4:	90c00217 	ldw	r3,8(r18)
 10813b8:	ba000604 	addi	r8,r23,24
 10813bc:	91000404 	addi	r4,r18,16
 10813c0:	b8c00415 	stw	r3,16(r23)
 10813c4:	90800317 	ldw	r2,12(r18)
 10813c8:	b8800515 	stw	r2,20(r23)
 10813cc:	3140c726 	beq	r6,r5,10816ec <_realloc_r+0x5bc>
 10813d0:	20800017 	ldw	r2,0(r4)
 10813d4:	b80f883a 	mov	r7,r23
 10813d8:	003fd906 	br	1081340 <_realloc_r+0x210>
 10813dc:	880b883a 	mov	r5,r17
 10813e0:	b009883a 	mov	r4,r22
 10813e4:	108078c0 	call	108078c <_malloc_r>
 10813e8:	1023883a 	mov	r17,r2
 10813ec:	10002526 	beq	r2,zero,1081484 <_realloc_r+0x354>
 10813f0:	80800117 	ldw	r2,4(r16)
 10813f4:	00ffff84 	movi	r3,-2
 10813f8:	893ffe04 	addi	r4,r17,-8
 10813fc:	10c4703a 	and	r2,r2,r3
 1081400:	8085883a 	add	r2,r16,r2
 1081404:	20809526 	beq	r4,r2,108165c <_realloc_r+0x52c>
 1081408:	99bfff04 	addi	r6,r19,-4
 108140c:	01c00904 	movi	r7,36
 1081410:	39804536 	bltu	r7,r6,1081528 <_realloc_r+0x3f8>
 1081414:	008004c4 	movi	r2,19
 1081418:	9009883a 	mov	r4,r18
 108141c:	880b883a 	mov	r5,r17
 1081420:	11800f2e 	bgeu	r2,r6,1081460 <_realloc_r+0x330>
 1081424:	90800017 	ldw	r2,0(r18)
 1081428:	89400204 	addi	r5,r17,8
 108142c:	91000204 	addi	r4,r18,8
 1081430:	88800015 	stw	r2,0(r17)
 1081434:	90c00117 	ldw	r3,4(r18)
 1081438:	008006c4 	movi	r2,27
 108143c:	88c00115 	stw	r3,4(r17)
 1081440:	1180072e 	bgeu	r2,r6,1081460 <_realloc_r+0x330>
 1081444:	90c00217 	ldw	r3,8(r18)
 1081448:	89400404 	addi	r5,r17,16
 108144c:	91000404 	addi	r4,r18,16
 1081450:	88c00215 	stw	r3,8(r17)
 1081454:	90800317 	ldw	r2,12(r18)
 1081458:	88800315 	stw	r2,12(r17)
 108145c:	31c09126 	beq	r6,r7,10816a4 <_realloc_r+0x574>
 1081460:	20800017 	ldw	r2,0(r4)
 1081464:	28800015 	stw	r2,0(r5)
 1081468:	20c00117 	ldw	r3,4(r4)
 108146c:	28c00115 	stw	r3,4(r5)
 1081470:	20800217 	ldw	r2,8(r4)
 1081474:	28800215 	stw	r2,8(r5)
 1081478:	900b883a 	mov	r5,r18
 108147c:	b009883a 	mov	r4,r22
 1081480:	1081f200 	call	1081f20 <_free_r>
 1081484:	b009883a 	mov	r4,r22
 1081488:	1082cbc0 	call	1082cbc <__malloc_unlock>
 108148c:	003f5e06 	br	1081208 <_realloc_r+0xd8>
 1081490:	300b883a 	mov	r5,r6
 1081494:	dfc00b17 	ldw	ra,44(sp)
 1081498:	df000a17 	ldw	fp,40(sp)
 108149c:	ddc00917 	ldw	r23,36(sp)
 10814a0:	dd800817 	ldw	r22,32(sp)
 10814a4:	dd400717 	ldw	r21,28(sp)
 10814a8:	dd000617 	ldw	r20,24(sp)
 10814ac:	dcc00517 	ldw	r19,20(sp)
 10814b0:	dc800417 	ldw	r18,16(sp)
 10814b4:	dc400317 	ldw	r17,12(sp)
 10814b8:	dc000217 	ldw	r16,8(sp)
 10814bc:	dec00c04 	addi	sp,sp,48
 10814c0:	108078c1 	jmpi	108078c <_malloc_r>
 10814c4:	38800117 	ldw	r2,4(r7)
 10814c8:	e54b883a 	add	r5,fp,r21
 10814cc:	31000054 	ori	r4,r6,1
 10814d0:	1080004c 	andi	r2,r2,1
 10814d4:	1704b03a 	or	r2,r2,fp
 10814d8:	38800115 	stw	r2,4(r7)
 10814dc:	29000115 	stw	r4,4(r5)
 10814e0:	2987883a 	add	r3,r5,r6
 10814e4:	18800117 	ldw	r2,4(r3)
 10814e8:	29400204 	addi	r5,r5,8
 10814ec:	b009883a 	mov	r4,r22
 10814f0:	10800054 	ori	r2,r2,1
 10814f4:	18800115 	stw	r2,4(r3)
 10814f8:	1081f200 	call	1081f20 <_free_r>
 10814fc:	003f3806 	br	10811e0 <_realloc_r+0xb0>
 1081500:	000d883a 	mov	r6,zero
 1081504:	0009883a 	mov	r4,zero
 1081508:	003f5d06 	br	1081280 <_realloc_r+0x150>
 108150c:	30c00217 	ldw	r3,8(r6)
 1081510:	30800317 	ldw	r2,12(r6)
 1081514:	800f883a 	mov	r7,r16
 1081518:	84000204 	addi	r16,r16,8
 108151c:	10c00215 	stw	r3,8(r2)
 1081520:	18800315 	stw	r2,12(r3)
 1081524:	003f2306 	br	10811b4 <_realloc_r+0x84>
 1081528:	8809883a 	mov	r4,r17
 108152c:	900b883a 	mov	r5,r18
 1081530:	10810500 	call	1081050 <memmove>
 1081534:	003fd006 	br	1081478 <_realloc_r+0x348>
 1081538:	30800117 	ldw	r2,4(r6)
 108153c:	e0c00404 	addi	r3,fp,16
 1081540:	1108703a 	and	r4,r2,r4
 1081544:	9905883a 	add	r2,r19,r4
 1081548:	10ff4d16 	blt	r2,r3,1081280 <_realloc_r+0x150>
 108154c:	1705c83a 	sub	r2,r2,fp
 1081550:	870b883a 	add	r5,r16,fp
 1081554:	10800054 	ori	r2,r2,1
 1081558:	28800115 	stw	r2,4(r5)
 108155c:	80c00117 	ldw	r3,4(r16)
 1081560:	00804234 	movhi	r2,264
 1081564:	108eee04 	addi	r2,r2,15288
 1081568:	b009883a 	mov	r4,r22
 108156c:	18c0004c 	andi	r3,r3,1
 1081570:	e0c6b03a 	or	r3,fp,r3
 1081574:	11400215 	stw	r5,8(r2)
 1081578:	80c00115 	stw	r3,4(r16)
 108157c:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1081580:	84400204 	addi	r17,r16,8
 1081584:	003f2006 	br	1081208 <_realloc_r+0xd8>
 1081588:	98a9883a 	add	r20,r19,r2
 108158c:	2509883a 	add	r4,r4,r20
 1081590:	e0800404 	addi	r2,fp,16
 1081594:	d9000115 	stw	r4,4(sp)
 1081598:	20bf7016 	blt	r4,r2,108135c <_realloc_r+0x22c>
 108159c:	b8c00317 	ldw	r3,12(r23)
 10815a0:	b8800217 	ldw	r2,8(r23)
 10815a4:	99bfff04 	addi	r6,r19,-4
 10815a8:	01400904 	movi	r5,36
 10815ac:	18800215 	stw	r2,8(r3)
 10815b0:	10c00315 	stw	r3,12(r2)
 10815b4:	bc400204 	addi	r17,r23,8
 10815b8:	29804136 	bltu	r5,r6,10816c0 <_realloc_r+0x590>
 10815bc:	008004c4 	movi	r2,19
 10815c0:	9009883a 	mov	r4,r18
 10815c4:	880f883a 	mov	r7,r17
 10815c8:	11800f2e 	bgeu	r2,r6,1081608 <_realloc_r+0x4d8>
 10815cc:	90800017 	ldw	r2,0(r18)
 10815d0:	b9c00404 	addi	r7,r23,16
 10815d4:	91000204 	addi	r4,r18,8
 10815d8:	b8800215 	stw	r2,8(r23)
 10815dc:	90c00117 	ldw	r3,4(r18)
 10815e0:	008006c4 	movi	r2,27
 10815e4:	b8c00315 	stw	r3,12(r23)
 10815e8:	1180072e 	bgeu	r2,r6,1081608 <_realloc_r+0x4d8>
 10815ec:	90c00217 	ldw	r3,8(r18)
 10815f0:	b9c00604 	addi	r7,r23,24
 10815f4:	91000404 	addi	r4,r18,16
 10815f8:	b8c00415 	stw	r3,16(r23)
 10815fc:	90800317 	ldw	r2,12(r18)
 1081600:	b8800515 	stw	r2,20(r23)
 1081604:	31404026 	beq	r6,r5,1081708 <_realloc_r+0x5d8>
 1081608:	20800017 	ldw	r2,0(r4)
 108160c:	38800015 	stw	r2,0(r7)
 1081610:	20c00117 	ldw	r3,4(r4)
 1081614:	38c00115 	stw	r3,4(r7)
 1081618:	20800217 	ldw	r2,8(r4)
 108161c:	38800215 	stw	r2,8(r7)
 1081620:	d8c00117 	ldw	r3,4(sp)
 1081624:	bf0b883a 	add	r5,r23,fp
 1081628:	b009883a 	mov	r4,r22
 108162c:	1f05c83a 	sub	r2,r3,fp
 1081630:	10800054 	ori	r2,r2,1
 1081634:	28800115 	stw	r2,4(r5)
 1081638:	b8c00117 	ldw	r3,4(r23)
 108163c:	00804234 	movhi	r2,264
 1081640:	108eee04 	addi	r2,r2,15288
 1081644:	11400215 	stw	r5,8(r2)
 1081648:	18c0004c 	andi	r3,r3,1
 108164c:	e0c6b03a 	or	r3,fp,r3
 1081650:	b8c00115 	stw	r3,4(r23)
 1081654:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1081658:	003eeb06 	br	1081208 <_realloc_r+0xd8>
 108165c:	20800117 	ldw	r2,4(r4)
 1081660:	00ffff04 	movi	r3,-4
 1081664:	800f883a 	mov	r7,r16
 1081668:	10c4703a 	and	r2,r2,r3
 108166c:	98a9883a 	add	r20,r19,r2
 1081670:	84000204 	addi	r16,r16,8
 1081674:	003ecf06 	br	10811b4 <_realloc_r+0x84>
 1081678:	900b883a 	mov	r5,r18
 108167c:	8009883a 	mov	r4,r16
 1081680:	10810500 	call	1081050 <memmove>
 1081684:	dd000017 	ldw	r20,0(sp)
 1081688:	b80f883a 	mov	r7,r23
 108168c:	003ec906 	br	10811b4 <_realloc_r+0x84>
 1081690:	900b883a 	mov	r5,r18
 1081694:	8009883a 	mov	r4,r16
 1081698:	10810500 	call	1081050 <memmove>
 108169c:	b80f883a 	mov	r7,r23
 10816a0:	003ec406 	br	10811b4 <_realloc_r+0x84>
 10816a4:	90c00417 	ldw	r3,16(r18)
 10816a8:	89400604 	addi	r5,r17,24
 10816ac:	91000604 	addi	r4,r18,24
 10816b0:	88c00415 	stw	r3,16(r17)
 10816b4:	90800517 	ldw	r2,20(r18)
 10816b8:	88800515 	stw	r2,20(r17)
 10816bc:	003f6806 	br	1081460 <_realloc_r+0x330>
 10816c0:	900b883a 	mov	r5,r18
 10816c4:	8809883a 	mov	r4,r17
 10816c8:	10810500 	call	1081050 <memmove>
 10816cc:	003fd406 	br	1081620 <_realloc_r+0x4f0>
 10816d0:	90c00417 	ldw	r3,16(r18)
 10816d4:	91000604 	addi	r4,r18,24
 10816d8:	ba000804 	addi	r8,r23,32
 10816dc:	b8c00615 	stw	r3,24(r23)
 10816e0:	90800517 	ldw	r2,20(r18)
 10816e4:	b8800715 	stw	r2,28(r23)
 10816e8:	003f1206 	br	1081334 <_realloc_r+0x204>
 10816ec:	90c00417 	ldw	r3,16(r18)
 10816f0:	91000604 	addi	r4,r18,24
 10816f4:	ba000804 	addi	r8,r23,32
 10816f8:	b8c00615 	stw	r3,24(r23)
 10816fc:	90800517 	ldw	r2,20(r18)
 1081700:	b8800715 	stw	r2,28(r23)
 1081704:	003f3206 	br	10813d0 <_realloc_r+0x2a0>
 1081708:	90c00417 	ldw	r3,16(r18)
 108170c:	91000604 	addi	r4,r18,24
 1081710:	b9c00804 	addi	r7,r23,32
 1081714:	b8c00615 	stw	r3,24(r23)
 1081718:	90800517 	ldw	r2,20(r18)
 108171c:	b8800715 	stw	r2,28(r23)
 1081720:	003fb906 	br	1081608 <_realloc_r+0x4d8>

01081724 <_sbrk_r>:
 1081724:	defffd04 	addi	sp,sp,-12
 1081728:	dc000015 	stw	r16,0(sp)
 108172c:	04004234 	movhi	r16,264
 1081730:	841a2304 	addi	r16,r16,26764
 1081734:	dc400115 	stw	r17,4(sp)
 1081738:	80000015 	stw	zero,0(r16)
 108173c:	2023883a 	mov	r17,r4
 1081740:	2809883a 	mov	r4,r5
 1081744:	dfc00215 	stw	ra,8(sp)
 1081748:	1082d540 	call	1082d54 <sbrk>
 108174c:	1007883a 	mov	r3,r2
 1081750:	00bfffc4 	movi	r2,-1
 1081754:	18800626 	beq	r3,r2,1081770 <_sbrk_r+0x4c>
 1081758:	1805883a 	mov	r2,r3
 108175c:	dfc00217 	ldw	ra,8(sp)
 1081760:	dc400117 	ldw	r17,4(sp)
 1081764:	dc000017 	ldw	r16,0(sp)
 1081768:	dec00304 	addi	sp,sp,12
 108176c:	f800283a 	ret
 1081770:	80800017 	ldw	r2,0(r16)
 1081774:	103ff826 	beq	r2,zero,1081758 <_sbrk_r+0x34>
 1081778:	88800015 	stw	r2,0(r17)
 108177c:	1805883a 	mov	r2,r3
 1081780:	dfc00217 	ldw	ra,8(sp)
 1081784:	dc400117 	ldw	r17,4(sp)
 1081788:	dc000017 	ldw	r16,0(sp)
 108178c:	dec00304 	addi	sp,sp,12
 1081790:	f800283a 	ret

01081794 <__swsetup_r>:
 1081794:	00804234 	movhi	r2,264
 1081798:	1093fe04 	addi	r2,r2,20472
 108179c:	10c00017 	ldw	r3,0(r2)
 10817a0:	defffd04 	addi	sp,sp,-12
 10817a4:	dc400115 	stw	r17,4(sp)
 10817a8:	dc000015 	stw	r16,0(sp)
 10817ac:	dfc00215 	stw	ra,8(sp)
 10817b0:	2023883a 	mov	r17,r4
 10817b4:	2821883a 	mov	r16,r5
 10817b8:	18000226 	beq	r3,zero,10817c4 <__swsetup_r+0x30>
 10817bc:	18800e17 	ldw	r2,56(r3)
 10817c0:	10001f26 	beq	r2,zero,1081840 <__swsetup_r+0xac>
 10817c4:	8100030b 	ldhu	r4,12(r16)
 10817c8:	2080020c 	andi	r2,r4,8
 10817cc:	10002826 	beq	r2,zero,1081870 <__swsetup_r+0xdc>
 10817d0:	81400417 	ldw	r5,16(r16)
 10817d4:	28001d26 	beq	r5,zero,108184c <__swsetup_r+0xb8>
 10817d8:	2080004c 	andi	r2,r4,1
 10817dc:	1005003a 	cmpeq	r2,r2,zero
 10817e0:	10000b26 	beq	r2,zero,1081810 <__swsetup_r+0x7c>
 10817e4:	2080008c 	andi	r2,r4,2
 10817e8:	10001226 	beq	r2,zero,1081834 <__swsetup_r+0xa0>
 10817ec:	0005883a 	mov	r2,zero
 10817f0:	80800215 	stw	r2,8(r16)
 10817f4:	28000b26 	beq	r5,zero,1081824 <__swsetup_r+0x90>
 10817f8:	0005883a 	mov	r2,zero
 10817fc:	dfc00217 	ldw	ra,8(sp)
 1081800:	dc400117 	ldw	r17,4(sp)
 1081804:	dc000017 	ldw	r16,0(sp)
 1081808:	dec00304 	addi	sp,sp,12
 108180c:	f800283a 	ret
 1081810:	80800517 	ldw	r2,20(r16)
 1081814:	80000215 	stw	zero,8(r16)
 1081818:	0085c83a 	sub	r2,zero,r2
 108181c:	80800615 	stw	r2,24(r16)
 1081820:	283ff51e 	bne	r5,zero,10817f8 <__swsetup_r+0x64>
 1081824:	2080200c 	andi	r2,r4,128
 1081828:	103ff326 	beq	r2,zero,10817f8 <__swsetup_r+0x64>
 108182c:	00bfffc4 	movi	r2,-1
 1081830:	003ff206 	br	10817fc <__swsetup_r+0x68>
 1081834:	80800517 	ldw	r2,20(r16)
 1081838:	80800215 	stw	r2,8(r16)
 108183c:	003fed06 	br	10817f4 <__swsetup_r+0x60>
 1081840:	1809883a 	mov	r4,r3
 1081844:	1081b680 	call	1081b68 <__sinit>
 1081848:	003fde06 	br	10817c4 <__swsetup_r+0x30>
 108184c:	20c0a00c 	andi	r3,r4,640
 1081850:	00808004 	movi	r2,512
 1081854:	18bfe026 	beq	r3,r2,10817d8 <__swsetup_r+0x44>
 1081858:	8809883a 	mov	r4,r17
 108185c:	800b883a 	mov	r5,r16
 1081860:	10823b40 	call	10823b4 <__smakebuf_r>
 1081864:	8100030b 	ldhu	r4,12(r16)
 1081868:	81400417 	ldw	r5,16(r16)
 108186c:	003fda06 	br	10817d8 <__swsetup_r+0x44>
 1081870:	2080040c 	andi	r2,r4,16
 1081874:	103fed26 	beq	r2,zero,108182c <__swsetup_r+0x98>
 1081878:	2080010c 	andi	r2,r4,4
 108187c:	10001226 	beq	r2,zero,10818c8 <__swsetup_r+0x134>
 1081880:	81400c17 	ldw	r5,48(r16)
 1081884:	28000526 	beq	r5,zero,108189c <__swsetup_r+0x108>
 1081888:	80801004 	addi	r2,r16,64
 108188c:	28800226 	beq	r5,r2,1081898 <__swsetup_r+0x104>
 1081890:	8809883a 	mov	r4,r17
 1081894:	1081f200 	call	1081f20 <_free_r>
 1081898:	80000c15 	stw	zero,48(r16)
 108189c:	8080030b 	ldhu	r2,12(r16)
 10818a0:	81400417 	ldw	r5,16(r16)
 10818a4:	80000115 	stw	zero,4(r16)
 10818a8:	10bff6cc 	andi	r2,r2,65499
 10818ac:	8080030d 	sth	r2,12(r16)
 10818b0:	81400015 	stw	r5,0(r16)
 10818b4:	8080030b 	ldhu	r2,12(r16)
 10818b8:	10800214 	ori	r2,r2,8
 10818bc:	113fffcc 	andi	r4,r2,65535
 10818c0:	8080030d 	sth	r2,12(r16)
 10818c4:	003fc306 	br	10817d4 <__swsetup_r+0x40>
 10818c8:	81400417 	ldw	r5,16(r16)
 10818cc:	003ff906 	br	10818b4 <__swsetup_r+0x120>

010818d0 <_fflush_r>:
 10818d0:	defffb04 	addi	sp,sp,-20
 10818d4:	dcc00315 	stw	r19,12(sp)
 10818d8:	dc800215 	stw	r18,8(sp)
 10818dc:	dfc00415 	stw	ra,16(sp)
 10818e0:	dc400115 	stw	r17,4(sp)
 10818e4:	dc000015 	stw	r16,0(sp)
 10818e8:	2027883a 	mov	r19,r4
 10818ec:	2825883a 	mov	r18,r5
 10818f0:	20000226 	beq	r4,zero,10818fc <_fflush_r+0x2c>
 10818f4:	20800e17 	ldw	r2,56(r4)
 10818f8:	10005626 	beq	r2,zero,1081a54 <_fflush_r+0x184>
 10818fc:	9100030b 	ldhu	r4,12(r18)
 1081900:	20ffffcc 	andi	r3,r4,65535
 1081904:	18e0001c 	xori	r3,r3,32768
 1081908:	18e00004 	addi	r3,r3,-32768
 108190c:	1880020c 	andi	r2,r3,8
 1081910:	1000261e 	bne	r2,zero,10819ac <_fflush_r+0xdc>
 1081914:	90c00117 	ldw	r3,4(r18)
 1081918:	20820014 	ori	r2,r4,2048
 108191c:	9080030d 	sth	r2,12(r18)
 1081920:	1009883a 	mov	r4,r2
 1081924:	00c0400e 	bge	zero,r3,1081a28 <_fflush_r+0x158>
 1081928:	92000a17 	ldw	r8,40(r18)
 108192c:	40004026 	beq	r8,zero,1081a30 <_fflush_r+0x160>
 1081930:	2084000c 	andi	r2,r4,4096
 1081934:	10005326 	beq	r2,zero,1081a84 <_fflush_r+0x1b4>
 1081938:	94001417 	ldw	r16,80(r18)
 108193c:	9080030b 	ldhu	r2,12(r18)
 1081940:	1080010c 	andi	r2,r2,4
 1081944:	1000481e 	bne	r2,zero,1081a68 <_fflush_r+0x198>
 1081948:	91400717 	ldw	r5,28(r18)
 108194c:	9809883a 	mov	r4,r19
 1081950:	800d883a 	mov	r6,r16
 1081954:	000f883a 	mov	r7,zero
 1081958:	403ee83a 	callr	r8
 108195c:	8080261e 	bne	r16,r2,10819f8 <_fflush_r+0x128>
 1081960:	9080030b 	ldhu	r2,12(r18)
 1081964:	91000417 	ldw	r4,16(r18)
 1081968:	90000115 	stw	zero,4(r18)
 108196c:	10bdffcc 	andi	r2,r2,63487
 1081970:	10ffffcc 	andi	r3,r2,65535
 1081974:	18c4000c 	andi	r3,r3,4096
 1081978:	9080030d 	sth	r2,12(r18)
 108197c:	91000015 	stw	r4,0(r18)
 1081980:	18002b26 	beq	r3,zero,1081a30 <_fflush_r+0x160>
 1081984:	0007883a 	mov	r3,zero
 1081988:	1805883a 	mov	r2,r3
 108198c:	94001415 	stw	r16,80(r18)
 1081990:	dfc00417 	ldw	ra,16(sp)
 1081994:	dcc00317 	ldw	r19,12(sp)
 1081998:	dc800217 	ldw	r18,8(sp)
 108199c:	dc400117 	ldw	r17,4(sp)
 10819a0:	dc000017 	ldw	r16,0(sp)
 10819a4:	dec00504 	addi	sp,sp,20
 10819a8:	f800283a 	ret
 10819ac:	94400417 	ldw	r17,16(r18)
 10819b0:	88001f26 	beq	r17,zero,1081a30 <_fflush_r+0x160>
 10819b4:	90800017 	ldw	r2,0(r18)
 10819b8:	18c000cc 	andi	r3,r3,3
 10819bc:	94400015 	stw	r17,0(r18)
 10819c0:	1461c83a 	sub	r16,r2,r17
 10819c4:	18002526 	beq	r3,zero,1081a5c <_fflush_r+0x18c>
 10819c8:	0005883a 	mov	r2,zero
 10819cc:	90800215 	stw	r2,8(r18)
 10819d0:	0400170e 	bge	zero,r16,1081a30 <_fflush_r+0x160>
 10819d4:	90c00917 	ldw	r3,36(r18)
 10819d8:	91400717 	ldw	r5,28(r18)
 10819dc:	880d883a 	mov	r6,r17
 10819e0:	800f883a 	mov	r7,r16
 10819e4:	9809883a 	mov	r4,r19
 10819e8:	183ee83a 	callr	r3
 10819ec:	88a3883a 	add	r17,r17,r2
 10819f0:	80a1c83a 	sub	r16,r16,r2
 10819f4:	00bff616 	blt	zero,r2,10819d0 <_fflush_r+0x100>
 10819f8:	9080030b 	ldhu	r2,12(r18)
 10819fc:	00ffffc4 	movi	r3,-1
 1081a00:	10801014 	ori	r2,r2,64
 1081a04:	9080030d 	sth	r2,12(r18)
 1081a08:	1805883a 	mov	r2,r3
 1081a0c:	dfc00417 	ldw	ra,16(sp)
 1081a10:	dcc00317 	ldw	r19,12(sp)
 1081a14:	dc800217 	ldw	r18,8(sp)
 1081a18:	dc400117 	ldw	r17,4(sp)
 1081a1c:	dc000017 	ldw	r16,0(sp)
 1081a20:	dec00504 	addi	sp,sp,20
 1081a24:	f800283a 	ret
 1081a28:	90800f17 	ldw	r2,60(r18)
 1081a2c:	00bfbe16 	blt	zero,r2,1081928 <_fflush_r+0x58>
 1081a30:	0007883a 	mov	r3,zero
 1081a34:	1805883a 	mov	r2,r3
 1081a38:	dfc00417 	ldw	ra,16(sp)
 1081a3c:	dcc00317 	ldw	r19,12(sp)
 1081a40:	dc800217 	ldw	r18,8(sp)
 1081a44:	dc400117 	ldw	r17,4(sp)
 1081a48:	dc000017 	ldw	r16,0(sp)
 1081a4c:	dec00504 	addi	sp,sp,20
 1081a50:	f800283a 	ret
 1081a54:	1081b680 	call	1081b68 <__sinit>
 1081a58:	003fa806 	br	10818fc <_fflush_r+0x2c>
 1081a5c:	90800517 	ldw	r2,20(r18)
 1081a60:	90800215 	stw	r2,8(r18)
 1081a64:	003fda06 	br	10819d0 <_fflush_r+0x100>
 1081a68:	90800117 	ldw	r2,4(r18)
 1081a6c:	90c00c17 	ldw	r3,48(r18)
 1081a70:	80a1c83a 	sub	r16,r16,r2
 1081a74:	183fb426 	beq	r3,zero,1081948 <_fflush_r+0x78>
 1081a78:	90800f17 	ldw	r2,60(r18)
 1081a7c:	80a1c83a 	sub	r16,r16,r2
 1081a80:	003fb106 	br	1081948 <_fflush_r+0x78>
 1081a84:	91400717 	ldw	r5,28(r18)
 1081a88:	9809883a 	mov	r4,r19
 1081a8c:	000d883a 	mov	r6,zero
 1081a90:	01c00044 	movi	r7,1
 1081a94:	403ee83a 	callr	r8
 1081a98:	1021883a 	mov	r16,r2
 1081a9c:	00bfffc4 	movi	r2,-1
 1081aa0:	80800226 	beq	r16,r2,1081aac <_fflush_r+0x1dc>
 1081aa4:	92000a17 	ldw	r8,40(r18)
 1081aa8:	003fa406 	br	108193c <_fflush_r+0x6c>
 1081aac:	98c00017 	ldw	r3,0(r19)
 1081ab0:	00800744 	movi	r2,29
 1081ab4:	18bfde26 	beq	r3,r2,1081a30 <_fflush_r+0x160>
 1081ab8:	9080030b 	ldhu	r2,12(r18)
 1081abc:	8007883a 	mov	r3,r16
 1081ac0:	10801014 	ori	r2,r2,64
 1081ac4:	9080030d 	sth	r2,12(r18)
 1081ac8:	003fcf06 	br	1081a08 <_fflush_r+0x138>

01081acc <fflush>:
 1081acc:	01404234 	movhi	r5,264
 1081ad0:	29463404 	addi	r5,r5,6352
 1081ad4:	2007883a 	mov	r3,r4
 1081ad8:	20000526 	beq	r4,zero,1081af0 <fflush+0x24>
 1081adc:	00804234 	movhi	r2,264
 1081ae0:	1093fe04 	addi	r2,r2,20472
 1081ae4:	11000017 	ldw	r4,0(r2)
 1081ae8:	180b883a 	mov	r5,r3
 1081aec:	10818d01 	jmpi	10818d0 <_fflush_r>
 1081af0:	00804234 	movhi	r2,264
 1081af4:	1093ff04 	addi	r2,r2,20476
 1081af8:	11000017 	ldw	r4,0(r2)
 1081afc:	10822341 	jmpi	1082234 <_fwalk_reent>

01081b00 <std>:
 1081b00:	00804234 	movhi	r2,264
 1081b04:	10897804 	addi	r2,r2,9696
 1081b08:	20800b15 	stw	r2,44(r4)
 1081b0c:	00804234 	movhi	r2,264
 1081b10:	1089b304 	addi	r2,r2,9932
 1081b14:	20800815 	stw	r2,32(r4)
 1081b18:	00c04234 	movhi	r3,264
 1081b1c:	18c99404 	addi	r3,r3,9808
 1081b20:	00804234 	movhi	r2,264
 1081b24:	10897a04 	addi	r2,r2,9704
 1081b28:	2140030d 	sth	r5,12(r4)
 1081b2c:	2180038d 	sth	r6,14(r4)
 1081b30:	20c00915 	stw	r3,36(r4)
 1081b34:	20800a15 	stw	r2,40(r4)
 1081b38:	20000015 	stw	zero,0(r4)
 1081b3c:	20000115 	stw	zero,4(r4)
 1081b40:	20000215 	stw	zero,8(r4)
 1081b44:	20000415 	stw	zero,16(r4)
 1081b48:	20000515 	stw	zero,20(r4)
 1081b4c:	20000615 	stw	zero,24(r4)
 1081b50:	21000715 	stw	r4,28(r4)
 1081b54:	f800283a 	ret

01081b58 <__sfp_lock_acquire>:
 1081b58:	f800283a 	ret

01081b5c <__sfp_lock_release>:
 1081b5c:	f800283a 	ret

01081b60 <__sinit_lock_acquire>:
 1081b60:	f800283a 	ret

01081b64 <__sinit_lock_release>:
 1081b64:	f800283a 	ret

01081b68 <__sinit>:
 1081b68:	20800e17 	ldw	r2,56(r4)
 1081b6c:	defffd04 	addi	sp,sp,-12
 1081b70:	dc400115 	stw	r17,4(sp)
 1081b74:	dc000015 	stw	r16,0(sp)
 1081b78:	dfc00215 	stw	ra,8(sp)
 1081b7c:	04400044 	movi	r17,1
 1081b80:	01400104 	movi	r5,4
 1081b84:	000d883a 	mov	r6,zero
 1081b88:	2021883a 	mov	r16,r4
 1081b8c:	2200bb04 	addi	r8,r4,748
 1081b90:	200f883a 	mov	r7,r4
 1081b94:	10000526 	beq	r2,zero,1081bac <__sinit+0x44>
 1081b98:	dfc00217 	ldw	ra,8(sp)
 1081b9c:	dc400117 	ldw	r17,4(sp)
 1081ba0:	dc000017 	ldw	r16,0(sp)
 1081ba4:	dec00304 	addi	sp,sp,12
 1081ba8:	f800283a 	ret
 1081bac:	21000117 	ldw	r4,4(r4)
 1081bb0:	00804234 	movhi	r2,264
 1081bb4:	10871304 	addi	r2,r2,7244
 1081bb8:	00c000c4 	movi	r3,3
 1081bbc:	80800f15 	stw	r2,60(r16)
 1081bc0:	80c0b915 	stw	r3,740(r16)
 1081bc4:	8200ba15 	stw	r8,744(r16)
 1081bc8:	84400e15 	stw	r17,56(r16)
 1081bcc:	8000b815 	stw	zero,736(r16)
 1081bd0:	1081b000 	call	1081b00 <std>
 1081bd4:	81000217 	ldw	r4,8(r16)
 1081bd8:	880d883a 	mov	r6,r17
 1081bdc:	800f883a 	mov	r7,r16
 1081be0:	01400284 	movi	r5,10
 1081be4:	1081b000 	call	1081b00 <std>
 1081be8:	81000317 	ldw	r4,12(r16)
 1081bec:	800f883a 	mov	r7,r16
 1081bf0:	01400484 	movi	r5,18
 1081bf4:	01800084 	movi	r6,2
 1081bf8:	dfc00217 	ldw	ra,8(sp)
 1081bfc:	dc400117 	ldw	r17,4(sp)
 1081c00:	dc000017 	ldw	r16,0(sp)
 1081c04:	dec00304 	addi	sp,sp,12
 1081c08:	1081b001 	jmpi	1081b00 <std>

01081c0c <__fp_lock>:
 1081c0c:	0005883a 	mov	r2,zero
 1081c10:	f800283a 	ret

01081c14 <__fp_unlock>:
 1081c14:	0005883a 	mov	r2,zero
 1081c18:	f800283a 	ret

01081c1c <__fp_unlock_all>:
 1081c1c:	00804234 	movhi	r2,264
 1081c20:	1093fe04 	addi	r2,r2,20472
 1081c24:	11000017 	ldw	r4,0(r2)
 1081c28:	01404234 	movhi	r5,264
 1081c2c:	29470504 	addi	r5,r5,7188
 1081c30:	10822fc1 	jmpi	10822fc <_fwalk>

01081c34 <__fp_lock_all>:
 1081c34:	00804234 	movhi	r2,264
 1081c38:	1093fe04 	addi	r2,r2,20472
 1081c3c:	11000017 	ldw	r4,0(r2)
 1081c40:	01404234 	movhi	r5,264
 1081c44:	29470304 	addi	r5,r5,7180
 1081c48:	10822fc1 	jmpi	10822fc <_fwalk>

01081c4c <_cleanup_r>:
 1081c4c:	01404234 	movhi	r5,264
 1081c50:	294a4904 	addi	r5,r5,10532
 1081c54:	10822fc1 	jmpi	10822fc <_fwalk>

01081c58 <_cleanup>:
 1081c58:	00804234 	movhi	r2,264
 1081c5c:	1093ff04 	addi	r2,r2,20476
 1081c60:	11000017 	ldw	r4,0(r2)
 1081c64:	1081c4c1 	jmpi	1081c4c <_cleanup_r>

01081c68 <__sfmoreglue>:
 1081c68:	defffc04 	addi	sp,sp,-16
 1081c6c:	dc000015 	stw	r16,0(sp)
 1081c70:	2821883a 	mov	r16,r5
 1081c74:	dc400115 	stw	r17,4(sp)
 1081c78:	01401704 	movi	r5,92
 1081c7c:	2023883a 	mov	r17,r4
 1081c80:	8009883a 	mov	r4,r16
 1081c84:	dfc00315 	stw	ra,12(sp)
 1081c88:	dcc00215 	stw	r19,8(sp)
 1081c8c:	1082b0c0 	call	1082b0c <__mulsi3>
 1081c90:	11400304 	addi	r5,r2,12
 1081c94:	8809883a 	mov	r4,r17
 1081c98:	1027883a 	mov	r19,r2
 1081c9c:	108078c0 	call	108078c <_malloc_r>
 1081ca0:	10c00304 	addi	r3,r2,12
 1081ca4:	1023883a 	mov	r17,r2
 1081ca8:	1809883a 	mov	r4,r3
 1081cac:	980d883a 	mov	r6,r19
 1081cb0:	000b883a 	mov	r5,zero
 1081cb4:	10000b26 	beq	r2,zero,1081ce4 <__sfmoreglue+0x7c>
 1081cb8:	14000115 	stw	r16,4(r2)
 1081cbc:	10c00215 	stw	r3,8(r2)
 1081cc0:	10000015 	stw	zero,0(r2)
 1081cc4:	10825480 	call	1082548 <memset>
 1081cc8:	8805883a 	mov	r2,r17
 1081ccc:	dfc00317 	ldw	ra,12(sp)
 1081cd0:	dcc00217 	ldw	r19,8(sp)
 1081cd4:	dc400117 	ldw	r17,4(sp)
 1081cd8:	dc000017 	ldw	r16,0(sp)
 1081cdc:	dec00404 	addi	sp,sp,16
 1081ce0:	f800283a 	ret
 1081ce4:	0023883a 	mov	r17,zero
 1081ce8:	8805883a 	mov	r2,r17
 1081cec:	dfc00317 	ldw	ra,12(sp)
 1081cf0:	dcc00217 	ldw	r19,8(sp)
 1081cf4:	dc400117 	ldw	r17,4(sp)
 1081cf8:	dc000017 	ldw	r16,0(sp)
 1081cfc:	dec00404 	addi	sp,sp,16
 1081d00:	f800283a 	ret

01081d04 <__sfp>:
 1081d04:	defffd04 	addi	sp,sp,-12
 1081d08:	00804234 	movhi	r2,264
 1081d0c:	1093ff04 	addi	r2,r2,20476
 1081d10:	dc000015 	stw	r16,0(sp)
 1081d14:	14000017 	ldw	r16,0(r2)
 1081d18:	dc400115 	stw	r17,4(sp)
 1081d1c:	dfc00215 	stw	ra,8(sp)
 1081d20:	80800e17 	ldw	r2,56(r16)
 1081d24:	2023883a 	mov	r17,r4
 1081d28:	10002626 	beq	r2,zero,1081dc4 <__sfp+0xc0>
 1081d2c:	8400b804 	addi	r16,r16,736
 1081d30:	80800117 	ldw	r2,4(r16)
 1081d34:	81000217 	ldw	r4,8(r16)
 1081d38:	10ffffc4 	addi	r3,r2,-1
 1081d3c:	18000916 	blt	r3,zero,1081d64 <__sfp+0x60>
 1081d40:	2080030f 	ldh	r2,12(r4)
 1081d44:	10000b26 	beq	r2,zero,1081d74 <__sfp+0x70>
 1081d48:	017fffc4 	movi	r5,-1
 1081d4c:	00000206 	br	1081d58 <__sfp+0x54>
 1081d50:	2080030f 	ldh	r2,12(r4)
 1081d54:	10000726 	beq	r2,zero,1081d74 <__sfp+0x70>
 1081d58:	18ffffc4 	addi	r3,r3,-1
 1081d5c:	21001704 	addi	r4,r4,92
 1081d60:	197ffb1e 	bne	r3,r5,1081d50 <__sfp+0x4c>
 1081d64:	80800017 	ldw	r2,0(r16)
 1081d68:	10001926 	beq	r2,zero,1081dd0 <__sfp+0xcc>
 1081d6c:	1021883a 	mov	r16,r2
 1081d70:	003fef06 	br	1081d30 <__sfp+0x2c>
 1081d74:	00bfffc4 	movi	r2,-1
 1081d78:	00c00044 	movi	r3,1
 1081d7c:	2080038d 	sth	r2,14(r4)
 1081d80:	20c0030d 	sth	r3,12(r4)
 1081d84:	20000015 	stw	zero,0(r4)
 1081d88:	20000215 	stw	zero,8(r4)
 1081d8c:	20000115 	stw	zero,4(r4)
 1081d90:	20000415 	stw	zero,16(r4)
 1081d94:	20000515 	stw	zero,20(r4)
 1081d98:	20000615 	stw	zero,24(r4)
 1081d9c:	20000c15 	stw	zero,48(r4)
 1081da0:	20000d15 	stw	zero,52(r4)
 1081da4:	20001115 	stw	zero,68(r4)
 1081da8:	20001215 	stw	zero,72(r4)
 1081dac:	2005883a 	mov	r2,r4
 1081db0:	dfc00217 	ldw	ra,8(sp)
 1081db4:	dc400117 	ldw	r17,4(sp)
 1081db8:	dc000017 	ldw	r16,0(sp)
 1081dbc:	dec00304 	addi	sp,sp,12
 1081dc0:	f800283a 	ret
 1081dc4:	8009883a 	mov	r4,r16
 1081dc8:	1081b680 	call	1081b68 <__sinit>
 1081dcc:	003fd706 	br	1081d2c <__sfp+0x28>
 1081dd0:	8809883a 	mov	r4,r17
 1081dd4:	01400104 	movi	r5,4
 1081dd8:	1081c680 	call	1081c68 <__sfmoreglue>
 1081ddc:	80800015 	stw	r2,0(r16)
 1081de0:	103fe21e 	bne	r2,zero,1081d6c <__sfp+0x68>
 1081de4:	00800304 	movi	r2,12
 1081de8:	0009883a 	mov	r4,zero
 1081dec:	88800015 	stw	r2,0(r17)
 1081df0:	003fee06 	br	1081dac <__sfp+0xa8>

01081df4 <_malloc_trim_r>:
 1081df4:	defffb04 	addi	sp,sp,-20
 1081df8:	dcc00315 	stw	r19,12(sp)
 1081dfc:	04c04234 	movhi	r19,264
 1081e00:	9cceee04 	addi	r19,r19,15288
 1081e04:	dc800215 	stw	r18,8(sp)
 1081e08:	dc400115 	stw	r17,4(sp)
 1081e0c:	dc000015 	stw	r16,0(sp)
 1081e10:	2823883a 	mov	r17,r5
 1081e14:	2025883a 	mov	r18,r4
 1081e18:	dfc00415 	stw	ra,16(sp)
 1081e1c:	1082cb80 	call	1082cb8 <__malloc_lock>
 1081e20:	98800217 	ldw	r2,8(r19)
 1081e24:	9009883a 	mov	r4,r18
 1081e28:	000b883a 	mov	r5,zero
 1081e2c:	10c00117 	ldw	r3,4(r2)
 1081e30:	00bfff04 	movi	r2,-4
 1081e34:	18a0703a 	and	r16,r3,r2
 1081e38:	8463c83a 	sub	r17,r16,r17
 1081e3c:	8c43fbc4 	addi	r17,r17,4079
 1081e40:	8822d33a 	srli	r17,r17,12
 1081e44:	0083ffc4 	movi	r2,4095
 1081e48:	8c7fffc4 	addi	r17,r17,-1
 1081e4c:	8822933a 	slli	r17,r17,12
 1081e50:	1440060e 	bge	r2,r17,1081e6c <_malloc_trim_r+0x78>
 1081e54:	10817240 	call	1081724 <_sbrk_r>
 1081e58:	98c00217 	ldw	r3,8(r19)
 1081e5c:	9009883a 	mov	r4,r18
 1081e60:	044bc83a 	sub	r5,zero,r17
 1081e64:	80c7883a 	add	r3,r16,r3
 1081e68:	10c00926 	beq	r2,r3,1081e90 <_malloc_trim_r+0x9c>
 1081e6c:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1081e70:	0005883a 	mov	r2,zero
 1081e74:	dfc00417 	ldw	ra,16(sp)
 1081e78:	dcc00317 	ldw	r19,12(sp)
 1081e7c:	dc800217 	ldw	r18,8(sp)
 1081e80:	dc400117 	ldw	r17,4(sp)
 1081e84:	dc000017 	ldw	r16,0(sp)
 1081e88:	dec00504 	addi	sp,sp,20
 1081e8c:	f800283a 	ret
 1081e90:	9009883a 	mov	r4,r18
 1081e94:	10817240 	call	1081724 <_sbrk_r>
 1081e98:	844dc83a 	sub	r6,r16,r17
 1081e9c:	00ffffc4 	movi	r3,-1
 1081ea0:	9009883a 	mov	r4,r18
 1081ea4:	000b883a 	mov	r5,zero
 1081ea8:	01c04234 	movhi	r7,264
 1081eac:	39da2a04 	addi	r7,r7,26792
 1081eb0:	31800054 	ori	r6,r6,1
 1081eb4:	10c00926 	beq	r2,r3,1081edc <_malloc_trim_r+0xe8>
 1081eb8:	38800017 	ldw	r2,0(r7)
 1081ebc:	98c00217 	ldw	r3,8(r19)
 1081ec0:	9009883a 	mov	r4,r18
 1081ec4:	1445c83a 	sub	r2,r2,r17
 1081ec8:	38800015 	stw	r2,0(r7)
 1081ecc:	19800115 	stw	r6,4(r3)
 1081ed0:	1082cbc0 	call	1082cbc <__malloc_unlock>
 1081ed4:	00800044 	movi	r2,1
 1081ed8:	003fe606 	br	1081e74 <_malloc_trim_r+0x80>
 1081edc:	10817240 	call	1081724 <_sbrk_r>
 1081ee0:	99800217 	ldw	r6,8(r19)
 1081ee4:	100f883a 	mov	r7,r2
 1081ee8:	9009883a 	mov	r4,r18
 1081eec:	1187c83a 	sub	r3,r2,r6
 1081ef0:	008003c4 	movi	r2,15
 1081ef4:	19400054 	ori	r5,r3,1
 1081ef8:	10ffdc0e 	bge	r2,r3,1081e6c <_malloc_trim_r+0x78>
 1081efc:	00804234 	movhi	r2,264
 1081f00:	10940104 	addi	r2,r2,20484
 1081f04:	10c00017 	ldw	r3,0(r2)
 1081f08:	00804234 	movhi	r2,264
 1081f0c:	109a2a04 	addi	r2,r2,26792
 1081f10:	31400115 	stw	r5,4(r6)
 1081f14:	38c7c83a 	sub	r3,r7,r3
 1081f18:	10c00015 	stw	r3,0(r2)
 1081f1c:	003fd306 	br	1081e6c <_malloc_trim_r+0x78>

01081f20 <_free_r>:
 1081f20:	defffd04 	addi	sp,sp,-12
 1081f24:	dc400115 	stw	r17,4(sp)
 1081f28:	dc000015 	stw	r16,0(sp)
 1081f2c:	dfc00215 	stw	ra,8(sp)
 1081f30:	2821883a 	mov	r16,r5
 1081f34:	2023883a 	mov	r17,r4
 1081f38:	28005a26 	beq	r5,zero,10820a4 <_free_r+0x184>
 1081f3c:	1082cb80 	call	1082cb8 <__malloc_lock>
 1081f40:	823ffe04 	addi	r8,r16,-8
 1081f44:	41400117 	ldw	r5,4(r8)
 1081f48:	00bfff84 	movi	r2,-2
 1081f4c:	02804234 	movhi	r10,264
 1081f50:	528eee04 	addi	r10,r10,15288
 1081f54:	288e703a 	and	r7,r5,r2
 1081f58:	41cd883a 	add	r6,r8,r7
 1081f5c:	30c00117 	ldw	r3,4(r6)
 1081f60:	51000217 	ldw	r4,8(r10)
 1081f64:	00bfff04 	movi	r2,-4
 1081f68:	1892703a 	and	r9,r3,r2
 1081f6c:	5017883a 	mov	r11,r10
 1081f70:	31006726 	beq	r6,r4,1082110 <_free_r+0x1f0>
 1081f74:	2880004c 	andi	r2,r5,1
 1081f78:	1005003a 	cmpeq	r2,r2,zero
 1081f7c:	32400115 	stw	r9,4(r6)
 1081f80:	10001a1e 	bne	r2,zero,1081fec <_free_r+0xcc>
 1081f84:	000b883a 	mov	r5,zero
 1081f88:	3247883a 	add	r3,r6,r9
 1081f8c:	18800117 	ldw	r2,4(r3)
 1081f90:	1080004c 	andi	r2,r2,1
 1081f94:	1000231e 	bne	r2,zero,1082024 <_free_r+0x104>
 1081f98:	280ac03a 	cmpne	r5,r5,zero
 1081f9c:	3a4f883a 	add	r7,r7,r9
 1081fa0:	2800451e 	bne	r5,zero,10820b8 <_free_r+0x198>
 1081fa4:	31000217 	ldw	r4,8(r6)
 1081fa8:	00804234 	movhi	r2,264
 1081fac:	108ef004 	addi	r2,r2,15296
 1081fb0:	20807b26 	beq	r4,r2,10821a0 <_free_r+0x280>
 1081fb4:	30800317 	ldw	r2,12(r6)
 1081fb8:	3a07883a 	add	r3,r7,r8
 1081fbc:	19c00015 	stw	r7,0(r3)
 1081fc0:	11000215 	stw	r4,8(r2)
 1081fc4:	20800315 	stw	r2,12(r4)
 1081fc8:	38800054 	ori	r2,r7,1
 1081fcc:	40800115 	stw	r2,4(r8)
 1081fd0:	28001a26 	beq	r5,zero,108203c <_free_r+0x11c>
 1081fd4:	8809883a 	mov	r4,r17
 1081fd8:	dfc00217 	ldw	ra,8(sp)
 1081fdc:	dc400117 	ldw	r17,4(sp)
 1081fe0:	dc000017 	ldw	r16,0(sp)
 1081fe4:	dec00304 	addi	sp,sp,12
 1081fe8:	1082cbc1 	jmpi	1082cbc <__malloc_unlock>
 1081fec:	80bffe17 	ldw	r2,-8(r16)
 1081ff0:	50c00204 	addi	r3,r10,8
 1081ff4:	4091c83a 	sub	r8,r8,r2
 1081ff8:	41000217 	ldw	r4,8(r8)
 1081ffc:	388f883a 	add	r7,r7,r2
 1082000:	20c06126 	beq	r4,r3,1082188 <_free_r+0x268>
 1082004:	40800317 	ldw	r2,12(r8)
 1082008:	3247883a 	add	r3,r6,r9
 108200c:	000b883a 	mov	r5,zero
 1082010:	11000215 	stw	r4,8(r2)
 1082014:	20800315 	stw	r2,12(r4)
 1082018:	18800117 	ldw	r2,4(r3)
 108201c:	1080004c 	andi	r2,r2,1
 1082020:	103fdd26 	beq	r2,zero,1081f98 <_free_r+0x78>
 1082024:	38800054 	ori	r2,r7,1
 1082028:	3a07883a 	add	r3,r7,r8
 108202c:	280ac03a 	cmpne	r5,r5,zero
 1082030:	40800115 	stw	r2,4(r8)
 1082034:	19c00015 	stw	r7,0(r3)
 1082038:	283fe61e 	bne	r5,zero,1081fd4 <_free_r+0xb4>
 108203c:	00807fc4 	movi	r2,511
 1082040:	11c01f2e 	bgeu	r2,r7,10820c0 <_free_r+0x1a0>
 1082044:	3806d27a 	srli	r3,r7,9
 1082048:	1800481e 	bne	r3,zero,108216c <_free_r+0x24c>
 108204c:	3804d0fa 	srli	r2,r7,3
 1082050:	100690fa 	slli	r3,r2,3
 1082054:	1acd883a 	add	r6,r3,r11
 1082058:	31400217 	ldw	r5,8(r6)
 108205c:	31405926 	beq	r6,r5,10821c4 <_free_r+0x2a4>
 1082060:	28800117 	ldw	r2,4(r5)
 1082064:	00ffff04 	movi	r3,-4
 1082068:	10c4703a 	and	r2,r2,r3
 108206c:	3880022e 	bgeu	r7,r2,1082078 <_free_r+0x158>
 1082070:	29400217 	ldw	r5,8(r5)
 1082074:	317ffa1e 	bne	r6,r5,1082060 <_free_r+0x140>
 1082078:	29800317 	ldw	r6,12(r5)
 108207c:	41800315 	stw	r6,12(r8)
 1082080:	41400215 	stw	r5,8(r8)
 1082084:	8809883a 	mov	r4,r17
 1082088:	2a000315 	stw	r8,12(r5)
 108208c:	32000215 	stw	r8,8(r6)
 1082090:	dfc00217 	ldw	ra,8(sp)
 1082094:	dc400117 	ldw	r17,4(sp)
 1082098:	dc000017 	ldw	r16,0(sp)
 108209c:	dec00304 	addi	sp,sp,12
 10820a0:	1082cbc1 	jmpi	1082cbc <__malloc_unlock>
 10820a4:	dfc00217 	ldw	ra,8(sp)
 10820a8:	dc400117 	ldw	r17,4(sp)
 10820ac:	dc000017 	ldw	r16,0(sp)
 10820b0:	dec00304 	addi	sp,sp,12
 10820b4:	f800283a 	ret
 10820b8:	31000217 	ldw	r4,8(r6)
 10820bc:	003fbd06 	br	1081fb4 <_free_r+0x94>
 10820c0:	3806d0fa 	srli	r3,r7,3
 10820c4:	00800044 	movi	r2,1
 10820c8:	51400117 	ldw	r5,4(r10)
 10820cc:	180890fa 	slli	r4,r3,3
 10820d0:	1807d0ba 	srai	r3,r3,2
 10820d4:	22c9883a 	add	r4,r4,r11
 10820d8:	21800217 	ldw	r6,8(r4)
 10820dc:	10c4983a 	sll	r2,r2,r3
 10820e0:	41000315 	stw	r4,12(r8)
 10820e4:	41800215 	stw	r6,8(r8)
 10820e8:	288ab03a 	or	r5,r5,r2
 10820ec:	22000215 	stw	r8,8(r4)
 10820f0:	8809883a 	mov	r4,r17
 10820f4:	51400115 	stw	r5,4(r10)
 10820f8:	32000315 	stw	r8,12(r6)
 10820fc:	dfc00217 	ldw	ra,8(sp)
 1082100:	dc400117 	ldw	r17,4(sp)
 1082104:	dc000017 	ldw	r16,0(sp)
 1082108:	dec00304 	addi	sp,sp,12
 108210c:	1082cbc1 	jmpi	1082cbc <__malloc_unlock>
 1082110:	2880004c 	andi	r2,r5,1
 1082114:	3a4d883a 	add	r6,r7,r9
 1082118:	1000071e 	bne	r2,zero,1082138 <_free_r+0x218>
 108211c:	80bffe17 	ldw	r2,-8(r16)
 1082120:	4091c83a 	sub	r8,r8,r2
 1082124:	41000317 	ldw	r4,12(r8)
 1082128:	40c00217 	ldw	r3,8(r8)
 108212c:	308d883a 	add	r6,r6,r2
 1082130:	20c00215 	stw	r3,8(r4)
 1082134:	19000315 	stw	r4,12(r3)
 1082138:	00804234 	movhi	r2,264
 108213c:	10940004 	addi	r2,r2,20480
 1082140:	11000017 	ldw	r4,0(r2)
 1082144:	30c00054 	ori	r3,r6,1
 1082148:	52000215 	stw	r8,8(r10)
 108214c:	40c00115 	stw	r3,4(r8)
 1082150:	313fa036 	bltu	r6,r4,1081fd4 <_free_r+0xb4>
 1082154:	00804234 	movhi	r2,264
 1082158:	109a2004 	addi	r2,r2,26752
 108215c:	11400017 	ldw	r5,0(r2)
 1082160:	8809883a 	mov	r4,r17
 1082164:	1081df40 	call	1081df4 <_malloc_trim_r>
 1082168:	003f9a06 	br	1081fd4 <_free_r+0xb4>
 108216c:	00800104 	movi	r2,4
 1082170:	10c0072e 	bgeu	r2,r3,1082190 <_free_r+0x270>
 1082174:	00800504 	movi	r2,20
 1082178:	10c01936 	bltu	r2,r3,10821e0 <_free_r+0x2c0>
 108217c:	188016c4 	addi	r2,r3,91
 1082180:	100690fa 	slli	r3,r2,3
 1082184:	003fb306 	br	1082054 <_free_r+0x134>
 1082188:	01400044 	movi	r5,1
 108218c:	003f7e06 	br	1081f88 <_free_r+0x68>
 1082190:	3804d1ba 	srli	r2,r7,6
 1082194:	10800e04 	addi	r2,r2,56
 1082198:	100690fa 	slli	r3,r2,3
 108219c:	003fad06 	br	1082054 <_free_r+0x134>
 10821a0:	22000315 	stw	r8,12(r4)
 10821a4:	22000215 	stw	r8,8(r4)
 10821a8:	3a05883a 	add	r2,r7,r8
 10821ac:	38c00054 	ori	r3,r7,1
 10821b0:	11c00015 	stw	r7,0(r2)
 10821b4:	41000215 	stw	r4,8(r8)
 10821b8:	40c00115 	stw	r3,4(r8)
 10821bc:	41000315 	stw	r4,12(r8)
 10821c0:	003f8406 	br	1081fd4 <_free_r+0xb4>
 10821c4:	1005d0ba 	srai	r2,r2,2
 10821c8:	00c00044 	movi	r3,1
 10821cc:	51000117 	ldw	r4,4(r10)
 10821d0:	1886983a 	sll	r3,r3,r2
 10821d4:	20c8b03a 	or	r4,r4,r3
 10821d8:	51000115 	stw	r4,4(r10)
 10821dc:	003fa706 	br	108207c <_free_r+0x15c>
 10821e0:	00801504 	movi	r2,84
 10821e4:	10c00436 	bltu	r2,r3,10821f8 <_free_r+0x2d8>
 10821e8:	3804d33a 	srli	r2,r7,12
 10821ec:	10801b84 	addi	r2,r2,110
 10821f0:	100690fa 	slli	r3,r2,3
 10821f4:	003f9706 	br	1082054 <_free_r+0x134>
 10821f8:	00805504 	movi	r2,340
 10821fc:	10c00436 	bltu	r2,r3,1082210 <_free_r+0x2f0>
 1082200:	3804d3fa 	srli	r2,r7,15
 1082204:	10801dc4 	addi	r2,r2,119
 1082208:	100690fa 	slli	r3,r2,3
 108220c:	003f9106 	br	1082054 <_free_r+0x134>
 1082210:	00815504 	movi	r2,1364
 1082214:	10c0032e 	bgeu	r2,r3,1082224 <_free_r+0x304>
 1082218:	00801f84 	movi	r2,126
 108221c:	00c0fc04 	movi	r3,1008
 1082220:	003f8c06 	br	1082054 <_free_r+0x134>
 1082224:	3804d4ba 	srli	r2,r7,18
 1082228:	10801f04 	addi	r2,r2,124
 108222c:	100690fa 	slli	r3,r2,3
 1082230:	003f8806 	br	1082054 <_free_r+0x134>

01082234 <_fwalk_reent>:
 1082234:	defff704 	addi	sp,sp,-36
 1082238:	dcc00315 	stw	r19,12(sp)
 108223c:	24c0b804 	addi	r19,r4,736
 1082240:	dd800615 	stw	r22,24(sp)
 1082244:	dd400515 	stw	r21,20(sp)
 1082248:	dfc00815 	stw	ra,32(sp)
 108224c:	ddc00715 	stw	r23,28(sp)
 1082250:	dd000415 	stw	r20,16(sp)
 1082254:	dc800215 	stw	r18,8(sp)
 1082258:	dc400115 	stw	r17,4(sp)
 108225c:	dc000015 	stw	r16,0(sp)
 1082260:	202b883a 	mov	r21,r4
 1082264:	282d883a 	mov	r22,r5
 1082268:	1081b580 	call	1081b58 <__sfp_lock_acquire>
 108226c:	98002126 	beq	r19,zero,10822f4 <_fwalk_reent+0xc0>
 1082270:	002f883a 	mov	r23,zero
 1082274:	9c800117 	ldw	r18,4(r19)
 1082278:	9c000217 	ldw	r16,8(r19)
 108227c:	90bfffc4 	addi	r2,r18,-1
 1082280:	10000d16 	blt	r2,zero,10822b8 <_fwalk_reent+0x84>
 1082284:	0023883a 	mov	r17,zero
 1082288:	053fffc4 	movi	r20,-1
 108228c:	8080030f 	ldh	r2,12(r16)
 1082290:	8c400044 	addi	r17,r17,1
 1082294:	10000626 	beq	r2,zero,10822b0 <_fwalk_reent+0x7c>
 1082298:	8080038f 	ldh	r2,14(r16)
 108229c:	800b883a 	mov	r5,r16
 10822a0:	a809883a 	mov	r4,r21
 10822a4:	15000226 	beq	r2,r20,10822b0 <_fwalk_reent+0x7c>
 10822a8:	b03ee83a 	callr	r22
 10822ac:	b8aeb03a 	or	r23,r23,r2
 10822b0:	84001704 	addi	r16,r16,92
 10822b4:	947ff51e 	bne	r18,r17,108228c <_fwalk_reent+0x58>
 10822b8:	9cc00017 	ldw	r19,0(r19)
 10822bc:	983fed1e 	bne	r19,zero,1082274 <_fwalk_reent+0x40>
 10822c0:	1081b5c0 	call	1081b5c <__sfp_lock_release>
 10822c4:	b805883a 	mov	r2,r23
 10822c8:	dfc00817 	ldw	ra,32(sp)
 10822cc:	ddc00717 	ldw	r23,28(sp)
 10822d0:	dd800617 	ldw	r22,24(sp)
 10822d4:	dd400517 	ldw	r21,20(sp)
 10822d8:	dd000417 	ldw	r20,16(sp)
 10822dc:	dcc00317 	ldw	r19,12(sp)
 10822e0:	dc800217 	ldw	r18,8(sp)
 10822e4:	dc400117 	ldw	r17,4(sp)
 10822e8:	dc000017 	ldw	r16,0(sp)
 10822ec:	dec00904 	addi	sp,sp,36
 10822f0:	f800283a 	ret
 10822f4:	002f883a 	mov	r23,zero
 10822f8:	003ff106 	br	10822c0 <_fwalk_reent+0x8c>

010822fc <_fwalk>:
 10822fc:	defff804 	addi	sp,sp,-32
 1082300:	dcc00315 	stw	r19,12(sp)
 1082304:	24c0b804 	addi	r19,r4,736
 1082308:	dd400515 	stw	r21,20(sp)
 108230c:	dfc00715 	stw	ra,28(sp)
 1082310:	dd800615 	stw	r22,24(sp)
 1082314:	dd000415 	stw	r20,16(sp)
 1082318:	dc800215 	stw	r18,8(sp)
 108231c:	dc400115 	stw	r17,4(sp)
 1082320:	dc000015 	stw	r16,0(sp)
 1082324:	282b883a 	mov	r21,r5
 1082328:	1081b580 	call	1081b58 <__sfp_lock_acquire>
 108232c:	98001f26 	beq	r19,zero,10823ac <_fwalk+0xb0>
 1082330:	002d883a 	mov	r22,zero
 1082334:	9c800117 	ldw	r18,4(r19)
 1082338:	9c000217 	ldw	r16,8(r19)
 108233c:	90bfffc4 	addi	r2,r18,-1
 1082340:	10000c16 	blt	r2,zero,1082374 <_fwalk+0x78>
 1082344:	0023883a 	mov	r17,zero
 1082348:	053fffc4 	movi	r20,-1
 108234c:	8080030f 	ldh	r2,12(r16)
 1082350:	8c400044 	addi	r17,r17,1
 1082354:	10000526 	beq	r2,zero,108236c <_fwalk+0x70>
 1082358:	8080038f 	ldh	r2,14(r16)
 108235c:	8009883a 	mov	r4,r16
 1082360:	15000226 	beq	r2,r20,108236c <_fwalk+0x70>
 1082364:	a83ee83a 	callr	r21
 1082368:	b0acb03a 	or	r22,r22,r2
 108236c:	84001704 	addi	r16,r16,92
 1082370:	947ff61e 	bne	r18,r17,108234c <_fwalk+0x50>
 1082374:	9cc00017 	ldw	r19,0(r19)
 1082378:	983fee1e 	bne	r19,zero,1082334 <_fwalk+0x38>
 108237c:	1081b5c0 	call	1081b5c <__sfp_lock_release>
 1082380:	b005883a 	mov	r2,r22
 1082384:	dfc00717 	ldw	ra,28(sp)
 1082388:	dd800617 	ldw	r22,24(sp)
 108238c:	dd400517 	ldw	r21,20(sp)
 1082390:	dd000417 	ldw	r20,16(sp)
 1082394:	dcc00317 	ldw	r19,12(sp)
 1082398:	dc800217 	ldw	r18,8(sp)
 108239c:	dc400117 	ldw	r17,4(sp)
 10823a0:	dc000017 	ldw	r16,0(sp)
 10823a4:	dec00804 	addi	sp,sp,32
 10823a8:	f800283a 	ret
 10823ac:	002d883a 	mov	r22,zero
 10823b0:	003ff206 	br	108237c <_fwalk+0x80>

010823b4 <__smakebuf_r>:
 10823b4:	2880030b 	ldhu	r2,12(r5)
 10823b8:	deffed04 	addi	sp,sp,-76
 10823bc:	dc401015 	stw	r17,64(sp)
 10823c0:	1080008c 	andi	r2,r2,2
 10823c4:	dc000f15 	stw	r16,60(sp)
 10823c8:	dfc01215 	stw	ra,72(sp)
 10823cc:	dc801115 	stw	r18,68(sp)
 10823d0:	2821883a 	mov	r16,r5
 10823d4:	2023883a 	mov	r17,r4
 10823d8:	10000b26 	beq	r2,zero,1082408 <__smakebuf_r+0x54>
 10823dc:	28c010c4 	addi	r3,r5,67
 10823e0:	00800044 	movi	r2,1
 10823e4:	28800515 	stw	r2,20(r5)
 10823e8:	28c00415 	stw	r3,16(r5)
 10823ec:	28c00015 	stw	r3,0(r5)
 10823f0:	dfc01217 	ldw	ra,72(sp)
 10823f4:	dc801117 	ldw	r18,68(sp)
 10823f8:	dc401017 	ldw	r17,64(sp)
 10823fc:	dc000f17 	ldw	r16,60(sp)
 1082400:	dec01304 	addi	sp,sp,76
 1082404:	f800283a 	ret
 1082408:	2940038f 	ldh	r5,14(r5)
 108240c:	28002116 	blt	r5,zero,1082494 <__smakebuf_r+0xe0>
 1082410:	d80d883a 	mov	r6,sp
 1082414:	10829380 	call	1082938 <_fstat_r>
 1082418:	10001e16 	blt	r2,zero,1082494 <__smakebuf_r+0xe0>
 108241c:	d8800117 	ldw	r2,4(sp)
 1082420:	00e00014 	movui	r3,32768
 1082424:	113c000c 	andi	r4,r2,61440
 1082428:	20c03126 	beq	r4,r3,10824f0 <__smakebuf_r+0x13c>
 108242c:	8080030b 	ldhu	r2,12(r16)
 1082430:	00c80004 	movi	r3,8192
 1082434:	10820014 	ori	r2,r2,2048
 1082438:	8080030d 	sth	r2,12(r16)
 108243c:	20c01e26 	beq	r4,r3,10824b8 <__smakebuf_r+0x104>
 1082440:	04810004 	movi	r18,1024
 1082444:	8809883a 	mov	r4,r17
 1082448:	900b883a 	mov	r5,r18
 108244c:	108078c0 	call	108078c <_malloc_r>
 1082450:	1009883a 	mov	r4,r2
 1082454:	10003126 	beq	r2,zero,108251c <__smakebuf_r+0x168>
 1082458:	80c0030b 	ldhu	r3,12(r16)
 108245c:	00804234 	movhi	r2,264
 1082460:	10871304 	addi	r2,r2,7244
 1082464:	88800f15 	stw	r2,60(r17)
 1082468:	18c02014 	ori	r3,r3,128
 108246c:	84800515 	stw	r18,20(r16)
 1082470:	80c0030d 	sth	r3,12(r16)
 1082474:	81000415 	stw	r4,16(r16)
 1082478:	81000015 	stw	r4,0(r16)
 108247c:	dfc01217 	ldw	ra,72(sp)
 1082480:	dc801117 	ldw	r18,68(sp)
 1082484:	dc401017 	ldw	r17,64(sp)
 1082488:	dc000f17 	ldw	r16,60(sp)
 108248c:	dec01304 	addi	sp,sp,76
 1082490:	f800283a 	ret
 1082494:	80c0030b 	ldhu	r3,12(r16)
 1082498:	1880200c 	andi	r2,r3,128
 108249c:	10000426 	beq	r2,zero,10824b0 <__smakebuf_r+0xfc>
 10824a0:	04801004 	movi	r18,64
 10824a4:	18820014 	ori	r2,r3,2048
 10824a8:	8080030d 	sth	r2,12(r16)
 10824ac:	003fe506 	br	1082444 <__smakebuf_r+0x90>
 10824b0:	04810004 	movi	r18,1024
 10824b4:	003ffb06 	br	10824a4 <__smakebuf_r+0xf0>
 10824b8:	8140038f 	ldh	r5,14(r16)
 10824bc:	8809883a 	mov	r4,r17
 10824c0:	10829ac0 	call	10829ac <_isatty_r>
 10824c4:	103fde26 	beq	r2,zero,1082440 <__smakebuf_r+0x8c>
 10824c8:	8080030b 	ldhu	r2,12(r16)
 10824cc:	80c010c4 	addi	r3,r16,67
 10824d0:	04810004 	movi	r18,1024
 10824d4:	10800054 	ori	r2,r2,1
 10824d8:	8080030d 	sth	r2,12(r16)
 10824dc:	00800044 	movi	r2,1
 10824e0:	80c00415 	stw	r3,16(r16)
 10824e4:	80800515 	stw	r2,20(r16)
 10824e8:	80c00015 	stw	r3,0(r16)
 10824ec:	003fd506 	br	1082444 <__smakebuf_r+0x90>
 10824f0:	80c00a17 	ldw	r3,40(r16)
 10824f4:	00804234 	movhi	r2,264
 10824f8:	10897a04 	addi	r2,r2,9704
 10824fc:	18bfcb1e 	bne	r3,r2,108242c <__smakebuf_r+0x78>
 1082500:	8080030b 	ldhu	r2,12(r16)
 1082504:	00c10004 	movi	r3,1024
 1082508:	1825883a 	mov	r18,r3
 108250c:	10c4b03a 	or	r2,r2,r3
 1082510:	8080030d 	sth	r2,12(r16)
 1082514:	80c01315 	stw	r3,76(r16)
 1082518:	003fca06 	br	1082444 <__smakebuf_r+0x90>
 108251c:	8100030b 	ldhu	r4,12(r16)
 1082520:	2080800c 	andi	r2,r4,512
 1082524:	103fb21e 	bne	r2,zero,10823f0 <__smakebuf_r+0x3c>
 1082528:	80c010c4 	addi	r3,r16,67
 108252c:	21000094 	ori	r4,r4,2
 1082530:	00800044 	movi	r2,1
 1082534:	80800515 	stw	r2,20(r16)
 1082538:	8100030d 	sth	r4,12(r16)
 108253c:	80c00415 	stw	r3,16(r16)
 1082540:	80c00015 	stw	r3,0(r16)
 1082544:	003faa06 	br	10823f0 <__smakebuf_r+0x3c>

01082548 <memset>:
 1082548:	008000c4 	movi	r2,3
 108254c:	29403fcc 	andi	r5,r5,255
 1082550:	2007883a 	mov	r3,r4
 1082554:	1180022e 	bgeu	r2,r6,1082560 <memset+0x18>
 1082558:	2084703a 	and	r2,r4,r2
 108255c:	10000826 	beq	r2,zero,1082580 <memset+0x38>
 1082560:	30000526 	beq	r6,zero,1082578 <memset+0x30>
 1082564:	2805883a 	mov	r2,r5
 1082568:	30cd883a 	add	r6,r6,r3
 108256c:	18800005 	stb	r2,0(r3)
 1082570:	18c00044 	addi	r3,r3,1
 1082574:	19bffd1e 	bne	r3,r6,108256c <memset+0x24>
 1082578:	2005883a 	mov	r2,r4
 108257c:	f800283a 	ret
 1082580:	2804923a 	slli	r2,r5,8
 1082584:	020003c4 	movi	r8,15
 1082588:	200f883a 	mov	r7,r4
 108258c:	2884b03a 	or	r2,r5,r2
 1082590:	1006943a 	slli	r3,r2,16
 1082594:	10c6b03a 	or	r3,r2,r3
 1082598:	41800a2e 	bgeu	r8,r6,10825c4 <memset+0x7c>
 108259c:	4005883a 	mov	r2,r8
 10825a0:	31bffc04 	addi	r6,r6,-16
 10825a4:	38c00015 	stw	r3,0(r7)
 10825a8:	38c00115 	stw	r3,4(r7)
 10825ac:	38c00215 	stw	r3,8(r7)
 10825b0:	38c00315 	stw	r3,12(r7)
 10825b4:	39c00404 	addi	r7,r7,16
 10825b8:	11bff936 	bltu	r2,r6,10825a0 <memset+0x58>
 10825bc:	008000c4 	movi	r2,3
 10825c0:	1180052e 	bgeu	r2,r6,10825d8 <memset+0x90>
 10825c4:	31bfff04 	addi	r6,r6,-4
 10825c8:	008000c4 	movi	r2,3
 10825cc:	38c00015 	stw	r3,0(r7)
 10825d0:	39c00104 	addi	r7,r7,4
 10825d4:	11bffb36 	bltu	r2,r6,10825c4 <memset+0x7c>
 10825d8:	3807883a 	mov	r3,r7
 10825dc:	003fe006 	br	1082560 <memset+0x18>

010825e0 <__sclose>:
 10825e0:	2940038f 	ldh	r5,14(r5)
 10825e4:	10827a41 	jmpi	10827a4 <_close_r>

010825e8 <__sseek>:
 10825e8:	defffe04 	addi	sp,sp,-8
 10825ec:	dc000015 	stw	r16,0(sp)
 10825f0:	2821883a 	mov	r16,r5
 10825f4:	2940038f 	ldh	r5,14(r5)
 10825f8:	dfc00115 	stw	ra,4(sp)
 10825fc:	1082a1c0 	call	1082a1c <_lseek_r>
 1082600:	1007883a 	mov	r3,r2
 1082604:	00bfffc4 	movi	r2,-1
 1082608:	18800926 	beq	r3,r2,1082630 <__sseek+0x48>
 108260c:	8080030b 	ldhu	r2,12(r16)
 1082610:	80c01415 	stw	r3,80(r16)
 1082614:	10840014 	ori	r2,r2,4096
 1082618:	8080030d 	sth	r2,12(r16)
 108261c:	1805883a 	mov	r2,r3
 1082620:	dfc00117 	ldw	ra,4(sp)
 1082624:	dc000017 	ldw	r16,0(sp)
 1082628:	dec00204 	addi	sp,sp,8
 108262c:	f800283a 	ret
 1082630:	8080030b 	ldhu	r2,12(r16)
 1082634:	10bbffcc 	andi	r2,r2,61439
 1082638:	8080030d 	sth	r2,12(r16)
 108263c:	1805883a 	mov	r2,r3
 1082640:	dfc00117 	ldw	ra,4(sp)
 1082644:	dc000017 	ldw	r16,0(sp)
 1082648:	dec00204 	addi	sp,sp,8
 108264c:	f800283a 	ret

01082650 <__swrite>:
 1082650:	2880030b 	ldhu	r2,12(r5)
 1082654:	defffb04 	addi	sp,sp,-20
 1082658:	dcc00315 	stw	r19,12(sp)
 108265c:	1080400c 	andi	r2,r2,256
 1082660:	dc800215 	stw	r18,8(sp)
 1082664:	dc400115 	stw	r17,4(sp)
 1082668:	dc000015 	stw	r16,0(sp)
 108266c:	3027883a 	mov	r19,r6
 1082670:	3825883a 	mov	r18,r7
 1082674:	dfc00415 	stw	ra,16(sp)
 1082678:	2821883a 	mov	r16,r5
 108267c:	000d883a 	mov	r6,zero
 1082680:	01c00084 	movi	r7,2
 1082684:	2023883a 	mov	r17,r4
 1082688:	10000226 	beq	r2,zero,1082694 <__swrite+0x44>
 108268c:	2940038f 	ldh	r5,14(r5)
 1082690:	1082a1c0 	call	1082a1c <_lseek_r>
 1082694:	8080030b 	ldhu	r2,12(r16)
 1082698:	8140038f 	ldh	r5,14(r16)
 108269c:	8809883a 	mov	r4,r17
 10826a0:	10bbffcc 	andi	r2,r2,61439
 10826a4:	980d883a 	mov	r6,r19
 10826a8:	900f883a 	mov	r7,r18
 10826ac:	8080030d 	sth	r2,12(r16)
 10826b0:	dfc00417 	ldw	ra,16(sp)
 10826b4:	dcc00317 	ldw	r19,12(sp)
 10826b8:	dc800217 	ldw	r18,8(sp)
 10826bc:	dc400117 	ldw	r17,4(sp)
 10826c0:	dc000017 	ldw	r16,0(sp)
 10826c4:	dec00504 	addi	sp,sp,20
 10826c8:	108272c1 	jmpi	108272c <_write_r>

010826cc <__sread>:
 10826cc:	defffe04 	addi	sp,sp,-8
 10826d0:	dc000015 	stw	r16,0(sp)
 10826d4:	2821883a 	mov	r16,r5
 10826d8:	2940038f 	ldh	r5,14(r5)
 10826dc:	dfc00115 	stw	ra,4(sp)
 10826e0:	1082a940 	call	1082a94 <_read_r>
 10826e4:	1007883a 	mov	r3,r2
 10826e8:	10000816 	blt	r2,zero,108270c <__sread+0x40>
 10826ec:	80801417 	ldw	r2,80(r16)
 10826f0:	10c5883a 	add	r2,r2,r3
 10826f4:	80801415 	stw	r2,80(r16)
 10826f8:	1805883a 	mov	r2,r3
 10826fc:	dfc00117 	ldw	ra,4(sp)
 1082700:	dc000017 	ldw	r16,0(sp)
 1082704:	dec00204 	addi	sp,sp,8
 1082708:	f800283a 	ret
 108270c:	8080030b 	ldhu	r2,12(r16)
 1082710:	10bbffcc 	andi	r2,r2,61439
 1082714:	8080030d 	sth	r2,12(r16)
 1082718:	1805883a 	mov	r2,r3
 108271c:	dfc00117 	ldw	ra,4(sp)
 1082720:	dc000017 	ldw	r16,0(sp)
 1082724:	dec00204 	addi	sp,sp,8
 1082728:	f800283a 	ret

0108272c <_write_r>:
 108272c:	defffd04 	addi	sp,sp,-12
 1082730:	dc000015 	stw	r16,0(sp)
 1082734:	04004234 	movhi	r16,264
 1082738:	841a2304 	addi	r16,r16,26764
 108273c:	dc400115 	stw	r17,4(sp)
 1082740:	80000015 	stw	zero,0(r16)
 1082744:	2023883a 	mov	r17,r4
 1082748:	2809883a 	mov	r4,r5
 108274c:	300b883a 	mov	r5,r6
 1082750:	380d883a 	mov	r6,r7
 1082754:	dfc00215 	stw	ra,8(sp)
 1082758:	1082da40 	call	1082da4 <write>
 108275c:	1007883a 	mov	r3,r2
 1082760:	00bfffc4 	movi	r2,-1
 1082764:	18800626 	beq	r3,r2,1082780 <_write_r+0x54>
 1082768:	1805883a 	mov	r2,r3
 108276c:	dfc00217 	ldw	ra,8(sp)
 1082770:	dc400117 	ldw	r17,4(sp)
 1082774:	dc000017 	ldw	r16,0(sp)
 1082778:	dec00304 	addi	sp,sp,12
 108277c:	f800283a 	ret
 1082780:	80800017 	ldw	r2,0(r16)
 1082784:	103ff826 	beq	r2,zero,1082768 <_write_r+0x3c>
 1082788:	88800015 	stw	r2,0(r17)
 108278c:	1805883a 	mov	r2,r3
 1082790:	dfc00217 	ldw	ra,8(sp)
 1082794:	dc400117 	ldw	r17,4(sp)
 1082798:	dc000017 	ldw	r16,0(sp)
 108279c:	dec00304 	addi	sp,sp,12
 10827a0:	f800283a 	ret

010827a4 <_close_r>:
 10827a4:	defffd04 	addi	sp,sp,-12
 10827a8:	dc000015 	stw	r16,0(sp)
 10827ac:	04004234 	movhi	r16,264
 10827b0:	841a2304 	addi	r16,r16,26764
 10827b4:	dc400115 	stw	r17,4(sp)
 10827b8:	80000015 	stw	zero,0(r16)
 10827bc:	2023883a 	mov	r17,r4
 10827c0:	2809883a 	mov	r4,r5
 10827c4:	dfc00215 	stw	ra,8(sp)
 10827c8:	1082b440 	call	1082b44 <close>
 10827cc:	1007883a 	mov	r3,r2
 10827d0:	00bfffc4 	movi	r2,-1
 10827d4:	18800626 	beq	r3,r2,10827f0 <_close_r+0x4c>
 10827d8:	1805883a 	mov	r2,r3
 10827dc:	dfc00217 	ldw	ra,8(sp)
 10827e0:	dc400117 	ldw	r17,4(sp)
 10827e4:	dc000017 	ldw	r16,0(sp)
 10827e8:	dec00304 	addi	sp,sp,12
 10827ec:	f800283a 	ret
 10827f0:	80800017 	ldw	r2,0(r16)
 10827f4:	103ff826 	beq	r2,zero,10827d8 <_close_r+0x34>
 10827f8:	88800015 	stw	r2,0(r17)
 10827fc:	1805883a 	mov	r2,r3
 1082800:	dfc00217 	ldw	ra,8(sp)
 1082804:	dc400117 	ldw	r17,4(sp)
 1082808:	dc000017 	ldw	r16,0(sp)
 108280c:	dec00304 	addi	sp,sp,12
 1082810:	f800283a 	ret

01082814 <_fclose_r>:
 1082814:	defffc04 	addi	sp,sp,-16
 1082818:	dc400115 	stw	r17,4(sp)
 108281c:	dc000015 	stw	r16,0(sp)
 1082820:	dfc00315 	stw	ra,12(sp)
 1082824:	dc800215 	stw	r18,8(sp)
 1082828:	2821883a 	mov	r16,r5
 108282c:	2023883a 	mov	r17,r4
 1082830:	28002926 	beq	r5,zero,10828d8 <_fclose_r+0xc4>
 1082834:	1081b580 	call	1081b58 <__sfp_lock_acquire>
 1082838:	88000226 	beq	r17,zero,1082844 <_fclose_r+0x30>
 108283c:	88800e17 	ldw	r2,56(r17)
 1082840:	10002d26 	beq	r2,zero,10828f8 <_fclose_r+0xe4>
 1082844:	8080030f 	ldh	r2,12(r16)
 1082848:	10002226 	beq	r2,zero,10828d4 <_fclose_r+0xc0>
 108284c:	8809883a 	mov	r4,r17
 1082850:	800b883a 	mov	r5,r16
 1082854:	10818d00 	call	10818d0 <_fflush_r>
 1082858:	1025883a 	mov	r18,r2
 108285c:	80800b17 	ldw	r2,44(r16)
 1082860:	10000426 	beq	r2,zero,1082874 <_fclose_r+0x60>
 1082864:	81400717 	ldw	r5,28(r16)
 1082868:	8809883a 	mov	r4,r17
 108286c:	103ee83a 	callr	r2
 1082870:	10002a16 	blt	r2,zero,108291c <_fclose_r+0x108>
 1082874:	8080030b 	ldhu	r2,12(r16)
 1082878:	1080200c 	andi	r2,r2,128
 108287c:	1000231e 	bne	r2,zero,108290c <_fclose_r+0xf8>
 1082880:	81400c17 	ldw	r5,48(r16)
 1082884:	28000526 	beq	r5,zero,108289c <_fclose_r+0x88>
 1082888:	80801004 	addi	r2,r16,64
 108288c:	28800226 	beq	r5,r2,1082898 <_fclose_r+0x84>
 1082890:	8809883a 	mov	r4,r17
 1082894:	1081f200 	call	1081f20 <_free_r>
 1082898:	80000c15 	stw	zero,48(r16)
 108289c:	81401117 	ldw	r5,68(r16)
 10828a0:	28000326 	beq	r5,zero,10828b0 <_fclose_r+0x9c>
 10828a4:	8809883a 	mov	r4,r17
 10828a8:	1081f200 	call	1081f20 <_free_r>
 10828ac:	80001115 	stw	zero,68(r16)
 10828b0:	8000030d 	sth	zero,12(r16)
 10828b4:	1081b5c0 	call	1081b5c <__sfp_lock_release>
 10828b8:	9005883a 	mov	r2,r18
 10828bc:	dfc00317 	ldw	ra,12(sp)
 10828c0:	dc800217 	ldw	r18,8(sp)
 10828c4:	dc400117 	ldw	r17,4(sp)
 10828c8:	dc000017 	ldw	r16,0(sp)
 10828cc:	dec00404 	addi	sp,sp,16
 10828d0:	f800283a 	ret
 10828d4:	1081b5c0 	call	1081b5c <__sfp_lock_release>
 10828d8:	0025883a 	mov	r18,zero
 10828dc:	9005883a 	mov	r2,r18
 10828e0:	dfc00317 	ldw	ra,12(sp)
 10828e4:	dc800217 	ldw	r18,8(sp)
 10828e8:	dc400117 	ldw	r17,4(sp)
 10828ec:	dc000017 	ldw	r16,0(sp)
 10828f0:	dec00404 	addi	sp,sp,16
 10828f4:	f800283a 	ret
 10828f8:	8809883a 	mov	r4,r17
 10828fc:	1081b680 	call	1081b68 <__sinit>
 1082900:	8080030f 	ldh	r2,12(r16)
 1082904:	103fd11e 	bne	r2,zero,108284c <_fclose_r+0x38>
 1082908:	003ff206 	br	10828d4 <_fclose_r+0xc0>
 108290c:	81400417 	ldw	r5,16(r16)
 1082910:	8809883a 	mov	r4,r17
 1082914:	1081f200 	call	1081f20 <_free_r>
 1082918:	003fd906 	br	1082880 <_fclose_r+0x6c>
 108291c:	04bfffc4 	movi	r18,-1
 1082920:	003fd406 	br	1082874 <_fclose_r+0x60>

01082924 <fclose>:
 1082924:	00804234 	movhi	r2,264
 1082928:	1093fe04 	addi	r2,r2,20472
 108292c:	200b883a 	mov	r5,r4
 1082930:	11000017 	ldw	r4,0(r2)
 1082934:	10828141 	jmpi	1082814 <_fclose_r>

01082938 <_fstat_r>:
 1082938:	defffd04 	addi	sp,sp,-12
 108293c:	dc000015 	stw	r16,0(sp)
 1082940:	04004234 	movhi	r16,264
 1082944:	841a2304 	addi	r16,r16,26764
 1082948:	dc400115 	stw	r17,4(sp)
 108294c:	80000015 	stw	zero,0(r16)
 1082950:	2023883a 	mov	r17,r4
 1082954:	2809883a 	mov	r4,r5
 1082958:	300b883a 	mov	r5,r6
 108295c:	dfc00215 	stw	ra,8(sp)
 1082960:	1082b840 	call	1082b84 <fstat>
 1082964:	1007883a 	mov	r3,r2
 1082968:	00bfffc4 	movi	r2,-1
 108296c:	18800626 	beq	r3,r2,1082988 <_fstat_r+0x50>
 1082970:	1805883a 	mov	r2,r3
 1082974:	dfc00217 	ldw	ra,8(sp)
 1082978:	dc400117 	ldw	r17,4(sp)
 108297c:	dc000017 	ldw	r16,0(sp)
 1082980:	dec00304 	addi	sp,sp,12
 1082984:	f800283a 	ret
 1082988:	80800017 	ldw	r2,0(r16)
 108298c:	103ff826 	beq	r2,zero,1082970 <_fstat_r+0x38>
 1082990:	88800015 	stw	r2,0(r17)
 1082994:	1805883a 	mov	r2,r3
 1082998:	dfc00217 	ldw	ra,8(sp)
 108299c:	dc400117 	ldw	r17,4(sp)
 10829a0:	dc000017 	ldw	r16,0(sp)
 10829a4:	dec00304 	addi	sp,sp,12
 10829a8:	f800283a 	ret

010829ac <_isatty_r>:
 10829ac:	defffd04 	addi	sp,sp,-12
 10829b0:	dc000015 	stw	r16,0(sp)
 10829b4:	04004234 	movhi	r16,264
 10829b8:	841a2304 	addi	r16,r16,26764
 10829bc:	dc400115 	stw	r17,4(sp)
 10829c0:	80000015 	stw	zero,0(r16)
 10829c4:	2023883a 	mov	r17,r4
 10829c8:	2809883a 	mov	r4,r5
 10829cc:	dfc00215 	stw	ra,8(sp)
 10829d0:	1082ba40 	call	1082ba4 <isatty>
 10829d4:	1007883a 	mov	r3,r2
 10829d8:	00bfffc4 	movi	r2,-1
 10829dc:	18800626 	beq	r3,r2,10829f8 <_isatty_r+0x4c>
 10829e0:	1805883a 	mov	r2,r3
 10829e4:	dfc00217 	ldw	ra,8(sp)
 10829e8:	dc400117 	ldw	r17,4(sp)
 10829ec:	dc000017 	ldw	r16,0(sp)
 10829f0:	dec00304 	addi	sp,sp,12
 10829f4:	f800283a 	ret
 10829f8:	80800017 	ldw	r2,0(r16)
 10829fc:	103ff826 	beq	r2,zero,10829e0 <_isatty_r+0x34>
 1082a00:	88800015 	stw	r2,0(r17)
 1082a04:	1805883a 	mov	r2,r3
 1082a08:	dfc00217 	ldw	ra,8(sp)
 1082a0c:	dc400117 	ldw	r17,4(sp)
 1082a10:	dc000017 	ldw	r16,0(sp)
 1082a14:	dec00304 	addi	sp,sp,12
 1082a18:	f800283a 	ret

01082a1c <_lseek_r>:
 1082a1c:	defffd04 	addi	sp,sp,-12
 1082a20:	dc000015 	stw	r16,0(sp)
 1082a24:	04004234 	movhi	r16,264
 1082a28:	841a2304 	addi	r16,r16,26764
 1082a2c:	dc400115 	stw	r17,4(sp)
 1082a30:	80000015 	stw	zero,0(r16)
 1082a34:	2023883a 	mov	r17,r4
 1082a38:	2809883a 	mov	r4,r5
 1082a3c:	300b883a 	mov	r5,r6
 1082a40:	380d883a 	mov	r6,r7
 1082a44:	dfc00215 	stw	ra,8(sp)
 1082a48:	1082c3c0 	call	1082c3c <lseek>
 1082a4c:	1007883a 	mov	r3,r2
 1082a50:	00bfffc4 	movi	r2,-1
 1082a54:	18800626 	beq	r3,r2,1082a70 <_lseek_r+0x54>
 1082a58:	1805883a 	mov	r2,r3
 1082a5c:	dfc00217 	ldw	ra,8(sp)
 1082a60:	dc400117 	ldw	r17,4(sp)
 1082a64:	dc000017 	ldw	r16,0(sp)
 1082a68:	dec00304 	addi	sp,sp,12
 1082a6c:	f800283a 	ret
 1082a70:	80800017 	ldw	r2,0(r16)
 1082a74:	103ff826 	beq	r2,zero,1082a58 <_lseek_r+0x3c>
 1082a78:	88800015 	stw	r2,0(r17)
 1082a7c:	1805883a 	mov	r2,r3
 1082a80:	dfc00217 	ldw	ra,8(sp)
 1082a84:	dc400117 	ldw	r17,4(sp)
 1082a88:	dc000017 	ldw	r16,0(sp)
 1082a8c:	dec00304 	addi	sp,sp,12
 1082a90:	f800283a 	ret

01082a94 <_read_r>:
 1082a94:	defffd04 	addi	sp,sp,-12
 1082a98:	dc000015 	stw	r16,0(sp)
 1082a9c:	04004234 	movhi	r16,264
 1082aa0:	841a2304 	addi	r16,r16,26764
 1082aa4:	dc400115 	stw	r17,4(sp)
 1082aa8:	80000015 	stw	zero,0(r16)
 1082aac:	2023883a 	mov	r17,r4
 1082ab0:	2809883a 	mov	r4,r5
 1082ab4:	300b883a 	mov	r5,r6
 1082ab8:	380d883a 	mov	r6,r7
 1082abc:	dfc00215 	stw	ra,8(sp)
 1082ac0:	1082cf80 	call	1082cf8 <read>
 1082ac4:	1007883a 	mov	r3,r2
 1082ac8:	00bfffc4 	movi	r2,-1
 1082acc:	18800626 	beq	r3,r2,1082ae8 <_read_r+0x54>
 1082ad0:	1805883a 	mov	r2,r3
 1082ad4:	dfc00217 	ldw	ra,8(sp)
 1082ad8:	dc400117 	ldw	r17,4(sp)
 1082adc:	dc000017 	ldw	r16,0(sp)
 1082ae0:	dec00304 	addi	sp,sp,12
 1082ae4:	f800283a 	ret
 1082ae8:	80800017 	ldw	r2,0(r16)
 1082aec:	103ff826 	beq	r2,zero,1082ad0 <_read_r+0x3c>
 1082af0:	88800015 	stw	r2,0(r17)
 1082af4:	1805883a 	mov	r2,r3
 1082af8:	dfc00217 	ldw	ra,8(sp)
 1082afc:	dc400117 	ldw	r17,4(sp)
 1082b00:	dc000017 	ldw	r16,0(sp)
 1082b04:	dec00304 	addi	sp,sp,12
 1082b08:	f800283a 	ret

01082b0c <__mulsi3>:
 1082b0c:	20000a26 	beq	r4,zero,1082b38 <__mulsi3+0x2c>
 1082b10:	0007883a 	mov	r3,zero
 1082b14:	2080004c 	andi	r2,r4,1
 1082b18:	1005003a 	cmpeq	r2,r2,zero
 1082b1c:	2008d07a 	srli	r4,r4,1
 1082b20:	1000011e 	bne	r2,zero,1082b28 <__mulsi3+0x1c>
 1082b24:	1947883a 	add	r3,r3,r5
 1082b28:	294b883a 	add	r5,r5,r5
 1082b2c:	203ff91e 	bne	r4,zero,1082b14 <__mulsi3+0x8>
 1082b30:	1805883a 	mov	r2,r3
 1082b34:	f800283a 	ret
 1082b38:	0007883a 	mov	r3,zero
 1082b3c:	1805883a 	mov	r2,r3
 1082b40:	f800283a 	ret

01082b44 <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
 1082b44:	deffff04 	addi	sp,sp,-4
 1082b48:	dfc00015 	stw	ra,0(sp)

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 1082b4c:	00804234 	movhi	r2,264
 1082b50:	10940204 	addi	r2,r2,20488
 1082b54:	10800017 	ldw	r2,0(r2)
 1082b58:	00c04234 	movhi	r3,264
 1082b5c:	18da2304 	addi	r3,r3,26764
 1082b60:	10000226 	beq	r2,zero,1082b6c <close+0x28>
 1082b64:	103ee83a 	callr	r2
 1082b68:	1007883a 	mov	r3,r2
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
 1082b6c:	00801604 	movi	r2,88
 1082b70:	18800015 	stw	r2,0(r3)
  return -1;
}
 1082b74:	00bfffc4 	movi	r2,-1
 1082b78:	dfc00017 	ldw	ra,0(sp)
 1082b7c:	dec00104 	addi	sp,sp,4
 1082b80:	f800283a 	ret

01082b84 <fstat>:
 * Provide minimal version that just describes all file descriptors 
 * as character devices for provided stdio devices.
 */
int ALT_FSTAT (int file, struct stat *st)
{
    switch (file) {
 1082b84:	00800084 	movi	r2,2
 1082b88:	00ffffc4 	movi	r3,-1
 1082b8c:	11000336 	bltu	r2,r4,1082b9c <fstat+0x18>
    case 1: /* stdout file descriptor */
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
#endif /* ALT_STDERR_PRESENT */
        st->st_mode = _IFCHR;
 1082b90:	00880004 	movi	r2,8192
 1082b94:	28800115 	stw	r2,4(r5)
 1082b98:	0007883a 	mov	r3,zero

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(fstat);
#endif
}
 1082b9c:	1805883a 	mov	r2,r3
 1082ba0:	f800283a 	ret

01082ba4 <isatty>:

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(isatty);
#endif
}
 1082ba4:	00800084 	movi	r2,2
 1082ba8:	1105403a 	cmpgeu	r2,r2,r4
 1082bac:	f800283a 	ret

01082bb0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1082bb0:	2900051e 	bne	r5,r4,1082bc8 <alt_load_section+0x18>
 1082bb4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
 1082bb8:	20800017 	ldw	r2,0(r4)
 1082bbc:	21000104 	addi	r4,r4,4
 1082bc0:	28800015 	stw	r2,0(r5)
 1082bc4:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1082bc8:	29bffb1e 	bne	r5,r6,1082bb8 <alt_load_section+0x8>
 1082bcc:	f800283a 	ret

01082bd0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1082bd0:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1082bd4:	01004234 	movhi	r4,264
 1082bd8:	21140704 	addi	r4,r4,20508
 1082bdc:	01404234 	movhi	r5,264
 1082be0:	294dee04 	addi	r5,r5,14264
 1082be4:	01804234 	movhi	r6,264
 1082be8:	31940704 	addi	r6,r6,20508
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1082bec:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1082bf0:	1082bb00 	call	1082bb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1082bf4:	01004234 	movhi	r4,264
 1082bf8:	21000004 	addi	r4,r4,0
 1082bfc:	01404434 	movhi	r5,272
 1082c00:	29500804 	addi	r5,r5,16416
 1082c04:	01804434 	movhi	r6,272
 1082c08:	31905004 	addi	r6,r6,16704
 1082c0c:	1082bb00 	call	1082bb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1082c10:	01004234 	movhi	r4,264
 1082c14:	210de404 	addi	r4,r4,14224
 1082c18:	01404234 	movhi	r5,264
 1082c1c:	294de404 	addi	r5,r5,14224
 1082c20:	01804234 	movhi	r6,264
 1082c24:	318dee04 	addi	r6,r6,14264
 1082c28:	1082bb00 	call	1082bb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1082c2c:	10833940 	call	1083394 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 1082c30:	dfc00017 	ldw	ra,0(sp)
 1082c34:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 1082c38:	10833981 	jmpi	1083398 <alt_icache_flush_all>

01082c3c <lseek>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1082c3c:	deffff04 	addi	sp,sp,-4
 1082c40:	dfc00015 	stw	ra,0(sp)
 1082c44:	00804234 	movhi	r2,264
 1082c48:	10940204 	addi	r2,r2,20488
 1082c4c:	10800017 	ldw	r2,0(r2)
 1082c50:	00c04234 	movhi	r3,264
 1082c54:	18da2304 	addi	r3,r3,26764
 1082c58:	10000226 	beq	r2,zero,1082c64 <lseek+0x28>
 1082c5c:	103ee83a 	callr	r2
 1082c60:	1007883a 	mov	r3,r2
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
 1082c64:	00801604 	movi	r2,88
 1082c68:	18800015 	stw	r2,0(r3)
  return -1;
}
 1082c6c:	00bfffc4 	movi	r2,-1
 1082c70:	dfc00017 	ldw	ra,0(sp)
 1082c74:	dec00104 	addi	sp,sp,4
 1082c78:	f800283a 	ret

01082c7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1082c7c:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1082c80:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1082c84:	dfc00115 	stw	ra,4(sp)
 1082c88:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1082c8c:	1082e300 	call	1082e30 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1082c90:	1082e1c0 	call	1082e1c <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1082c94:	d1262617 	ldw	r4,-26472(gp)
 1082c98:	d1662717 	ldw	r5,-26468(gp)
 1082c9c:	d1a62817 	ldw	r6,-26464(gp)
 1082ca0:	108018c0 	call	108018c <main>
 1082ca4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 1082ca8:	01000044 	movi	r4,1
 1082cac:	1082b440 	call	1082b44 <close>
  exit (result);
 1082cb0:	8009883a 	mov	r4,r16
 1082cb4:	108358c0 	call	108358c <exit>

01082cb8 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
 1082cb8:	f800283a 	ret

01082cbc <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
 1082cbc:	f800283a 	ret

01082cc0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1082cc0:	defffe04 	addi	sp,sp,-8
 1082cc4:	dc000015 	stw	r16,0(sp)
 1082cc8:	dfc00115 	stw	ra,4(sp)
 1082ccc:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1082cd0:	108027c0 	call	108027c <strlen>
 1082cd4:	800b883a 	mov	r5,r16
 1082cd8:	100d883a 	mov	r6,r2
 1082cdc:	01004234 	movhi	r4,264
 1082ce0:	210ff004 	addi	r4,r4,16320
 1082ce4:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
 1082ce8:	dfc00117 	ldw	ra,4(sp)
 1082cec:	dc000017 	ldw	r16,0(sp)
 1082cf0:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1082cf4:	10831981 	jmpi	1083198 <altera_avalon_jtag_uart_write>

01082cf8 <read>:
/*
 * Provide minimal version that just reads from the stdin device when provided.
 */

int ALT_READ (int file, void *ptr, size_t len)
{
 1082cf8:	deffff04 	addi	sp,sp,-4
 1082cfc:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
 1082d00:	000f883a 	mov	r7,zero
#if !defined(ALT_STDIN_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(read);
#endif

    switch (file) {
 1082d04:	2000051e 	bne	r4,zero,1082d1c <read+0x24>
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
 1082d08:	01004234 	movhi	r4,264
 1082d0c:	210ff004 	addi	r4,r4,16320
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
 1082d10:	dfc00017 	ldw	ra,0(sp)
 1082d14:	dec00104 	addi	sp,sp,4
#endif

    switch (file) {
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
 1082d18:	10830401 	jmpi	1083040 <altera_avalon_jtag_uart_read>
 1082d1c:	00804234 	movhi	r2,264
 1082d20:	10940204 	addi	r2,r2,20488
 1082d24:	10800017 	ldw	r2,0(r2)
 1082d28:	00c04234 	movhi	r3,264
 1082d2c:	18da2304 	addi	r3,r3,26764
 1082d30:	10000226 	beq	r2,zero,1082d3c <read+0x44>
 1082d34:	103ee83a 	callr	r2
 1082d38:	1007883a 	mov	r3,r2
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 1082d3c:	00801444 	movi	r2,81
 1082d40:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
 1082d44:	00bfffc4 	movi	r2,-1
 1082d48:	dfc00017 	ldw	ra,0(sp)
 1082d4c:	dec00104 	addi	sp,sp,4
 1082d50:	f800283a 	ret

01082d54 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1082d54:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1082d58:	00bfff84 	movi	r2,-2
 1082d5c:	2884703a 	and	r2,r5,r2
 1082d60:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1082d64:	d0a00517 	ldw	r2,-32748(gp)
 1082d68:	00ffff04 	movi	r3,-4
 1082d6c:	108000c4 	addi	r2,r2,3
 1082d70:	10c6703a 	and	r3,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1082d74:	1909883a 	add	r4,r3,r4
 1082d78:	00804434 	movhi	r2,272
 1082d7c:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1082d80:	d0e00515 	stw	r3,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1082d84:	1100032e 	bgeu	r2,r4,1082d94 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1082d88:	2801703a 	wrctl	status,r5
 1082d8c:	00ffffc4 	movi	r3,-1
 1082d90:	00000206 	br	1082d9c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 1082d94:	d1200515 	stw	r4,-32748(gp)
 1082d98:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 1082d9c:	1805883a 	mov	r2,r3
 1082da0:	f800283a 	ret

01082da4 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1082da4:	deffff04 	addi	sp,sp,-4
 1082da8:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 1082dac:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1082db0:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
 1082db4:	000f883a 	mov	r7,zero
 1082db8:	01004234 	movhi	r4,264
 1082dbc:	210ff004 	addi	r4,r4,16320
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 1082dc0:	18800526 	beq	r3,r2,1082dd8 <write+0x34>
 1082dc4:	00800084 	movi	r2,2
 1082dc8:	1880061e 	bne	r3,r2,1082de4 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 1082dcc:	01004234 	movhi	r4,264
 1082dd0:	210ff004 	addi	r4,r4,16320
 1082dd4:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
 1082dd8:	dfc00017 	ldw	ra,0(sp)
 1082ddc:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 1082de0:	10831981 	jmpi	1083198 <altera_avalon_jtag_uart_write>
 1082de4:	00804234 	movhi	r2,264
 1082de8:	10940204 	addi	r2,r2,20488
 1082dec:	10800017 	ldw	r2,0(r2)
 1082df0:	00c04234 	movhi	r3,264
 1082df4:	18da2304 	addi	r3,r3,26764
 1082df8:	10000226 	beq	r2,zero,1082e04 <write+0x60>
 1082dfc:	103ee83a 	callr	r2
 1082e00:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 1082e04:	00801444 	movi	r2,81
 1082e08:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
 1082e0c:	00bfffc4 	movi	r2,-1
 1082e10:	dfc00017 	ldw	ra,0(sp)
 1082e14:	dec00104 	addi	sp,sp,4
 1082e18:	f800283a 	ret

01082e1c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1082e1c:	01004234 	movhi	r4,264
 1082e20:	210ff004 	addi	r4,r4,16320
 1082e24:	000b883a 	mov	r5,zero
 1082e28:	000d883a 	mov	r6,zero
 1082e2c:	1082ed41 	jmpi	1082ed4 <altera_avalon_jtag_uart_init>

01082e30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1082e30:	deffff04 	addi	sp,sp,-4
 1082e34:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 1082e38:	10835840 	call	1083584 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1082e3c:	00800044 	movi	r2,1
 1082e40:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1082e44:	dfc00017 	ldw	ra,0(sp)
 1082e48:	dec00104 	addi	sp,sp,4
 1082e4c:	f800283a 	ret

01082e50 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1082e50:	21800c17 	ldw	r6,48(r4)
 1082e54:	2950000c 	andi	r5,r5,16384
 1082e58:	280b003a 	cmpeq	r5,r5,zero
 1082e5c:	00000306 	br	1082e6c <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
 1082e60:	2800021e 	bne	r5,zero,1082e6c <altera_avalon_jtag_uart_close+0x1c>
 1082e64:	00bffd44 	movi	r2,-11
 1082e68:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1082e6c:	20800d17 	ldw	r2,52(r4)
 1082e70:	11800326 	beq	r2,r6,1082e80 <altera_avalon_jtag_uart_close+0x30>
 1082e74:	20c00917 	ldw	r3,36(r4)
 1082e78:	20800117 	ldw	r2,4(r4)
 1082e7c:	18bff836 	bltu	r3,r2,1082e60 <altera_avalon_jtag_uart_close+0x10>
 1082e80:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
 1082e84:	f800283a 	ret

01082e88 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1082e88:	20c00017 	ldw	r3,0(r4)
 1082e8c:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1082e90:	1081000c 	andi	r2,r2,1024
 1082e94:	10000526 	beq	r2,zero,1082eac <altera_avalon_jtag_uart_timeout+0x24>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1082e98:	20800817 	ldw	r2,32(r4)
 1082e9c:	10810014 	ori	r2,r2,1024
 1082ea0:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
 1082ea4:	20000915 	stw	zero,36(r4)
 1082ea8:	00000606 	br	1082ec4 <altera_avalon_jtag_uart_timeout+0x3c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1082eac:	20c00917 	ldw	r3,36(r4)
 1082eb0:	00a00034 	movhi	r2,32768
 1082eb4:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
 1082eb8:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1082ebc:	10c00136 	bltu	r2,r3,1082ec4 <altera_avalon_jtag_uart_timeout+0x3c>
    sp->host_inactive++;
 1082ec0:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1082ec4:	00804234 	movhi	r2,264
 1082ec8:	109a2804 	addi	r2,r2,26784
 1082ecc:	10800017 	ldw	r2,0(r2)
 1082ed0:	f800283a 	ret

01082ed4 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1082ed4:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1082ed8:	defffd04 	addi	sp,sp,-12
 1082edc:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1082ee0:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1082ee4:	2021883a 	mov	r16,r4
 1082ee8:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1082eec:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1082ef0:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1082ef4:	2809883a 	mov	r4,r5
 1082ef8:	800f883a 	mov	r7,r16
 1082efc:	300b883a 	mov	r5,r6
 1082f00:	01804234 	movhi	r6,264
 1082f04:	318bd504 	addi	r6,r6,12116
 1082f08:	d8000015 	stw	zero,0(sp)
 1082f0c:	10834340 	call	1083434 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1082f10:	00804234 	movhi	r2,264
 1082f14:	109a2804 	addi	r2,r2,26784
 1082f18:	11400017 	ldw	r5,0(r2)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1082f1c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1082f20:	81000204 	addi	r4,r16,8
 1082f24:	01804234 	movhi	r6,264
 1082f28:	318ba204 	addi	r6,r6,11912
 1082f2c:	800f883a 	mov	r7,r16
 1082f30:	10833040 	call	1083304 <alt_alarm_start>
 1082f34:	1000030e 	bge	r2,zero,1082f44 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1082f38:	00a00034 	movhi	r2,32768
 1082f3c:	10bfffc4 	addi	r2,r2,-1
 1082f40:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1082f44:	dfc00217 	ldw	ra,8(sp)
 1082f48:	dc000117 	ldw	r16,4(sp)
 1082f4c:	dec00304 	addi	sp,sp,12
 1082f50:	f800283a 	ret

01082f54 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
 1082f54:	22000017 	ldw	r8,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1082f58:	200b883a 	mov	r5,r4
 1082f5c:	41800104 	addi	r6,r8,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1082f60:	31c00037 	ldwio	r7,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1082f64:	3880c00c 	andi	r2,r7,768
 1082f68:	10003426 	beq	r2,zero,108303c <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1082f6c:	3880400c 	andi	r2,r7,256
 1082f70:	10001926 	beq	r2,zero,1082fd8 <altera_avalon_jtag_uart_irq+0x84>
 1082f74:	2a400b17 	ldw	r9,44(r5)
 1082f78:	01000074 	movhi	r4,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1082f7c:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
 1082f80:	10800044 	addi	r2,r2,1
 1082f84:	1081ffcc 	andi	r2,r2,2047
 1082f88:	12400b26 	beq	r2,r9,1082fb8 <altera_avalon_jtag_uart_irq+0x64>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1082f8c:	41000037 	ldwio	r4,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1082f90:	20a0000c 	andi	r2,r4,32768
 1082f94:	10000826 	beq	r2,zero,1082fb8 <altera_avalon_jtag_uart_irq+0x64>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1082f98:	28c00a17 	ldw	r3,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1082f9c:	28800a17 	ldw	r2,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1082fa0:	1947883a 	add	r3,r3,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1082fa4:	10800044 	addi	r2,r2,1
 1082fa8:	1081ffcc 	andi	r2,r2,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1082fac:	19000e05 	stb	r4,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1082fb0:	28800a15 	stw	r2,40(r5)
 1082fb4:	003ff106 	br	1082f7c <altera_avalon_jtag_uart_irq+0x28>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1082fb8:	20bfffec 	andhi	r2,r4,65535
 1082fbc:	10000626 	beq	r2,zero,1082fd8 <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1082fc0:	28800817 	ldw	r2,32(r5)
 1082fc4:	00ffff84 	movi	r3,-2
 1082fc8:	10c4703a 	and	r2,r2,r3
 1082fcc:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1082fd0:	30800035 	stwio	r2,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1082fd4:	30800037 	ldwio	r2,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1082fd8:	3880800c 	andi	r2,r7,512
 1082fdc:	103fe026 	beq	r2,zero,1082f60 <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1082fe0:	3808d43a 	srli	r4,r7,16
 1082fe4:	00000906 	br	108300c <altera_avalon_jtag_uart_irq+0xb8>

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1082fe8:	28800d17 	ldw	r2,52(r5)
 1082fec:	1145883a 	add	r2,r2,r5
 1082ff0:	10820e07 	ldb	r2,2104(r2)
 1082ff4:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1082ff8:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1082ffc:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1083000:	10800044 	addi	r2,r2,1
 1083004:	1081ffcc 	andi	r2,r2,2047
 1083008:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 108300c:	203fd426 	beq	r4,zero,1082f60 <altera_avalon_jtag_uart_irq+0xc>
 1083010:	28c00d17 	ldw	r3,52(r5)
 1083014:	28800c17 	ldw	r2,48(r5)
 1083018:	18bff31e 	bne	r3,r2,1082fe8 <altera_avalon_jtag_uart_irq+0x94>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 108301c:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1083020:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1083024:	00ffff44 	movi	r3,-3
 1083028:	10c4703a 	and	r2,r2,r3
 108302c:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1083030:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1083034:	30800037 	ldwio	r2,0(r6)
 1083038:	003fc906 	br	1082f60 <altera_avalon_jtag_uart_irq+0xc>
 108303c:	f800283a 	ret

01083040 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1083040:	defff604 	addi	sp,sp,-40
 1083044:	df000815 	stw	fp,32(sp)
 1083048:	ddc00715 	stw	r23,28(sp)
 108304c:	dd400515 	stw	r21,20(sp)
 1083050:	dcc00315 	stw	r19,12(sp)
 1083054:	282f883a 	mov	r23,r5
 1083058:	2027883a 	mov	r19,r4
 108305c:	302b883a 	mov	r21,r6
 1083060:	3839883a 	mov	fp,r7
 1083064:	dfc00915 	stw	ra,36(sp)
 1083068:	dd800615 	stw	r22,24(sp)
 108306c:	dd000415 	stw	r20,16(sp)
 1083070:	dc800215 	stw	r18,8(sp)
 1083074:	dc400115 	stw	r17,4(sp)
 1083078:	dc000015 	stw	r16,0(sp)
 108307c:	00001e06 	br	10830f8 <altera_avalon_jtag_uart_read+0xb8>
 1083080:	b829883a 	mov	r20,r23

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
 1083084:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1083088:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 108308c:	00820004 	movi	r2,2048
 1083090:	1461c83a 	sub	r16,r2,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
 1083094:	b4400136 	bltu	r22,r17,108309c <altera_avalon_jtag_uart_read+0x5c>
        n = in - out;
 1083098:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 108309c:	a009883a 	mov	r4,r20
 10830a0:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
 10830a4:	80000a26 	beq	r16,zero,10830d0 <altera_avalon_jtag_uart_read+0x90>
 10830a8:	99400e04 	addi	r5,r19,56
        break; /* No more data available */

      if (n > space)
 10830ac:	ac001936 	bltu	r21,r16,1083114 <altera_avalon_jtag_uart_read+0xd4>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 10830b0:	2c4b883a 	add	r5,r5,r17
 10830b4:	1080fb00 	call	1080fb0 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10830b8:	8c05883a 	add	r2,r17,r16
 10830bc:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
 10830c0:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10830c4:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
 10830c8:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
 10830cc:	057fed16 	blt	zero,r21,1083084 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
 10830d0:	a5c01a1e 	bne	r20,r23,108313c <altera_avalon_jtag_uart_read+0xfc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10830d4:	e090000c 	andi	r2,fp,16384
 10830d8:	10000c1e 	bne	r2,zero,108310c <altera_avalon_jtag_uart_read+0xcc>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10830dc:	98800a17 	ldw	r2,40(r19)
 10830e0:	b080031e 	bne	r22,r2,10830f0 <altera_avalon_jtag_uart_read+0xb0>
 10830e4:	98c00917 	ldw	r3,36(r19)
 10830e8:	98800117 	ldw	r2,4(r19)
 10830ec:	18bffb36 	bltu	r3,r2,10830dc <altera_avalon_jtag_uart_read+0x9c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10830f0:	98800a17 	ldw	r2,40(r19)
 10830f4:	b0800326 	beq	r22,r2,1083104 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10830f8:	057fe116 	blt	zero,r21,1083080 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 10830fc:	e090000c 	andi	r2,fp,16384
 1083100:	1000021e 	bne	r2,zero,108310c <altera_avalon_jtag_uart_read+0xcc>
 1083104:	00bffec4 	movi	r2,-5
 1083108:	00001706 	br	1083168 <altera_avalon_jtag_uart_read+0x128>
 108310c:	00bffd44 	movi	r2,-11
 1083110:	00001506 	br	1083168 <altera_avalon_jtag_uart_read+0x128>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 1083114:	a009883a 	mov	r4,r20
 1083118:	a80d883a 	mov	r6,r21
 108311c:	2c4b883a 	add	r5,r5,r17
 1083120:	1080fb00 	call	1080fb0 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1083124:	8d45883a 	add	r2,r17,r21

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
 1083128:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 108312c:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
 1083130:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1083134:	98800b15 	stw	r2,44(r19)
 1083138:	003fe506 	br	10830d0 <altera_avalon_jtag_uart_read+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108313c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1083140:	00bfff84 	movi	r2,-2
 1083144:	2084703a 	and	r2,r4,r2
 1083148:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 108314c:	98800817 	ldw	r2,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1083150:	98c00017 	ldw	r3,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1083154:	10800054 	ori	r2,r2,1
 1083158:	98800815 	stw	r2,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 108315c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1083160:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
 1083164:	a5c5c83a 	sub	r2,r20,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
 1083168:	dfc00917 	ldw	ra,36(sp)
 108316c:	df000817 	ldw	fp,32(sp)
 1083170:	ddc00717 	ldw	r23,28(sp)
 1083174:	dd800617 	ldw	r22,24(sp)
 1083178:	dd400517 	ldw	r21,20(sp)
 108317c:	dd000417 	ldw	r20,16(sp)
 1083180:	dcc00317 	ldw	r19,12(sp)
 1083184:	dc800217 	ldw	r18,8(sp)
 1083188:	dc400117 	ldw	r17,4(sp)
 108318c:	dc000017 	ldw	r16,0(sp)
 1083190:	dec00a04 	addi	sp,sp,40
 1083194:	f800283a 	ret

01083198 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1083198:	defff804 	addi	sp,sp,-32
 108319c:	dd800615 	stw	r22,24(sp)
 10831a0:	dd400515 	stw	r21,20(sp)
 10831a4:	dd000415 	stw	r20,16(sp)
 10831a8:	dcc00315 	stw	r19,12(sp)
 10831ac:	dc400115 	stw	r17,4(sp)
 10831b0:	282b883a 	mov	r21,r5
 10831b4:	2023883a 	mov	r17,r4
 10831b8:	3027883a 	mov	r19,r6
 10831bc:	382d883a 	mov	r22,r7
 10831c0:	2829883a 	mov	r20,r5
 10831c4:	dfc00715 	stw	ra,28(sp)
 10831c8:	dc800215 	stw	r18,8(sp)
 10831cc:	dc000015 	stw	r16,0(sp)
 10831d0:	00001906 	br	1083238 <altera_avalon_jtag_uart_write+0xa0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10831d4:	8c800c17 	ldw	r18,48(r17)
      out = sp->tx_out;
 10831d8:	89400d17 	ldw	r5,52(r17)

      if (in < out)
 10831dc:	9140032e 	bgeu	r18,r5,10831ec <altera_avalon_jtag_uart_write+0x54>
        n = out - 1 - in;
 10831e0:	2c85c83a 	sub	r2,r5,r18
 10831e4:	10bfffc4 	addi	r2,r2,-1
 10831e8:	00000506 	br	1083200 <altera_avalon_jtag_uart_write+0x68>
      else if (out > 0)
 10831ec:	28000226 	beq	r5,zero,10831f8 <altera_avalon_jtag_uart_write+0x60>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10831f0:	00820004 	movi	r2,2048
 10831f4:	00000106 	br	10831fc <altera_avalon_jtag_uart_write+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10831f8:	0081ffc4 	movi	r2,2047
 10831fc:	1485c83a 	sub	r2,r2,r18

      if (n == 0)
 1083200:	10002926 	beq	r2,zero,10832a8 <altera_avalon_jtag_uart_write+0x110>
        break;

      if (n > count)
 1083204:	9821883a 	mov	r16,r19
 1083208:	14c0012e 	bgeu	r2,r19,1083210 <altera_avalon_jtag_uart_write+0x78>
 108320c:	1021883a 	mov	r16,r2
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 1083210:	89020e04 	addi	r4,r17,2104
 1083214:	a00b883a 	mov	r5,r20
 1083218:	2489883a 	add	r4,r4,r18
 108321c:	800d883a 	mov	r6,r16
 1083220:	1080fb00 	call	1080fb0 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1083224:	9405883a 	add	r2,r18,r16
 1083228:	1081ffcc 	andi	r2,r2,2047
 108322c:	88800c15 	stw	r2,48(r17)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
 1083230:	a429883a 	add	r20,r20,r16
      count -= n;
 1083234:	9c27c83a 	sub	r19,r19,r16
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1083238:	04ffe616 	blt	zero,r19,10831d4 <altera_avalon_jtag_uart_write+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 108323c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1083240:	00bfff84 	movi	r2,-2
 1083244:	2084703a 	and	r2,r4,r2
 1083248:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 108324c:	88800817 	ldw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1083250:	88c00017 	ldw	r3,0(r17)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1083254:	10800094 	ori	r2,r2,2
 1083258:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 108325c:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1083260:	2001703a 	wrctl	status,r4
 1083264:	00000706 	br	1083284 <altera_avalon_jtag_uart_write+0xec>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1083268:	88800d17 	ldw	r2,52(r17)
 108326c:	2880031e 	bne	r5,r2,108327c <altera_avalon_jtag_uart_write+0xe4>
 1083270:	88c00917 	ldw	r3,36(r17)
 1083274:	88800117 	ldw	r2,4(r17)
 1083278:	18bffb36 	bltu	r3,r2,1083268 <altera_avalon_jtag_uart_write+0xd0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 108327c:	88800d17 	ldw	r2,52(r17)
 1083280:	28bfed1e 	bne	r5,r2,1083238 <altera_avalon_jtag_uart_write+0xa0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1083284:	a5400226 	beq	r20,r21,1083290 <altera_avalon_jtag_uart_write+0xf8>
    return ptr - start;
 1083288:	a545c83a 	sub	r2,r20,r21
 108328c:	00001306 	br	10832dc <altera_avalon_jtag_uart_write+0x144>
  else if (flags & O_NONBLOCK)
 1083290:	b090000c 	andi	r2,r22,16384
 1083294:	10000226 	beq	r2,zero,10832a0 <altera_avalon_jtag_uart_write+0x108>
 1083298:	00bffd44 	movi	r2,-11
 108329c:	00000f06 	br	10832dc <altera_avalon_jtag_uart_write+0x144>
 10832a0:	00bffec4 	movi	r2,-5
 10832a4:	00000d06 	br	10832dc <altera_avalon_jtag_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10832a8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10832ac:	00bfff84 	movi	r2,-2
 10832b0:	2084703a 	and	r2,r4,r2
 10832b4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10832b8:	88800817 	ldw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10832bc:	88c00017 	ldw	r3,0(r17)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10832c0:	10800094 	ori	r2,r2,2
 10832c4:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10832c8:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10832cc:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
 10832d0:	b090000c 	andi	r2,r22,16384
 10832d4:	103fe426 	beq	r2,zero,1083268 <altera_avalon_jtag_uart_write+0xd0>
 10832d8:	003fea06 	br	1083284 <altera_avalon_jtag_uart_write+0xec>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
 10832dc:	dfc00717 	ldw	ra,28(sp)
 10832e0:	dd800617 	ldw	r22,24(sp)
 10832e4:	dd400517 	ldw	r21,20(sp)
 10832e8:	dd000417 	ldw	r20,16(sp)
 10832ec:	dcc00317 	ldw	r19,12(sp)
 10832f0:	dc800217 	ldw	r18,8(sp)
 10832f4:	dc400117 	ldw	r17,4(sp)
 10832f8:	dc000017 	ldw	r16,0(sp)
 10832fc:	dec00804 	addi	sp,sp,32
 1083300:	f800283a 	ret

01083304 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 1083304:	00804234 	movhi	r2,264
 1083308:	109a2804 	addi	r2,r2,26784
 108330c:	10800017 	ldw	r2,0(r2)
 1083310:	00ffde84 	movi	r3,-134
 1083314:	10001d26 	beq	r2,zero,108338c <alt_alarm_start+0x88>
  {
    if (alarm)
 1083318:	00fffa84 	movi	r3,-22
 108331c:	20001b26 	beq	r4,zero,108338c <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
 1083320:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 1083324:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1083328:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 108332c:	00bfff84 	movi	r2,-2
 1083330:	3084703a 	and	r2,r6,r2
 1083334:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1083338:	00804234 	movhi	r2,264
 108333c:	109a2904 	addi	r2,r2,26788
 1083340:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 1083344:	18800044 	addi	r2,r3,1
 1083348:	2885883a 	add	r2,r5,r2
 108334c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1083350:	10c0032e 	bgeu	r2,r3,1083360 <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
 1083354:	00800044 	movi	r2,1
 1083358:	20800405 	stb	r2,16(r4)
 108335c:	00000106 	br	1083364 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
 1083360:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1083364:	00804234 	movhi	r2,264
 1083368:	10940504 	addi	r2,r2,20500
  entry->next     = list->next;
 108336c:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1083370:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 1083374:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 1083378:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
 108337c:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 1083380:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1083384:	3001703a 	wrctl	status,r6
 1083388:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
 108338c:	1805883a 	mov	r2,r3
 1083390:	f800283a 	ret

01083394 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1083394:	f800283a 	ret

01083398 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1083398:	f800283a 	ret

0108339c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 108339c:	000530fa 	rdctl	r2,ienable
 10833a0:	00c00044 	movi	r3,1
 10833a4:	1946983a 	sll	r3,r3,r5
 10833a8:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
 10833ac:	1004c03a 	cmpne	r2,r2,zero
 10833b0:	f800283a 	ret

010833b4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10833b4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10833b8:	00bfff84 	movi	r2,-2
 10833bc:	3084703a 	and	r2,r6,r2
 10833c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 10833c4:	01004234 	movhi	r4,264
 10833c8:	211a2704 	addi	r4,r4,26780
 10833cc:	00c00044 	movi	r3,1
 10833d0:	20800017 	ldw	r2,0(r4)
 10833d4:	1946983a 	sll	r3,r3,r5
 10833d8:	10c4b03a 	or	r2,r2,r3
 10833dc:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10833e0:	20800017 	ldw	r2,0(r4)
 10833e4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10833e8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 10833ec:	0005883a 	mov	r2,zero
 10833f0:	f800283a 	ret

010833f4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10833f4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10833f8:	00bfff84 	movi	r2,-2
 10833fc:	3084703a 	and	r2,r6,r2
 1083400:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 1083404:	01004234 	movhi	r4,264
 1083408:	211a2704 	addi	r4,r4,26780
 108340c:	00ffff84 	movi	r3,-2
 1083410:	20800017 	ldw	r2,0(r4)
 1083414:	1946183a 	rol	r3,r3,r5
 1083418:	10c4703a 	and	r2,r2,r3
 108341c:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1083420:	20800017 	ldw	r2,0(r4)
 1083424:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1083428:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 108342c:	0005883a 	mov	r2,zero
 1083430:	f800283a 	ret

01083434 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1083434:	10834381 	jmpi	1083438 <alt_iic_isr_register>

01083438 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1083438:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 108343c:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1083440:	dfc00115 	stw	ra,4(sp)
 1083444:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1083448:	00fffa84 	movi	r3,-22
 108344c:	11401016 	blt	r2,r5,1083490 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1083450:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1083454:	00bfff84 	movi	r2,-2
 1083458:	8084703a 	and	r2,r16,r2
 108345c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 1083460:	280490fa 	slli	r2,r5,3
 1083464:	00c04234 	movhi	r3,264
 1083468:	18da3404 	addi	r3,r3,26832
 108346c:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
 1083470:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 1083474:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1083478:	30000226 	beq	r6,zero,1083484 <alt_iic_isr_register+0x4c>
 108347c:	10833b40 	call	10833b4 <alt_ic_irq_enable>
 1083480:	00000106 	br	1083488 <alt_iic_isr_register+0x50>
 1083484:	10833f40 	call	10833f4 <alt_ic_irq_disable>
 1083488:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 108348c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 1083490:	1805883a 	mov	r2,r3
 1083494:	dfc00117 	ldw	ra,4(sp)
 1083498:	dc000017 	ldw	r16,0(sp)
 108349c:	dec00204 	addi	sp,sp,8
 10834a0:	f800283a 	ret

010834a4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10834a4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10834a8:	00bfff84 	movi	r2,-2
 10834ac:	2884703a 	and	r2,r5,r2
 10834b0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10834b4:	20c00017 	ldw	r3,0(r4)
 10834b8:	20800117 	ldw	r2,4(r4)
 10834bc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10834c0:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10834c4:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
 10834c8:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
 10834cc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10834d0:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 10834d4:	f800283a 	ret

010834d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10834d8:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10834dc:	d0a62b17 	ldw	r2,-26452(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10834e0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10834e4:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10834e8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10834ec:	dfc00215 	stw	ra,8(sp)
 10834f0:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10834f4:	d0a62b15 	stw	r2,-26452(gp)
 10834f8:	00001b06 	br	1083568 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10834fc:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 1083500:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1083504:	10000326 	beq	r2,zero,1083514 <alt_tick+0x3c>
 1083508:	d0a62b17 	ldw	r2,-26452(gp)
 108350c:	1000011e 	bne	r2,zero,1083514 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
 1083510:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1083514:	d0e62b17 	ldw	r3,-26452(gp)
 1083518:	80800217 	ldw	r2,8(r16)
 108351c:	18801136 	bltu	r3,r2,1083564 <alt_tick+0x8c>
 1083520:	80800403 	ldbu	r2,16(r16)
 1083524:	10000f1e 	bne	r2,zero,1083564 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
 1083528:	81000517 	ldw	r4,20(r16)
 108352c:	80800317 	ldw	r2,12(r16)
 1083530:	103ee83a 	callr	r2
 1083534:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1083538:	1000031e 	bne	r2,zero,1083548 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
 108353c:	8009883a 	mov	r4,r16
 1083540:	10834a40 	call	10834a4 <alt_alarm_stop>
 1083544:	00000706 	br	1083564 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
 1083548:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 108354c:	d0e62b17 	ldw	r3,-26452(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 1083550:	1105883a 	add	r2,r2,r4
 1083554:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1083558:	10c0022e 	bgeu	r2,r3,1083564 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
 108355c:	00800044 	movi	r2,1
 1083560:	80800405 	stb	r2,16(r16)
 1083564:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1083568:	d0a00704 	addi	r2,gp,-32740
 108356c:	80bfe31e 	bne	r16,r2,10834fc <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1083570:	dfc00217 	ldw	ra,8(sp)
 1083574:	dc400117 	ldw	r17,4(sp)
 1083578:	dc000017 	ldw	r16,0(sp)
 108357c:	dec00304 	addi	sp,sp,12
 1083580:	f800283a 	ret

01083584 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1083584:	000170fa 	wrctl	ienable,zero
}
 1083588:	f800283a 	ret

0108358c <exit>:
 108358c:	defffe04 	addi	sp,sp,-8
 1083590:	000b883a 	mov	r5,zero
 1083594:	dc000015 	stw	r16,0(sp)
 1083598:	dfc00115 	stw	ra,4(sp)
 108359c:	2021883a 	mov	r16,r4
 10835a0:	10835c80 	call	10835c8 <__call_exitprocs>
 10835a4:	00804234 	movhi	r2,264
 10835a8:	1093ff04 	addi	r2,r2,20476
 10835ac:	11000017 	ldw	r4,0(r2)
 10835b0:	20800f17 	ldw	r2,60(r4)
 10835b4:	10000126 	beq	r2,zero,10835bc <exit+0x30>
 10835b8:	103ee83a 	callr	r2
 10835bc:	8009883a 	mov	r4,r16
 10835c0:	10837780 	call	1083778 <_exit>

010835c4 <register_fini>:
 10835c4:	f800283a 	ret

010835c8 <__call_exitprocs>:
 10835c8:	00804234 	movhi	r2,264
 10835cc:	1093ff04 	addi	r2,r2,20476
 10835d0:	10800017 	ldw	r2,0(r2)
 10835d4:	defff304 	addi	sp,sp,-52
 10835d8:	df000b15 	stw	fp,44(sp)
 10835dc:	d8800115 	stw	r2,4(sp)
 10835e0:	00800034 	movhi	r2,0
 10835e4:	10800004 	addi	r2,r2,0
 10835e8:	1005003a 	cmpeq	r2,r2,zero
 10835ec:	d8800215 	stw	r2,8(sp)
 10835f0:	d8800117 	ldw	r2,4(sp)
 10835f4:	dd400815 	stw	r21,32(sp)
 10835f8:	dd000715 	stw	r20,28(sp)
 10835fc:	10805204 	addi	r2,r2,328
 1083600:	dfc00c15 	stw	ra,48(sp)
 1083604:	ddc00a15 	stw	r23,40(sp)
 1083608:	dd800915 	stw	r22,36(sp)
 108360c:	dcc00615 	stw	r19,24(sp)
 1083610:	dc800515 	stw	r18,20(sp)
 1083614:	dc400415 	stw	r17,16(sp)
 1083618:	dc000315 	stw	r16,12(sp)
 108361c:	282b883a 	mov	r21,r5
 1083620:	2039883a 	mov	fp,r4
 1083624:	d8800015 	stw	r2,0(sp)
 1083628:	2829003a 	cmpeq	r20,r5,zero
 108362c:	d8800117 	ldw	r2,4(sp)
 1083630:	14405217 	ldw	r17,328(r2)
 1083634:	88001026 	beq	r17,zero,1083678 <__call_exitprocs+0xb0>
 1083638:	ddc00017 	ldw	r23,0(sp)
 108363c:	88800117 	ldw	r2,4(r17)
 1083640:	8c802204 	addi	r18,r17,136
 1083644:	143fffc4 	addi	r16,r2,-1
 1083648:	80000916 	blt	r16,zero,1083670 <__call_exitprocs+0xa8>
 108364c:	05bfffc4 	movi	r22,-1
 1083650:	a000151e 	bne	r20,zero,10836a8 <__call_exitprocs+0xe0>
 1083654:	8409883a 	add	r4,r16,r16
 1083658:	2105883a 	add	r2,r4,r4
 108365c:	1485883a 	add	r2,r2,r18
 1083660:	10c02017 	ldw	r3,128(r2)
 1083664:	a8c01126 	beq	r21,r3,10836ac <__call_exitprocs+0xe4>
 1083668:	843fffc4 	addi	r16,r16,-1
 108366c:	85bff81e 	bne	r16,r22,1083650 <__call_exitprocs+0x88>
 1083670:	d8800217 	ldw	r2,8(sp)
 1083674:	10003126 	beq	r2,zero,108373c <__call_exitprocs+0x174>
 1083678:	dfc00c17 	ldw	ra,48(sp)
 108367c:	df000b17 	ldw	fp,44(sp)
 1083680:	ddc00a17 	ldw	r23,40(sp)
 1083684:	dd800917 	ldw	r22,36(sp)
 1083688:	dd400817 	ldw	r21,32(sp)
 108368c:	dd000717 	ldw	r20,28(sp)
 1083690:	dcc00617 	ldw	r19,24(sp)
 1083694:	dc800517 	ldw	r18,20(sp)
 1083698:	dc400417 	ldw	r17,16(sp)
 108369c:	dc000317 	ldw	r16,12(sp)
 10836a0:	dec00d04 	addi	sp,sp,52
 10836a4:	f800283a 	ret
 10836a8:	8409883a 	add	r4,r16,r16
 10836ac:	88c00117 	ldw	r3,4(r17)
 10836b0:	2105883a 	add	r2,r4,r4
 10836b4:	1445883a 	add	r2,r2,r17
 10836b8:	18ffffc4 	addi	r3,r3,-1
 10836bc:	11800217 	ldw	r6,8(r2)
 10836c0:	1c001526 	beq	r3,r16,1083718 <__call_exitprocs+0x150>
 10836c4:	10000215 	stw	zero,8(r2)
 10836c8:	303fe726 	beq	r6,zero,1083668 <__call_exitprocs+0xa0>
 10836cc:	00c00044 	movi	r3,1
 10836d0:	1c06983a 	sll	r3,r3,r16
 10836d4:	90804017 	ldw	r2,256(r18)
 10836d8:	8cc00117 	ldw	r19,4(r17)
 10836dc:	1884703a 	and	r2,r3,r2
 10836e0:	10001426 	beq	r2,zero,1083734 <__call_exitprocs+0x16c>
 10836e4:	90804117 	ldw	r2,260(r18)
 10836e8:	1884703a 	and	r2,r3,r2
 10836ec:	10000c1e 	bne	r2,zero,1083720 <__call_exitprocs+0x158>
 10836f0:	2105883a 	add	r2,r4,r4
 10836f4:	1485883a 	add	r2,r2,r18
 10836f8:	11400017 	ldw	r5,0(r2)
 10836fc:	e009883a 	mov	r4,fp
 1083700:	303ee83a 	callr	r6
 1083704:	88800117 	ldw	r2,4(r17)
 1083708:	98bfc81e 	bne	r19,r2,108362c <__call_exitprocs+0x64>
 108370c:	b8800017 	ldw	r2,0(r23)
 1083710:	147fd526 	beq	r2,r17,1083668 <__call_exitprocs+0xa0>
 1083714:	003fc506 	br	108362c <__call_exitprocs+0x64>
 1083718:	8c000115 	stw	r16,4(r17)
 108371c:	003fea06 	br	10836c8 <__call_exitprocs+0x100>
 1083720:	2105883a 	add	r2,r4,r4
 1083724:	1485883a 	add	r2,r2,r18
 1083728:	11000017 	ldw	r4,0(r2)
 108372c:	303ee83a 	callr	r6
 1083730:	003ff406 	br	1083704 <__call_exitprocs+0x13c>
 1083734:	303ee83a 	callr	r6
 1083738:	003ff206 	br	1083704 <__call_exitprocs+0x13c>
 108373c:	88800117 	ldw	r2,4(r17)
 1083740:	1000081e 	bne	r2,zero,1083764 <__call_exitprocs+0x19c>
 1083744:	89000017 	ldw	r4,0(r17)
 1083748:	20000726 	beq	r4,zero,1083768 <__call_exitprocs+0x1a0>
 108374c:	b9000015 	stw	r4,0(r23)
 1083750:	8809883a 	mov	r4,r17
 1083754:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
 1083758:	bc400017 	ldw	r17,0(r23)
 108375c:	883fb71e 	bne	r17,zero,108363c <__call_exitprocs+0x74>
 1083760:	003fc506 	br	1083678 <__call_exitprocs+0xb0>
 1083764:	89000017 	ldw	r4,0(r17)
 1083768:	882f883a 	mov	r23,r17
 108376c:	2023883a 	mov	r17,r4
 1083770:	883fb21e 	bne	r17,zero,108363c <__call_exitprocs+0x74>
 1083774:	003fc006 	br	1083678 <__call_exitprocs+0xb0>

01083778 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1083778:	20000226 	beq	r4,zero,1083784 <_exit+0xc>
    ALT_SIM_FAIL();
 108377c:	002af070 	cmpltui	zero,zero,43969
 1083780:	00000106 	br	1083788 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
 1083784:	002af0b0 	cmpltui	zero,zero,43970
 1083788:	003fff06 	br	1083788 <_exit+0x10>
 108378c:	010835c4 	movi	r4,8407
