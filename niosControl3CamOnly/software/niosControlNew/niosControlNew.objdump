
niosControlNew.elf:     file format elf32-littlenios2
niosControlNew.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000490 memsz 0x00000490 flags r-x
    LOAD off    0x00001490 vaddr 0x00800490 paddr 0x008008a0 align 2**12
         filesz 0x00000410 memsz 0x00000410 flags rw-
    LOAD off    0x00001cb0 vaddr 0x00800cb0 paddr 0x00800cb0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00002000 vaddr 0x01004000 paddr 0x01004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01004000  01004000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000474  00800000  00800000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  00800474  00800474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000410  00800490  008008a0  00001490  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00800cb0  00800cb0  00001cb0  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002a7  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002948  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000bcd  00000000  00000000  00004e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000024b5  00000000  00000000  000059ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000244  00000000  00000000  00007ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000bb5  00000000  00000000  000080e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000037e  00000000  00000000  00008c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000901c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00009030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00009fd7  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00009fda  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00009fdf  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00009fe0  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00009fe4  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  00009fe8  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00009fec  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00009ff7  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000a002  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000014  00000000  00000000  0000a00d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000034  00000000  00000000  0000a021  2**0
                  CONTENTS, READONLY
 27 .jdi          0000497d  00000000  00000000  0000a055  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01004000 l    d  .entry	00000000 .entry
00800000 l    d  .text	00000000 .text
00800474 l    d  .rodata	00000000 .rodata
00800490 l    d  .rwdata	00000000 .rwdata
00800cb0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00800054 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00800490 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008002a8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
008000e0 g     F .text	0000003c alt_main
008008a0 g       *ABS*	00000000 __flash_rwdata_start
0080011c g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
01004000 g     F .entry	0000000c __reset
00800000 g       *ABS*	00000000 __flash_exceptions_start
00800cbc g     O .bss	00000004 errno
00800cb4 g     O .bss	00000004 alt_argv
00808890 g       *ABS*	00000000 _gp
008001f4 g     F .text	00000008 altera_nios2_irq_init
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0080089c g     O .rwdata	00000004 _global_impure_ptr
00800cc0 g       *ABS*	00000000 __bss_end
008001ec g     F .text	00000004 alt_dcache_flush_all
008008a0 g       *ABS*	00000000 __ram_rwdata_end
00800490 g       *ABS*	00000000 __ram_rodata_end
00800890 g     O .rwdata	00000004 jtag_uart_0
00800cc0 g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
00800178 g     F .text	00000034 altera_avalon_jtag_uart_write
008002ac g     F .text	000001b0 __call_exitprocs
00800000 g     F .text	0000003c _start
00800154 g     F .text	00000004 alt_sys_init
00800490 g       *ABS*	00000000 __ram_rwdata_start
00800474 g       *ABS*	00000000 __ram_rodata_start
00800cc0 g       *ABS*	00000000 __alt_stack_base
00800cb0 g       *ABS*	00000000 __bss_start
0080003c g     F .text	00000018 main
00800cb8 g     O .bss	00000004 alt_envp
00800894 g     O .rwdata	00000004 alt_errno
00800474 g       *ABS*	00000000 __flash_rodata_start
00800158 g     F .text	00000020 alt_irq_init
00800898 g     O .rwdata	00000004 _impure_ptr
00800cb0 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
01004020 g       *ABS*	00000000 __ram_exceptions_start
008008a0 g       *ABS*	00000000 _edata
00800cc0 g       *ABS*	00000000 _end
01004020 g       *ABS*	00000000 __ram_exceptions_end
008001fc g     F .text	00000038 exit
01000000 g       *ABS*	00000000 __alt_data_end
0080045c g     F .text	00000014 _exit
00800234 g     F .text	00000074 strlen
008001f0 g     F .text	00000004 alt_icache_flush_all
008001ac g     F .text	00000040 close
00800074 g     F .text	0000006c alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

01004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1004000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1004004:	08400014 	ori	at,at,0
    jmp r1
 1004008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00800000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800008:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80000c:	d6a22414 	ori	gp,gp,34960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800014:	10832c14 	ori	r2,r2,3248

    movhi r3, %hi(__bss_end)
  800018:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80001c:	18c33014 	ori	r3,r3,3264

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800030:	08000740 	call	800074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800034:	08000e00 	call	8000e0 <alt_main>

00800038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800038:	003fff06 	br	800038 <alt_after_alt_main>

0080003c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
  80003c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  800040:	01002034 	movhi	r4,128
  800044:	21011d04 	addi	r4,r4,1140
 */

#include "sys/alt_stdio.h"

int main()
{ 
  800048:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  80004c:	080011c0 	call	80011c <alt_putstr>
  800050:	003fff06 	br	800050 <main+0x14>

00800054 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  800054:	2900051e 	bne	r5,r4,80006c <alt_load_section+0x18>
  800058:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
  80005c:	20800017 	ldw	r2,0(r4)
  800060:	21000104 	addi	r4,r4,4
  800064:	28800015 	stw	r2,0(r5)
  800068:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80006c:	29bffb1e 	bne	r5,r6,80005c <alt_load_section+0x8>
  800070:	f800283a 	ret

00800074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800074:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800078:	01002034 	movhi	r4,128
  80007c:	21022804 	addi	r4,r4,2208
  800080:	01402034 	movhi	r5,128
  800084:	29412404 	addi	r5,r5,1168
  800088:	01802034 	movhi	r6,128
  80008c:	31822804 	addi	r6,r6,2208
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800090:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800094:	08000540 	call	800054 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800098:	01002034 	movhi	r4,128
  80009c:	21000004 	addi	r4,r4,0
  8000a0:	01404034 	movhi	r5,256
  8000a4:	29500804 	addi	r5,r5,16416
  8000a8:	01804034 	movhi	r6,256
  8000ac:	31900804 	addi	r6,r6,16416
  8000b0:	08000540 	call	800054 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8000b4:	01002034 	movhi	r4,128
  8000b8:	21011d04 	addi	r4,r4,1140
  8000bc:	01402034 	movhi	r5,128
  8000c0:	29411d04 	addi	r5,r5,1140
  8000c4:	01802034 	movhi	r6,128
  8000c8:	31812404 	addi	r6,r6,1168
  8000cc:	08000540 	call	800054 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8000d0:	08001ec0 	call	8001ec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  8000d4:	dfc00017 	ldw	ra,0(sp)
  8000d8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8000dc:	08001f01 	jmpi	8001f0 <alt_icache_flush_all>

008000e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8000e0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8000e4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8000e8:	dfc00115 	stw	ra,4(sp)
  8000ec:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8000f0:	08001580 	call	800158 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8000f4:	08001540 	call	800154 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8000f8:	d1210817 	ldw	r4,-31712(gp)
  8000fc:	d1610917 	ldw	r5,-31708(gp)
  800100:	d1a10a17 	ldw	r6,-31704(gp)
  800104:	080003c0 	call	80003c <main>
  800108:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
  80010c:	01000044 	movi	r4,1
  800110:	08001ac0 	call	8001ac <close>
  exit (result);
  800114:	8009883a 	mov	r4,r16
  800118:	08001fc0 	call	8001fc <exit>

0080011c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  80011c:	defffe04 	addi	sp,sp,-8
  800120:	dc000015 	stw	r16,0(sp)
  800124:	dfc00115 	stw	ra,4(sp)
  800128:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  80012c:	08002340 	call	800234 <strlen>
  800130:	800b883a 	mov	r5,r16
  800134:	100d883a 	mov	r6,r2
  800138:	01002034 	movhi	r4,128
  80013c:	21022404 	addi	r4,r4,2192
  800140:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
  800144:	dfc00117 	ldw	ra,4(sp)
  800148:	dc000017 	ldw	r16,0(sp)
  80014c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  800150:	08001781 	jmpi	800178 <altera_avalon_jtag_uart_write>

00800154 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
  800154:	f800283a 	ret

00800158 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800158:	deffff04 	addi	sp,sp,-4
  80015c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  800160:	08001f40 	call	8001f4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800164:	00800044 	movi	r2,1
  800168:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80016c:	dfc00017 	ldw	ra,0(sp)
  800170:	dec00104 	addi	sp,sp,4
  800174:	f800283a 	ret

00800178 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  800178:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
  80017c:	298f883a 	add	r7,r5,r6
  800180:	20c00104 	addi	r3,r4,4
  800184:	00000606 	br	8001a0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  800188:	18800037 	ldwio	r2,0(r3)
  80018c:	10bfffec 	andhi	r2,r2,65535
  800190:	10000326 	beq	r2,zero,8001a0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  800194:	28800007 	ldb	r2,0(r5)
  800198:	29400044 	addi	r5,r5,1
  80019c:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8001a0:	29fff936 	bltu	r5,r7,800188 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
  8001a4:	3005883a 	mov	r2,r6
  8001a8:	f800283a 	ret

008001ac <close>:
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
  8001ac:	deffff04 	addi	sp,sp,-4
  8001b0:	dfc00015 	stw	ra,0(sp)

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8001b4:	00802034 	movhi	r2,128
  8001b8:	10822504 	addi	r2,r2,2196
  8001bc:	10800017 	ldw	r2,0(r2)
  8001c0:	00c02034 	movhi	r3,128
  8001c4:	18c32f04 	addi	r3,r3,3260
  8001c8:	10000226 	beq	r2,zero,8001d4 <close+0x28>
  8001cc:	103ee83a 	callr	r2
  8001d0:	1007883a 	mov	r3,r2
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
  8001d4:	00801604 	movi	r2,88
  8001d8:	18800015 	stw	r2,0(r3)
  return -1;
}
  8001dc:	00bfffc4 	movi	r2,-1
  8001e0:	dfc00017 	ldw	ra,0(sp)
  8001e4:	dec00104 	addi	sp,sp,4
  8001e8:	f800283a 	ret

008001ec <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8001ec:	f800283a 	ret

008001f0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  8001f0:	f800283a 	ret

008001f4 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8001f4:	000170fa 	wrctl	ienable,zero
}
  8001f8:	f800283a 	ret

008001fc <exit>:
  8001fc:	defffe04 	addi	sp,sp,-8
  800200:	000b883a 	mov	r5,zero
  800204:	dc000015 	stw	r16,0(sp)
  800208:	dfc00115 	stw	ra,4(sp)
  80020c:	2021883a 	mov	r16,r4
  800210:	08002ac0 	call	8002ac <__call_exitprocs>
  800214:	00802034 	movhi	r2,128
  800218:	10822704 	addi	r2,r2,2204
  80021c:	11000017 	ldw	r4,0(r2)
  800220:	20800f17 	ldw	r2,60(r4)
  800224:	10000126 	beq	r2,zero,80022c <exit+0x30>
  800228:	103ee83a 	callr	r2
  80022c:	8009883a 	mov	r4,r16
  800230:	080045c0 	call	80045c <_exit>

00800234 <strlen>:
  800234:	208000cc 	andi	r2,r4,3
  800238:	2011883a 	mov	r8,r4
  80023c:	1000161e 	bne	r2,zero,800298 <strlen+0x64>
  800240:	20c00017 	ldw	r3,0(r4)
  800244:	017fbff4 	movhi	r5,65279
  800248:	297fbfc4 	addi	r5,r5,-257
  80024c:	01e02074 	movhi	r7,32897
  800250:	39e02004 	addi	r7,r7,-32640
  800254:	1945883a 	add	r2,r3,r5
  800258:	11c4703a 	and	r2,r2,r7
  80025c:	00c6303a 	nor	r3,zero,r3
  800260:	1886703a 	and	r3,r3,r2
  800264:	18000c1e 	bne	r3,zero,800298 <strlen+0x64>
  800268:	280d883a 	mov	r6,r5
  80026c:	380b883a 	mov	r5,r7
  800270:	21000104 	addi	r4,r4,4
  800274:	20800017 	ldw	r2,0(r4)
  800278:	1187883a 	add	r3,r2,r6
  80027c:	1946703a 	and	r3,r3,r5
  800280:	0084303a 	nor	r2,zero,r2
  800284:	10c4703a 	and	r2,r2,r3
  800288:	103ff926 	beq	r2,zero,800270 <strlen+0x3c>
  80028c:	20800007 	ldb	r2,0(r4)
  800290:	10000326 	beq	r2,zero,8002a0 <strlen+0x6c>
  800294:	21000044 	addi	r4,r4,1
  800298:	20800007 	ldb	r2,0(r4)
  80029c:	103ffd1e 	bne	r2,zero,800294 <strlen+0x60>
  8002a0:	2205c83a 	sub	r2,r4,r8
  8002a4:	f800283a 	ret

008002a8 <register_fini>:
  8002a8:	f800283a 	ret

008002ac <__call_exitprocs>:
  8002ac:	00802034 	movhi	r2,128
  8002b0:	10822704 	addi	r2,r2,2204
  8002b4:	10800017 	ldw	r2,0(r2)
  8002b8:	defff304 	addi	sp,sp,-52
  8002bc:	df000b15 	stw	fp,44(sp)
  8002c0:	d8800115 	stw	r2,4(sp)
  8002c4:	00800034 	movhi	r2,0
  8002c8:	10800004 	addi	r2,r2,0
  8002cc:	1005003a 	cmpeq	r2,r2,zero
  8002d0:	d8800215 	stw	r2,8(sp)
  8002d4:	d8800117 	ldw	r2,4(sp)
  8002d8:	dd400815 	stw	r21,32(sp)
  8002dc:	dd000715 	stw	r20,28(sp)
  8002e0:	10805204 	addi	r2,r2,328
  8002e4:	dfc00c15 	stw	ra,48(sp)
  8002e8:	ddc00a15 	stw	r23,40(sp)
  8002ec:	dd800915 	stw	r22,36(sp)
  8002f0:	dcc00615 	stw	r19,24(sp)
  8002f4:	dc800515 	stw	r18,20(sp)
  8002f8:	dc400415 	stw	r17,16(sp)
  8002fc:	dc000315 	stw	r16,12(sp)
  800300:	282b883a 	mov	r21,r5
  800304:	2039883a 	mov	fp,r4
  800308:	d8800015 	stw	r2,0(sp)
  80030c:	2829003a 	cmpeq	r20,r5,zero
  800310:	d8800117 	ldw	r2,4(sp)
  800314:	14405217 	ldw	r17,328(r2)
  800318:	88001026 	beq	r17,zero,80035c <__call_exitprocs+0xb0>
  80031c:	ddc00017 	ldw	r23,0(sp)
  800320:	88800117 	ldw	r2,4(r17)
  800324:	8c802204 	addi	r18,r17,136
  800328:	143fffc4 	addi	r16,r2,-1
  80032c:	80000916 	blt	r16,zero,800354 <__call_exitprocs+0xa8>
  800330:	05bfffc4 	movi	r22,-1
  800334:	a000151e 	bne	r20,zero,80038c <__call_exitprocs+0xe0>
  800338:	8409883a 	add	r4,r16,r16
  80033c:	2105883a 	add	r2,r4,r4
  800340:	1485883a 	add	r2,r2,r18
  800344:	10c02017 	ldw	r3,128(r2)
  800348:	a8c01126 	beq	r21,r3,800390 <__call_exitprocs+0xe4>
  80034c:	843fffc4 	addi	r16,r16,-1
  800350:	85bff81e 	bne	r16,r22,800334 <__call_exitprocs+0x88>
  800354:	d8800217 	ldw	r2,8(sp)
  800358:	10003126 	beq	r2,zero,800420 <__call_exitprocs+0x174>
  80035c:	dfc00c17 	ldw	ra,48(sp)
  800360:	df000b17 	ldw	fp,44(sp)
  800364:	ddc00a17 	ldw	r23,40(sp)
  800368:	dd800917 	ldw	r22,36(sp)
  80036c:	dd400817 	ldw	r21,32(sp)
  800370:	dd000717 	ldw	r20,28(sp)
  800374:	dcc00617 	ldw	r19,24(sp)
  800378:	dc800517 	ldw	r18,20(sp)
  80037c:	dc400417 	ldw	r17,16(sp)
  800380:	dc000317 	ldw	r16,12(sp)
  800384:	dec00d04 	addi	sp,sp,52
  800388:	f800283a 	ret
  80038c:	8409883a 	add	r4,r16,r16
  800390:	88c00117 	ldw	r3,4(r17)
  800394:	2105883a 	add	r2,r4,r4
  800398:	1445883a 	add	r2,r2,r17
  80039c:	18ffffc4 	addi	r3,r3,-1
  8003a0:	11800217 	ldw	r6,8(r2)
  8003a4:	1c001526 	beq	r3,r16,8003fc <__call_exitprocs+0x150>
  8003a8:	10000215 	stw	zero,8(r2)
  8003ac:	303fe726 	beq	r6,zero,80034c <__call_exitprocs+0xa0>
  8003b0:	00c00044 	movi	r3,1
  8003b4:	1c06983a 	sll	r3,r3,r16
  8003b8:	90804017 	ldw	r2,256(r18)
  8003bc:	8cc00117 	ldw	r19,4(r17)
  8003c0:	1884703a 	and	r2,r3,r2
  8003c4:	10001426 	beq	r2,zero,800418 <__call_exitprocs+0x16c>
  8003c8:	90804117 	ldw	r2,260(r18)
  8003cc:	1884703a 	and	r2,r3,r2
  8003d0:	10000c1e 	bne	r2,zero,800404 <__call_exitprocs+0x158>
  8003d4:	2105883a 	add	r2,r4,r4
  8003d8:	1485883a 	add	r2,r2,r18
  8003dc:	11400017 	ldw	r5,0(r2)
  8003e0:	e009883a 	mov	r4,fp
  8003e4:	303ee83a 	callr	r6
  8003e8:	88800117 	ldw	r2,4(r17)
  8003ec:	98bfc81e 	bne	r19,r2,800310 <__call_exitprocs+0x64>
  8003f0:	b8800017 	ldw	r2,0(r23)
  8003f4:	147fd526 	beq	r2,r17,80034c <__call_exitprocs+0xa0>
  8003f8:	003fc506 	br	800310 <__call_exitprocs+0x64>
  8003fc:	8c000115 	stw	r16,4(r17)
  800400:	003fea06 	br	8003ac <__call_exitprocs+0x100>
  800404:	2105883a 	add	r2,r4,r4
  800408:	1485883a 	add	r2,r2,r18
  80040c:	11000017 	ldw	r4,0(r2)
  800410:	303ee83a 	callr	r6
  800414:	003ff406 	br	8003e8 <__call_exitprocs+0x13c>
  800418:	303ee83a 	callr	r6
  80041c:	003ff206 	br	8003e8 <__call_exitprocs+0x13c>
  800420:	88800117 	ldw	r2,4(r17)
  800424:	1000081e 	bne	r2,zero,800448 <__call_exitprocs+0x19c>
  800428:	89000017 	ldw	r4,0(r17)
  80042c:	20000726 	beq	r4,zero,80044c <__call_exitprocs+0x1a0>
  800430:	b9000015 	stw	r4,0(r23)
  800434:	8809883a 	mov	r4,r17
  800438:	00000000 	call	0 <_start-0x800000>
  80043c:	bc400017 	ldw	r17,0(r23)
  800440:	883fb71e 	bne	r17,zero,800320 <__call_exitprocs+0x74>
  800444:	003fc506 	br	80035c <__call_exitprocs+0xb0>
  800448:	89000017 	ldw	r4,0(r17)
  80044c:	882f883a 	mov	r23,r17
  800450:	2023883a 	mov	r17,r4
  800454:	883fb21e 	bne	r17,zero,800320 <__call_exitprocs+0x74>
  800458:	003fc006 	br	80035c <__call_exitprocs+0xb0>

0080045c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80045c:	20000226 	beq	r4,zero,800468 <_exit+0xc>
    ALT_SIM_FAIL();
  800460:	002af070 	cmpltui	zero,zero,43969
  800464:	00000106 	br	80046c <_exit+0x10>
  } else {
    ALT_SIM_PASS();
  800468:	002af0b0 	cmpltui	zero,zero,43970
  80046c:	003fff06 	br	80046c <_exit+0x10>
  800470:	008002a8 	cmpgeui	r2,zero,10
