// file:        sift-driver.cpp
// author:      Andrea Vedaldi
// description: SIFT command line utility implementation

// AUTORIGTHS

#include"sift.hpp"
#include<sys/alt_timestamp.h>
#include  "altera_avalon_pio_regs.h"
#include "system.h"
#define EXP_MACRO2(A) __builtin_custom_fnf(0x00, (A));
#include<string>
#include<iostream>
#include<iomanip>
#include<fstream>
#include<sstream>
#include<algorithm>
#include<bitset>
#include <unistd.h>

extern "C" {
#include<getopt.h>
#include<assert.h>
#include<io.h>
}
#include<memory>

using namespace std ;

#define IMAGE_WIDTH 320
#define IMAGE_HEIGHT 240

#define NUM_DESCR 89
static unsigned char baselineDesc[NUM_DESCR][128] =
{
		{2,1,18,26,0,0,0,0,18,2,5,3,0,0,7,25,13,0,0,0,0,0,36,46,0,0,0,0,0,0,57,35,20,2,0,4,1,0,0,6,123,6,0,0,0,0,59,139,17,0,0,0,0,0,139,138,0,0,0,0,0,0,139,60,27,5,0,0,0,7,10,1,139,74,0,0,0,0,6,29,111,24,3,1,0,0,37,34,0,0,11,5,0,0,26,7,4,0,0,0,0,75,139,2,139,37,3,3,3,17,113,49,81,36,121,50,7,1,3,8,0,2,139,26,0,0,0,0},
		{19,13,2,2,1,0,0,0,138,6,0,0,0,0,0,59,138,0,0,0,1,0,0,60,2,0,0,22,29,1,0,1,25,35,6,2,2,0,0,0,138,54,7,0,0,0,0,61,107,39,36,0,0,0,0,29,0,4,13,56,105,3,0,0,11,23,6,2,8,1,0,0,86,138,100,0,0,0,0,3,15,138,138,0,0,0,0,1,32,84,135,33,65,24,8,14,0,0,0,0,8,16,0,0,0,12,18,0,1,2,0,3,25,29,52,0,0,0,0,68,129,33,18,0,0,5,13,138},
		{15,2,0,1,10,1,5,24,143,57,0,0,0,3,9,13,143,73,0,0,4,12,0,0,2,2,0,0,9,34,0,0,34,11,5,3,10,11,24,79,120,35,5,7,29,31,26,30,143,95,0,0,3,7,1,16,20,3,0,0,15,34,1,1,52,18,9,24,26,9,31,58,48,9,8,6,12,7,122,128,143,22,0,0,3,4,16,127,33,2,0,0,25,25,2,6,143,18,2,26,9,0,9,29,91,10,0,3,53,22,49,36,143,66,0,2,16,3,3,10,34,14,0,0,18,9,0,0},
		{30,53,40,1,0,0,0,86,139,139,15,0,0,0,0,103,139,94,0,0,0,0,0,2,7,3,0,0,0,0,0,0,10,0,0,0,0,0,1,139,102,23,1,3,0,0,0,139,139,61,0,0,0,0,0,4,28,5,0,0,0,0,0,0,1,0,0,14,5,0,2,139,93,4,1,14,3,0,0,33,139,5,0,0,0,0,0,64,28,0,0,0,0,0,0,6,2,0,0,20,10,0,0,7,113,0,0,4,1,0,0,61,139,0,0,0,0,0,0,78,6,0,0,0,0,0,0,4},
		{14,12,62,9,0,17,63,14,172,35,10,0,0,0,11,53,123,2,0,0,0,0,0,5,0,0,0,0,0,0,0,0,21,21,87,8,0,13,73,19,172,53,13,0,0,0,11,58,148,3,0,0,0,0,0,6,0,0,0,0,0,0,0,0,20,21,79,5,0,12,79,19,172,59,11,0,0,0,10,53,147,4,0,0,0,0,0,4,0,0,0,0,0,0,0,0,15,16,76,8,0,10,61,14,172,48,12,0,0,0,9,45,115,2,0,0,0,0,0,5,0,0,0,0,0,0,0,0},
		{93,27,0,0,5,8,1,5,130,47,0,0,50,51,1,1,176,97,0,0,2,2,0,0,17,8,0,0,0,0,0,0,51,55,6,0,0,1,0,0,118,64,44,30,37,15,0,0,176,50,2,3,4,1,0,2,47,4,0,0,0,0,0,0,2,9,4,0,0,0,4,2,131,16,26,5,0,0,1,26,176,4,1,0,0,0,0,58,47,0,0,0,0,0,0,4,0,0,0,0,0,0,6,5,128,0,0,0,0,0,0,77,176,0,0,0,0,0,0,112,18,0,0,0,0,0,0,6},
		{129,5,0,0,0,0,0,11,121,7,5,17,100,5,1,15,124,2,0,14,84,2,0,23,20,0,0,35,129,0,0,2,91,57,14,0,0,0,0,1,73,71,117,67,31,0,0,2,129,17,13,26,75,1,0,25,11,0,0,28,129,0,0,2,4,16,10,0,5,13,0,0,79,21,50,6,0,0,0,10,129,15,5,14,69,1,0,31,7,0,0,31,129,1,0,0,0,0,0,0,34,69,0,0,58,21,1,0,0,1,0,5,103,69,51,48,24,0,0,9,1,1,13,71,81,0,0,0},
		{132,8,0,0,0,0,0,0,143,12,0,0,0,0,0,0,143,10,1,1,0,0,0,12,107,6,0,6,24,7,1,13,143,4,0,0,0,0,0,4,143,7,0,0,0,0,0,8,143,37,1,0,0,9,5,9,95,60,46,40,7,2,0,0,143,6,0,0,0,0,0,0,143,4,0,0,0,0,0,7,82,14,5,1,4,27,18,16,11,26,70,46,8,17,37,28,122,10,0,0,0,0,0,0,143,15,0,0,0,0,0,0,97,5,0,0,8,13,2,5,44,23,0,0,10,15,22,39},
		{0,40,124,6,0,6,28,3,3,9,124,124,9,0,9,10,31,2,20,108,8,0,0,63,34,0,1,2,6,2,0,63,67,115,124,1,0,0,0,1,124,53,105,21,0,0,0,37,103,7,4,6,0,0,0,90,41,3,0,0,6,3,0,19,124,33,0,0,0,0,0,1,124,76,0,0,0,0,0,8,124,48,0,0,0,0,0,5,52,11,0,0,2,2,0,0,74,12,0,0,0,0,15,33,124,41,0,0,0,0,8,54,110,23,0,0,0,0,8,52,36,4,0,0,0,0,11,35},
		{0,1,22,6,2,25,31,0,0,0,12,21,8,52,44,1,0,0,2,9,4,80,71,0,0,0,0,0,0,73,92,0,5,2,15,20,100,55,51,3,102,11,18,24,36,7,47,59,13,2,1,5,1,65,115,25,1,0,0,0,0,102,104,1,9,2,64,115,106,9,15,14,115,52,1,20,36,1,23,80,45,37,33,9,7,21,52,21,1,36,22,3,2,105,56,0,1,0,26,19,1,0,99,115,22,2,4,19,5,1,81,115,7,9,36,94,55,8,9,22,48,99,27,35,19,5,0,5},
		{117,0,0,0,0,0,0,71,117,0,0,0,3,1,1,64,27,1,2,2,32,19,18,27,21,2,16,4,6,29,117,41,117,2,0,0,0,0,0,71,117,12,2,2,8,4,0,55,79,27,3,14,53,11,1,12,117,39,0,0,18,17,14,18,114,11,0,0,0,3,104,98,63,56,16,8,2,1,70,39,43,22,14,41,24,6,88,46,117,27,0,1,4,5,13,61,5,14,17,40,10,17,117,52,14,42,20,3,0,1,117,56,2,2,39,5,0,1,117,53,12,15,24,1,0,0,19,48},
		{26,13,14,12,15,2,26,99,8,25,58,54,4,1,6,54,9,8,40,110,1,2,8,13,3,82,25,7,3,6,6,4,78,10,12,20,122,11,4,13,114,32,43,30,54,14,30,39,25,10,12,22,49,39,52,21,15,24,13,7,20,17,19,14,105,14,0,0,122,24,0,0,122,25,0,0,97,15,2,10,58,8,1,7,122,18,3,3,120,9,1,3,31,8,13,24,99,22,0,0,76,42,3,1,122,7,0,0,55,42,18,36,53,4,0,0,122,24,0,5,122,10,0,0,39,4,0,0},
		{19,10,19,73,3,9,24,17,5,90,37,6,17,19,14,6,0,125,60,1,3,20,10,0,0,64,14,0,0,77,31,0,29,13,8,9,102,42,35,12,80,23,14,8,32,27,48,42,10,81,23,0,61,104,58,18,10,125,35,0,3,11,16,13,62,14,0,1,125,38,0,0,125,38,0,1,67,13,4,12,59,5,0,0,125,40,8,14,49,12,4,0,9,22,38,22,41,4,0,0,125,49,2,11,125,37,0,0,65,29,3,8,66,8,0,0,125,35,0,2,76,6,0,0,13,4,3,4},
		{0,13,11,16,44,0,0,0,131,1,0,12,53,0,0,6,65,6,3,31,131,0,0,3,131,27,4,12,40,0,0,3,4,35,35,25,25,45,3,0,131,19,13,26,38,1,0,23,67,3,3,42,131,1,0,9,131,0,0,6,67,1,0,13,5,15,8,6,24,131,1,0,68,99,47,15,11,94,5,5,36,23,37,54,85,19,9,14,131,24,16,13,44,7,2,27,0,109,4,0,3,66,0,0,8,18,3,0,4,131,10,3,19,18,16,12,15,57,14,11,13,28,36,20,17,8,29,42},
		{168,18,0,0,3,1,0,4,83,14,2,22,29,0,0,0,129,21,1,4,5,0,0,1,31,7,1,10,6,0,0,0,168,12,1,2,6,1,0,16,89,25,11,61,20,0,0,0,168,43,5,9,2,0,0,3,39,9,1,6,7,0,0,0,168,16,1,2,4,1,0,15,87,13,4,28,25,0,0,9,168,4,0,2,1,0,0,38,35,1,0,2,4,1,0,4,168,11,1,0,3,0,0,5,87,11,4,5,3,0,0,9,160,0,0,0,0,0,0,29,17,0,2,0,1,1,1,3},
		{31,0,0,0,111,26,0,3,160,15,0,0,17,5,0,6,103,13,1,14,20,0,0,0,78,11,1,3,4,0,0,1,35,0,0,4,145,14,0,5,160,8,0,1,25,3,0,19,111,20,8,43,15,0,0,1,111,24,3,6,1,0,0,2,33,0,0,1,128,24,1,8,160,12,1,1,19,4,1,18,98,12,3,19,16,0,0,8,125,2,0,1,1,0,0,24,26,0,0,6,97,7,0,2,160,7,0,0,15,2,0,8,87,12,4,3,1,0,0,5,98,1,0,0,0,0,0,15},
		{39,1,0,4,136,4,0,4,167,8,0,0,27,2,0,22,90,13,2,17,12,0,0,2,63,40,3,2,1,0,0,0,50,0,0,2,138,21,0,6,167,8,0,1,27,5,0,16,113,9,1,16,26,0,0,1,93,9,1,3,2,0,0,3,49,0,0,5,132,13,0,7,167,7,1,4,26,3,0,26,99,20,8,40,13,0,0,2,97,18,1,3,1,0,0,2,37,0,0,2,94,13,1,8,167,7,1,3,15,2,0,18,77,6,2,13,10,0,0,13,76,1,0,0,0,0,0,15},
		{37,4,0,1,135,5,0,0,164,39,0,0,30,1,0,1,78,51,21,16,5,0,0,0,26,121,14,2,0,0,0,0,43,2,0,4,147,8,0,4,164,9,0,0,35,4,0,21,112,13,2,16,17,0,0,2,75,29,3,2,1,0,0,1,44,0,0,1,117,24,0,4,164,12,0,0,30,7,0,10,111,13,2,18,22,0,0,0,84,11,1,3,2,0,0,1,33,0,0,3,89,8,0,4,164,5,0,2,25,2,0,16,77,14,5,27,10,0,0,2,72,12,1,2,0,0,0,3},
		{73,3,0,0,22,22,1,37,33,5,1,21,135,15,0,24,135,0,0,8,49,1,1,33,50,11,10,21,22,1,2,8,93,5,2,10,35,7,0,25,58,2,0,39,135,2,1,13,135,1,0,14,67,0,0,35,32,5,12,27,66,8,2,12,35,66,116,33,9,0,0,3,54,36,57,117,135,0,0,2,135,77,42,38,36,0,0,9,26,40,55,54,41,2,0,4,0,23,93,7,0,5,2,0,14,27,65,39,2,0,0,3,24,84,75,10,0,0,0,0,0,32,105,17,0,0,0,0},
		{0,0,0,0,0,16,91,16,1,0,0,0,16,74,55,14,7,0,0,2,6,18,91,57,0,3,1,0,2,21,119,21,32,2,0,0,16,42,85,66,44,1,0,0,136,121,43,39,136,10,0,1,39,34,53,87,14,1,0,2,53,49,80,36,71,19,3,8,31,8,8,17,67,5,0,1,136,30,0,5,136,17,0,6,72,7,0,3,39,19,1,11,95,4,0,3,40,3,1,1,20,15,16,31,29,2,1,6,136,17,0,2,136,28,0,10,60,8,1,6,21,26,2,21,52,12,3,2},
		{2,0,3,65,0,0,7,162,81,3,0,3,0,0,0,162,162,20,0,0,0,0,0,75,27,6,1,3,4,0,0,0,8,1,3,3,0,0,27,162,63,31,22,4,0,0,0,121,162,65,1,0,0,0,0,5,40,13,2,6,5,0,0,0,5,1,17,14,0,0,6,66,57,7,16,6,0,0,0,77,162,15,0,0,0,0,0,44,40,12,6,6,2,0,0,0,3,0,4,5,0,0,6,71,32,4,0,0,0,0,3,81,155,19,0,0,0,0,0,15,32,4,0,2,4,0,0,0},
		{95,12,4,10,27,10,0,5,72,12,0,13,127,8,1,3,127,40,3,20,40,2,0,4,51,4,2,15,53,7,0,10,118,35,10,11,32,4,0,7,70,19,3,47,127,0,0,6,127,53,3,15,36,3,2,19,78,2,1,8,84,4,1,20,88,34,11,9,23,16,1,30,74,20,5,53,127,9,0,18,127,11,1,8,28,3,8,58,62,8,4,25,86,3,4,14,78,0,0,3,37,16,1,29,86,0,0,23,127,6,0,19,127,2,3,11,39,0,0,26,12,10,18,50,51,8,1,3},
		{53,15,2,3,27,8,12,22,71,8,0,0,128,33,0,2,128,37,1,13,48,5,0,0,12,25,2,13,128,12,0,0,69,9,3,5,55,21,8,24,45,6,5,18,128,37,0,2,128,27,0,7,54,34,11,23,14,11,0,9,89,67,17,12,88,22,2,4,85,6,0,2,27,6,3,11,128,90,3,8,128,23,0,1,66,40,2,9,41,18,0,2,90,42,5,5,74,22,0,2,52,8,0,2,33,5,0,2,96,61,4,17,128,32,2,1,74,45,0,1,41,19,4,6,52,26,4,8},
		{24,10,9,21,99,0,0,0,151,127,8,5,21,0,0,3,73,151,11,0,0,0,0,0,0,52,10,0,1,1,0,0,35,0,0,15,136,0,0,1,151,9,0,2,26,0,0,13,101,83,27,9,1,0,0,1,15,151,19,1,0,0,0,0,36,0,0,15,123,1,0,9,151,2,0,1,17,0,0,52,77,11,4,20,7,0,0,4,61,55,2,2,0,0,0,0,39,0,0,6,80,4,0,9,151,0,0,1,7,0,0,39,46,2,1,11,12,0,0,5,51,4,0,1,0,0,0,5},
		{13,50,3,0,0,0,0,0,44,49,0,0,0,0,0,6,65,8,0,0,8,18,41,63,7,6,5,1,21,23,17,4,14,18,0,0,0,16,102,47,91,31,0,0,1,24,63,26,132,17,0,5,63,23,12,34,8,1,7,19,132,26,3,2,64,2,0,1,37,47,82,57,67,1,0,0,100,80,61,31,132,16,0,23,92,10,2,9,10,4,2,51,132,3,0,0,99,2,0,1,47,9,3,17,65,4,0,1,132,22,1,15,132,28,2,15,92,4,0,2,9,4,0,21,132,3,0,0},
		{44,0,0,0,0,0,0,131,131,96,4,0,0,0,0,40,78,128,1,0,0,0,0,0,2,5,2,4,4,0,0,0,14,0,1,22,0,0,0,119,45,82,38,76,1,0,0,19,131,131,12,2,0,0,0,9,32,14,1,2,2,0,0,0,3,0,2,105,2,0,0,22,53,6,5,84,3,0,0,131,131,20,1,1,0,0,0,131,49,8,1,2,1,0,0,1,3,0,0,57,2,0,3,87,34,1,0,4,0,0,0,131,110,21,0,0,0,0,0,57,35,10,0,0,1,0,0,0},
		{34,2,0,0,0,0,0,4,125,4,0,0,3,1,0,13,94,8,0,1,26,5,0,3,157,20,0,0,0,0,0,1,50,4,0,0,0,0,0,1,157,7,0,1,6,0,0,4,122,2,0,4,40,4,0,6,157,2,0,0,0,0,0,21,49,2,0,0,0,0,0,20,129,3,0,7,5,0,0,33,141,3,1,23,19,0,0,20,157,0,0,0,0,0,0,62,56,0,0,0,0,0,0,45,39,0,0,8,18,1,0,47,153,0,0,11,15,0,0,56,157,0,0,0,0,0,0,90},
		{25,13,0,0,0,0,0,0,127,12,0,0,4,1,0,3,71,10,0,0,48,7,0,1,164,37,0,0,2,0,0,0,43,7,0,0,0,0,0,2,164,8,0,0,7,0,0,18,88,4,0,11,76,1,0,5,164,11,0,1,3,0,0,10,41,14,0,0,0,0,0,0,164,24,0,3,9,0,0,4,102,5,0,20,74,0,0,6,164,0,0,0,2,0,0,31,33,11,0,0,0,0,0,0,145,6,0,1,11,1,0,5,97,1,0,6,61,2,0,8,164,0,0,0,1,0,0,26},
		{77,69,1,0,1,0,0,0,5,6,8,11,96,50,0,0,0,3,5,4,77,76,69,6,0,11,18,0,0,1,122,16,49,130,60,8,0,0,0,0,20,38,135,92,15,9,0,0,135,37,33,15,13,25,101,57,15,0,0,0,0,1,135,49,0,25,44,6,2,9,2,0,74,12,63,23,0,0,1,14,135,15,5,1,0,0,0,52,48,0,0,0,0,0,7,10,0,0,0,0,1,57,47,3,46,0,0,0,0,3,59,111,135,0,0,0,0,0,5,135,17,0,0,0,0,0,0,6},
		{124,47,0,0,2,1,8,35,146,117,0,0,1,10,2,3,17,21,4,0,3,47,4,1,0,35,61,3,0,13,9,0,66,11,0,0,3,7,32,94,146,57,0,0,0,4,14,90,69,6,0,0,8,49,9,8,0,0,0,0,0,20,38,0,146,18,2,8,10,7,33,107,146,66,0,0,10,9,24,73,85,36,0,0,12,24,3,3,0,0,0,0,2,8,19,2,146,62,1,2,18,9,0,3,115,73,1,7,45,14,0,1,112,74,0,0,5,6,0,0,1,0,0,0,3,5,5,5},
		{37,0,0,0,1,2,0,7,0,0,2,14,3,5,1,0,30,11,12,12,6,5,5,15,16,1,0,2,45,70,135,24,35,0,0,12,6,1,0,6,15,5,12,123,21,1,0,1,141,12,16,31,0,0,0,93,47,0,0,0,0,1,27,55,25,0,0,68,54,0,0,3,48,65,45,141,58,0,0,0,141,132,10,5,0,0,0,23,34,21,2,0,0,0,0,7,12,3,11,51,141,4,0,1,11,71,19,74,127,19,6,0,53,141,35,0,0,1,2,0,4,141,48,0,0,0,0,0},
		{0,0,68,20,3,0,0,0,126,59,50,4,0,0,0,0,170,72,1,0,0,0,0,0,21,2,0,0,0,0,0,0,0,0,0,3,10,4,38,4,134,22,0,1,1,0,58,29,170,76,0,0,0,0,8,23,42,9,1,0,0,0,0,0,0,0,0,0,0,1,170,58,21,1,0,0,0,0,170,95,170,36,22,3,0,0,83,95,23,51,89,3,0,0,0,0,2,4,0,0,0,0,39,12,0,3,4,2,0,0,30,8,3,4,16,9,5,6,9,4,0,16,63,10,9,31,4,0},
		{0,5,41,5,6,1,0,0,0,1,26,24,10,0,0,0,20,3,8,13,1,0,11,60,3,0,2,0,0,0,86,69,0,45,174,3,1,0,0,0,29,53,174,11,2,0,0,1,174,74,53,2,0,0,2,60,36,0,0,0,0,0,17,40,4,5,29,4,13,4,1,3,134,19,47,2,4,0,0,15,174,15,5,0,0,0,0,58,38,0,0,0,0,0,0,4,1,0,0,1,6,25,102,1,102,0,0,0,1,6,93,64,174,0,0,0,0,0,7,77,21,0,0,0,0,0,0,1},
		{3,2,0,0,5,147,17,0,128,122,0,0,3,74,5,1,147,133,0,0,0,0,0,0,7,4,0,0,0,0,0,0,0,0,0,0,23,147,1,0,80,27,0,0,57,147,10,10,147,89,0,0,1,14,7,28,33,6,0,0,0,0,0,1,0,0,0,0,9,55,0,0,11,0,0,0,31,147,82,27,118,2,0,0,0,28,75,141,19,0,0,0,0,0,0,10,0,0,0,0,0,1,0,0,0,0,0,0,0,16,21,1,0,0,0,0,0,2,20,15,0,0,0,0,0,0,0,1},
		{0,0,0,1,0,0,0,0,0,1,16,13,0,0,0,0,0,13,21,3,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,36,13,0,0,0,9,19,83,149,32,0,0,0,112,136,90,35,0,0,0,4,24,14,0,0,0,0,0,0,0,0,0,115,97,0,0,0,83,9,12,149,133,0,0,10,149,25,9,15,1,0,0,48,50,1,0,0,0,0,0,4,0,0,0,108,149,0,0,0,119,12,1,83,98,0,0,3,149,13,0,0,0,0,0,10,35,0,0,0,0,0,0,0},
		{1,0,0,4,27,34,0,0,130,36,0,1,1,7,1,9,124,40,0,0,0,0,0,12,2,0,0,0,0,0,0,0,0,1,4,1,7,87,8,0,85,40,0,0,6,54,9,7,130,91,0,0,0,0,0,10,13,4,0,0,0,0,0,0,3,130,130,7,8,14,1,0,64,39,30,8,15,18,2,75,130,7,0,0,0,0,0,125,12,0,0,0,0,0,0,5,130,130,130,0,0,0,0,22,130,78,15,0,0,0,0,130,32,0,0,0,0,0,0,68,0,0,0,0,0,0,0,1},
		{2,0,0,4,55,58,2,0,142,40,0,2,6,21,5,30,142,60,0,0,0,0,0,33,3,1,0,0,0,0,0,0,0,0,11,28,17,57,2,0,135,61,6,14,11,44,10,8,142,142,0,0,0,0,0,11,22,7,0,0,0,0,0,0,0,0,38,75,12,0,0,0,142,12,31,26,3,0,0,69,142,11,0,0,0,0,0,142,22,0,0,0,0,0,0,8,8,2,5,23,43,15,0,0,142,13,4,3,0,1,0,88,142,4,0,0,0,0,0,92,2,0,0,0,0,0,0,2},
		{63,51,0,0,0,0,0,0,137,107,0,0,0,0,0,16,48,40,4,1,1,0,1,65,33,11,15,17,0,0,1,50,83,33,0,0,0,0,0,0,152,29,0,0,3,0,2,98,66,14,36,24,33,2,6,101,12,10,50,58,2,5,8,18,74,28,0,0,0,0,0,0,152,73,0,0,10,1,0,7,127,17,6,12,135,19,0,8,80,8,5,4,39,17,14,19,35,18,0,0,0,0,0,0,152,89,0,0,2,0,0,0,127,31,0,0,68,45,6,7,71,4,0,0,44,18,6,20},
		{69,10,1,8,2,0,0,0,3,1,1,56,49,2,8,7,0,0,0,15,104,73,77,11,0,0,0,1,48,115,81,0,77,15,1,13,10,0,0,0,40,2,0,29,22,2,23,75,6,9,44,41,31,33,107,56,0,53,55,6,1,115,115,0,94,22,0,0,11,5,0,0,108,40,0,1,23,12,0,11,27,25,32,38,115,103,0,3,1,115,99,14,42,60,2,0,111,18,0,0,3,7,0,2,31,52,3,2,24,24,0,1,20,101,4,1,35,101,1,0,5,22,5,1,24,115,39,2},
		{31,117,31,3,7,30,6,1,47,113,1,0,23,89,2,1,27,20,0,1,34,57,3,3,4,8,0,2,108,10,0,0,40,47,3,0,1,117,93,13,117,90,0,4,26,24,36,43,25,11,0,12,115,35,0,1,12,6,0,1,98,15,0,0,1,117,117,0,0,48,45,5,28,37,110,54,5,10,41,40,20,1,24,73,40,1,0,31,9,0,0,0,87,11,1,13,62,117,63,0,0,0,0,3,107,65,66,10,0,0,0,23,39,1,8,5,5,1,1,61,1,0,0,0,81,6,1,7},
		{16,0,0,0,0,0,0,6,130,0,0,0,0,0,0,106,126,0,1,36,33,0,1,125,16,15,16,28,19,5,7,34,41,0,0,0,0,0,0,10,130,12,0,0,3,0,0,130,103,4,0,29,80,17,10,82,38,0,0,32,39,5,7,66,43,4,0,0,0,0,0,9,130,130,0,0,1,1,0,14,90,130,0,1,22,22,29,23,13,2,0,31,72,9,14,33,14,0,0,0,0,1,3,13,112,61,0,0,0,0,0,15,130,130,0,0,5,1,0,4,18,32,0,4,24,19,21,14},
		{136,1,0,0,0,0,0,9,136,0,0,0,0,0,1,36,43,26,33,8,0,5,19,22,4,54,52,14,2,20,31,7,136,1,0,0,0,0,0,5,136,5,0,0,0,0,1,15,78,21,1,2,1,4,21,32,41,24,0,0,16,87,42,20,136,0,0,0,0,0,1,64,136,19,0,0,0,0,22,114,55,25,4,5,2,0,36,79,65,19,7,1,3,17,17,44,136,0,0,0,1,0,2,136,53,13,15,30,19,1,39,136,9,28,69,19,1,2,25,53,9,42,64,11,1,0,3,13},
		{29,43,44,1,1,1,12,20,29,87,52,2,0,0,21,17,10,20,31,51,8,22,8,6,0,1,90,16,1,19,50,0,9,80,54,3,3,3,0,2,127,44,22,13,8,2,0,20,34,11,22,118,83,0,2,4,8,7,68,27,10,4,5,5,85,127,65,0,0,0,0,4,127,49,25,38,22,15,1,24,37,43,34,83,47,18,15,17,21,28,2,3,14,70,27,17,82,127,8,0,0,0,0,1,110,127,0,3,18,47,1,7,23,96,3,5,22,127,3,1,32,109,0,0,4,64,5,3},
		{0,40,89,1,0,52,96,0,4,45,41,1,13,124,124,0,0,2,1,0,35,124,124,1,0,0,0,0,0,20,124,3,1,27,50,10,9,91,79,2,71,54,27,6,20,50,24,59,13,5,1,0,69,124,48,23,1,3,1,0,3,16,124,19,3,28,46,24,12,23,11,4,124,36,3,14,10,16,6,27,45,10,0,0,50,116,34,14,1,3,2,6,9,31,85,42,3,2,6,18,8,9,19,50,43,4,7,2,0,2,28,112,29,8,16,6,8,21,23,32,0,0,12,73,35,14,32,8},
		{68,2,19,56,30,1,24,39,44,84,72,41,12,1,46,10,32,36,19,22,11,6,20,24,0,6,30,15,42,79,10,0,15,4,5,46,123,3,5,32,123,55,19,33,76,1,0,56,68,23,38,123,48,0,1,14,0,54,109,46,14,9,5,1,19,29,4,15,123,56,8,1,65,109,33,11,52,76,21,7,14,49,62,84,27,3,2,2,0,6,20,122,24,2,5,2,30,13,5,32,16,36,15,19,2,6,9,83,62,78,16,0,6,14,45,106,6,4,0,0,0,0,25,123,0,0,0,0},
		{88,66,0,0,0,0,0,2,118,135,0,0,0,0,0,0,30,135,2,0,2,9,12,4,3,18,4,13,43,3,12,10,121,7,0,0,0,0,2,6,135,34,0,0,0,0,0,8,110,111,3,0,0,0,0,21,8,51,24,21,16,0,2,9,45,3,0,0,0,44,135,27,135,16,0,0,0,3,51,53,135,11,0,0,0,0,5,40,19,4,2,0,0,0,17,39,0,0,0,0,0,81,135,3,14,0,0,0,0,29,135,45,39,1,0,0,0,2,97,59,14,0,0,0,0,0,27,24},
		{93,48,0,0,0,0,0,0,126,118,0,0,1,1,0,12,60,18,4,2,12,112,3,8,2,15,14,1,7,126,27,4,113,62,0,0,0,0,0,1,126,30,0,2,2,0,0,33,75,18,55,55,32,14,0,11,4,48,60,8,5,45,25,4,65,22,0,0,0,0,54,126,126,25,0,0,3,2,51,107,52,11,12,20,65,102,24,19,26,44,27,6,8,34,48,48,15,4,18,9,0,0,69,126,13,28,23,2,0,0,83,82,6,3,11,32,16,31,20,21,1,1,50,36,4,13,33,16},
		{109,1,0,1,0,0,0,22,116,17,4,1,0,0,1,20,47,9,8,21,17,1,18,26,104,6,0,1,35,13,5,28,116,1,0,0,0,0,0,40,116,21,2,1,1,0,31,114,18,16,28,30,8,0,103,116,27,32,19,16,10,13,17,57,116,0,0,0,0,0,0,52,116,43,0,2,7,2,3,79,65,35,26,51,116,38,6,18,83,78,29,28,41,6,0,0,99,0,0,0,0,2,36,68,101,7,14,12,7,1,1,116,19,27,17,6,88,69,7,15,18,42,29,8,28,42,31,0},
		{127,5,0,3,4,4,0,1,127,1,0,0,5,1,0,9,93,18,0,0,39,6,0,3,101,25,0,2,72,11,1,3,127,4,1,5,1,0,0,11,127,5,1,1,4,0,0,12,93,15,2,11,52,8,0,1,127,27,0,0,69,15,0,1,127,2,0,0,0,0,0,29,127,35,10,3,0,0,13,47,42,12,14,26,12,1,66,91,109,6,1,2,27,22,14,74,122,1,0,0,0,0,0,36,127,26,0,1,2,0,23,97,20,21,34,44,27,2,62,79,24,53,29,21,11,4,8,26},
		{97,1,0,4,19,1,0,2,60,41,3,6,19,1,1,7,80,75,1,0,0,0,3,3,32,21,4,13,0,0,0,0,119,4,0,14,32,0,0,3,110,20,2,13,28,13,37,134,45,68,4,1,45,75,55,41,22,54,37,57,4,1,0,6,112,3,0,1,42,6,0,10,137,61,0,1,44,10,4,25,77,23,10,16,137,50,6,9,59,25,38,31,40,2,0,73,85,1,0,0,37,6,0,3,137,53,0,1,42,6,0,0,102,24,0,1,137,40,0,1,59,39,22,28,56,16,1,21},
		{104,12,1,0,2,3,6,31,50,5,0,0,66,43,17,30,75,11,0,0,7,2,37,78,47,6,0,0,2,10,59,31,135,22,0,0,9,1,0,5,135,7,0,1,135,27,4,9,135,11,0,0,18,5,15,38,40,5,0,4,42,25,25,14,135,48,0,0,2,2,0,2,129,19,0,0,64,89,31,10,135,26,7,4,16,29,21,23,38,14,14,34,53,4,0,3,135,67,3,0,0,0,0,0,118,42,2,10,40,6,2,1,95,49,4,16,49,4,1,2,34,14,5,6,55,4,0,4},
		{19,90,125,23,8,1,0,0,64,128,78,0,0,0,0,0,7,128,99,2,0,0,0,0,4,68,20,0,1,0,0,0,96,14,18,12,1,0,0,11,128,35,3,1,2,0,0,14,63,80,51,22,25,0,0,0,101,128,12,1,0,0,0,0,128,5,0,0,0,0,0,11,128,0,0,1,6,0,0,24,86,2,0,11,55,0,0,7,128,36,2,0,1,0,0,7,120,1,0,0,0,0,0,19,128,0,0,1,8,0,0,28,63,0,0,3,35,1,0,16,87,4,0,0,0,0,0,14},
		{25,1,0,0,0,0,2,14,160,107,0,0,0,0,0,2,160,118,0,0,0,0,1,0,34,33,0,0,0,1,1,0,6,0,1,10,6,8,19,36,147,32,0,1,1,2,2,12,160,80,0,0,0,0,0,5,36,11,0,0,0,3,4,2,12,2,12,37,3,1,1,13,125,2,1,2,0,0,2,86,160,5,0,0,0,0,1,74,36,0,0,0,0,3,7,10,30,0,1,3,0,0,0,19,141,0,0,0,0,0,0,76,160,0,0,0,0,0,0,103,14,0,0,0,0,2,7,13},
		{31,73,4,0,0,1,0,0,115,131,0,0,11,7,0,0,140,138,0,0,1,0,0,0,5,6,0,0,5,2,0,0,26,32,2,0,0,0,9,9,117,108,26,5,5,1,4,12,140,101,6,1,1,0,0,8,26,8,1,3,5,0,0,0,1,1,0,0,0,0,109,49,58,12,4,0,0,0,101,133,140,10,1,0,0,0,6,122,30,4,3,6,2,0,0,2,0,0,11,3,0,0,84,34,44,8,14,1,0,0,57,70,140,4,1,0,0,0,3,69,14,1,2,6,0,0,0,9},
		{3,51,65,0,0,1,29,17,20,97,26,0,0,0,16,14,12,24,1,0,0,18,68,2,1,0,17,33,46,24,21,24,13,48,120,40,25,2,1,138,35,32,12,0,0,0,89,55,2,0,0,0,0,29,138,0,0,0,0,7,82,28,17,27,3,0,3,113,138,6,2,138,72,0,0,10,16,0,10,129,32,0,0,0,0,0,12,0,0,0,0,0,7,0,0,3,0,0,0,138,79,0,0,138,77,0,0,52,15,0,0,138,57,0,0,0,0,0,0,2,0,0,0,0,0,0,0},
		{104,8,0,0,0,0,0,0,151,20,0,0,0,0,0,0,129,33,19,2,3,4,1,3,7,27,18,4,14,9,14,11,130,18,0,0,0,0,0,0,151,19,0,0,0,0,0,7,103,29,22,0,0,3,15,34,15,60,16,1,5,19,32,12,127,11,0,0,0,0,0,5,151,29,0,0,0,0,0,53,147,17,1,0,0,1,5,65,36,7,5,6,15,21,40,24,127,0,0,0,0,0,0,25,151,2,1,3,0,0,0,151,34,15,32,7,1,1,1,63,8,42,37,5,12,4,0,5},
		{1,1,2,0,0,9,130,115,0,0,0,0,0,13,130,130,20,7,0,0,4,14,99,130,30,14,5,7,7,7,34,64,16,15,10,12,6,19,87,27,49,28,3,3,4,22,117,47,26,4,6,9,70,48,56,49,52,7,23,74,18,17,11,34,14,3,4,28,14,20,22,18,78,17,24,62,20,3,4,44,5,14,118,86,30,16,13,8,3,2,43,130,28,1,5,7,13,2,7,23,15,14,7,28,12,1,6,86,49,0,1,25,0,1,13,130,46,0,1,1,0,0,8,130,23,0,2,1},
		{101,83,22,5,2,3,2,3,12,52,52,8,19,24,20,19,7,16,7,3,83,135,7,3,0,0,0,0,47,135,0,0,135,110,6,1,0,0,2,13,76,41,16,2,5,13,68,42,16,11,5,32,115,66,31,16,1,0,0,6,38,135,7,0,135,75,3,1,0,0,0,57,89,33,65,20,4,3,4,35,4,58,52,9,44,78,11,2,1,12,1,0,9,120,19,0,135,52,2,3,4,1,2,22,40,8,15,10,12,17,10,29,11,45,10,1,7,27,16,16,3,33,8,6,19,40,13,5},
		{31,55,4,1,4,20,4,7,8,30,13,11,11,62,4,0,18,19,13,28,16,9,11,5,4,2,6,30,130,13,2,4,23,122,4,0,2,4,0,2,61,78,5,1,4,60,30,12,6,4,4,41,58,37,69,14,1,0,0,113,130,23,6,3,89,130,2,0,0,0,0,13,101,50,34,17,19,14,4,44,4,17,57,46,87,31,9,1,0,0,1,19,130,64,1,0,92,126,0,0,0,0,0,0,115,118,5,6,10,29,8,3,8,11,22,16,20,60,48,5,0,0,0,4,130,58,12,1},
		{132,66,0,0,0,0,0,5,102,27,4,7,7,1,1,90,23,41,47,24,21,5,3,28,0,7,11,61,67,5,2,0,132,60,0,0,0,0,0,1,132,81,2,5,15,21,1,16,13,35,34,14,40,100,13,3,0,11,28,44,56,23,16,0,132,19,0,0,0,0,11,95,132,11,11,9,5,11,9,78,23,18,33,19,19,55,26,10,4,3,1,23,132,39,23,1,51,10,11,5,1,0,32,132,30,34,14,13,8,16,30,107,6,4,19,36,17,26,21,13,2,1,3,38,132,1,0,3},
		{145,8,0,0,0,0,2,67,145,26,0,2,7,11,21,85,4,0,0,22,29,15,37,25,22,7,1,6,15,12,14,7,145,4,0,0,0,20,15,140,145,40,1,3,9,7,5,53,23,5,2,23,37,25,37,19,15,1,0,12,30,15,21,13,50,0,0,0,0,109,110,145,145,23,7,3,0,0,15,130,22,15,18,31,9,4,9,34,1,0,0,3,18,19,20,23,0,0,0,0,0,109,103,27,3,1,0,0,0,17,72,50,3,0,1,0,0,1,16,38,1,0,0,0,27,3,0,7},
		{39,15,0,28,47,1,0,0,152,9,0,2,6,4,3,24,92,1,1,9,28,17,17,52,51,0,0,1,4,8,26,54,44,24,2,4,51,23,0,0,152,29,1,3,1,5,8,35,105,13,5,20,12,28,43,56,49,12,9,31,12,4,2,23,51,7,1,2,114,101,1,9,152,23,3,16,8,2,0,43,123,28,17,63,15,0,0,9,42,11,10,43,25,0,0,2,30,2,0,0,113,152,5,13,152,51,41,15,13,19,3,37,69,66,49,28,14,0,0,5,14,19,35,40,11,0,0,1},
		{0,0,0,104,88,0,0,114,27,0,0,23,55,3,1,153,40,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,104,68,0,0,85,12,0,4,94,76,2,1,153,48,0,0,4,1,0,3,27,1,0,0,0,0,0,0,0,1,2,46,107,4,0,0,80,4,2,69,104,4,0,12,153,5,0,0,3,0,0,60,55,0,0,0,0,0,0,9,0,0,0,22,122,26,1,0,103,5,3,31,74,9,2,41,153,1,0,0,0,0,0,101,30,0,0,0,0,0,0,11},
		{0,0,35,119,0,0,1,89,0,0,6,21,0,0,60,79,0,5,10,0,0,0,52,12,5,12,11,0,0,0,8,14,3,0,43,119,0,0,2,119,22,2,8,11,0,0,50,46,15,26,100,17,0,0,19,87,65,27,28,2,0,0,12,7,10,1,18,119,37,3,0,80,119,10,7,8,5,7,34,22,36,16,52,42,59,42,34,62,119,5,8,7,52,19,1,0,0,0,0,48,119,67,3,17,8,0,0,1,22,119,119,9,1,0,0,1,64,73,119,4,19,0,0,18,119,25,0},
		{0,0,75,122,0,0,0,122,3,1,55,70,0,0,55,122,0,0,0,0,0,0,37,1,0,0,0,0,0,0,0,13,1,6,122,122,0,0,2,122,24,4,30,39,0,0,71,77,27,20,0,0,0,0,34,0,5,2,0,0,0,0,0,9,0,6,75,49,40,58,11,110,59,61,26,31,11,39,27,27,122,122,12,6,0,0,0,32,96,15,0,0,0,0,0,0,0,61,45,2,15,30,0,0,1,37,105,57,7,20,6,74,62,31,23,22,0,9,66,122,48,1,0,0,0,0,39},
		{2,2,131,28,0,0,28,19,2,10,17,1,0,9,131,3,6,29,3,0,0,8,93,2,2,3,15,9,3,3,10,71,18,2,24,36,39,64,45,67,31,59,61,23,27,21,55,131,34,62,23,4,3,4,68,17,2,1,7,26,66,33,54,4,0,0,0,5,58,131,42,26,4,2,8,131,131,63,23,131,45,1,2,42,30,1,23,57,10,0,0,1,27,5,13,0,0,0,0,6,3,9,0,3,1,0,0,131,68,2,0,131,39,0,0,76,35,1,5,78,13,0,0,0,0,0,0},
		{4,30,20,0,0,0,94,14,18,65,11,0,0,0,27,11,8,9,3,7,10,14,32,0,0,0,77,75,45,5,1,26,20,49,75,31,32,10,9,135,41,41,17,3,3,0,61,59,3,0,0,2,25,38,112,0,0,0,2,40,135,18,3,15,1,0,3,111,135,28,7,135,63,0,0,29,31,1,10,135,34,0,0,0,2,1,12,1,0,0,0,1,73,3,0,1,0,0,0,135,68,1,0,135,59,0,0,76,30,0,1,135,48,0,0,0,0,0,0,3,0,0,0,0,3,0,0},
		{69,32,27,10,20,3,0,1,158,96,2,0,0,0,0,0,52,27,10,6,0,0,0,0,0,0,7,10,1,0,0,0,83,18,2,5,46,4,1,4,158,49,0,0,0,0,0,5,96,19,11,16,0,0,0,0,0,3,27,11,0,0,0,0,36,1,0,0,22,36,158,62,158,5,0,0,0,0,61,158,68,6,3,15,4,1,22,25,1,2,6,6,1,0,42,31,0,0,0,0,0,10,158,27,9,0,0,0,0,2,158,85,3,0,0,0,0,1,89,44,0,0,0,0,0,0,50,40},
		{0,0,0,1,15,6,0,0,21,2,0,8,33,12,0,1,145,27,0,1,1,1,0,6,29,6,0,0,0,0,0,1,0,0,4,8,32,10,0,0,24,4,2,28,43,7,0,1,145,15,1,3,1,0,0,19,45,2,0,0,0,0,0,6,0,96,145,7,12,1,0,0,27,74,103,5,26,22,1,4,145,25,3,0,1,3,1,22,42,4,0,0,0,0,0,3,4,143,145,1,0,4,4,1,145,145,145,0,0,0,0,30,145,39,4,0,0,0,0,78,15,0,0,0,0,0,0,10},
		{0,4,3,5,13,1,0,0,12,1,3,29,71,24,2,5,187,4,2,6,14,12,3,53,120,0,0,0,0,0,0,16,0,0,1,14,29,3,0,0,46,7,8,81,67,8,0,3,187,14,5,11,5,2,1,77,103,1,0,0,0,0,0,22,0,0,0,3,44,20,0,0,56,7,1,26,104,38,2,4,187,85,1,3,6,6,1,18,97,20,0,0,0,0,0,4,0,1,16,14,59,20,0,0,39,7,6,52,85,15,0,1,187,29,3,7,4,2,0,34,92,4,0,0,0,0,0,12},
		{4,9,5,0,0,60,163,9,0,2,23,15,0,11,163,73,15,10,16,4,0,0,158,136,1,0,0,0,0,0,75,91,3,29,31,11,6,0,5,2,30,16,73,96,32,4,7,2,163,33,30,15,2,0,6,78,26,0,0,0,0,0,30,77,0,4,3,7,17,2,0,0,51,4,3,29,68,31,2,9,163,10,1,2,5,7,2,31,54,1,0,0,0,0,0,4,0,0,0,8,22,3,0,0,58,8,4,42,48,9,0,2,163,23,2,3,1,1,0,25,32,2,0,0,0,0,0,3},
		{0,0,11,10,0,2,152,88,12,10,16,4,0,0,119,132,4,1,0,0,0,0,65,118,0,0,0,0,0,0,62,93,7,10,64,93,15,0,9,2,152,51,43,22,2,0,2,58,68,1,0,0,0,0,31,136,0,0,0,0,0,0,18,31,18,4,5,27,66,29,1,3,152,37,2,4,9,10,2,17,148,11,0,0,0,0,0,8,0,0,0,0,0,0,0,0,11,4,3,33,32,9,0,1,152,16,3,7,4,3,1,15,127,3,0,0,0,0,0,6,0,0,0,0,0,0,0,0},
		{6,2,1,26,130,33,0,0,102,7,1,4,5,0,0,0,23,5,1,26,53,0,0,0,103,39,1,5,5,0,0,0,8,0,0,0,130,130,0,2,115,4,0,2,21,23,1,13,20,5,1,24,92,0,0,1,114,39,0,4,8,0,0,0,1,0,0,0,130,130,0,0,35,32,7,9,73,110,1,3,7,14,8,49,61,0,0,0,98,30,0,4,5,0,0,0,0,0,0,0,100,130,0,0,0,4,5,5,130,130,0,0,3,3,8,24,24,16,0,0,93,6,0,1,0,0,0,3},
		{2,1,0,0,39,16,0,2,35,80,0,0,0,3,7,23,87,155,0,0,0,4,3,2,43,155,0,0,0,0,0,0,10,0,0,0,64,46,0,4,84,2,0,0,4,17,12,34,39,155,2,1,39,37,8,5,87,155,1,0,2,0,0,0,7,0,0,0,94,83,1,2,114,7,0,0,14,10,1,8,20,19,1,2,121,24,0,1,86,155,1,1,16,4,0,1,1,0,0,0,106,96,0,1,72,1,0,0,13,17,2,11,19,0,0,0,82,31,1,2,71,16,0,0,18,11,1,17},
		{6,2,1,63,127,0,0,0,109,10,1,5,7,0,0,2,29,8,1,19,56,0,0,1,127,46,0,3,6,0,0,0,14,5,2,44,127,28,0,0,127,14,1,6,8,0,0,0,29,9,2,39,80,0,0,0,127,63,1,7,7,0,0,0,15,0,0,0,127,127,1,2,127,4,0,2,19,14,1,12,21,5,1,25,112,0,0,1,127,50,1,5,9,0,0,0,3,0,0,0,127,127,0,1,46,29,5,8,46,71,1,5,6,11,6,42,67,0,0,0,85,32,0,4,5,0,0,0},
		{29,129,1,0,0,0,0,0,35,122,2,5,3,10,10,1,2,3,0,3,25,64,28,0,0,0,0,0,119,129,1,0,84,129,0,0,0,2,0,4,129,125,3,0,0,0,2,28,30,10,9,8,33,16,12,10,0,0,0,2,112,122,0,0,129,21,0,0,4,8,1,10,129,78,28,4,0,0,0,27,27,54,65,11,10,5,3,5,8,8,1,1,51,53,1,0,41,26,0,0,5,12,5,2,71,129,29,1,0,0,1,1,20,108,79,1,0,1,3,7,16,39,26,3,12,9,0,1},
		{2,55,62,13,9,2,6,3,13,18,116,87,33,16,4,23,39,9,63,67,0,1,37,130,13,3,6,3,0,0,24,130,0,86,92,2,3,54,69,0,31,72,125,44,20,36,47,24,130,130,18,6,0,2,14,103,33,9,0,0,0,0,3,20,0,1,2,0,0,64,107,0,10,6,14,5,0,74,130,55,118,16,2,0,0,1,99,130,23,1,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,1,19,4,0,0,0,0,0,0,15,18,0,0,0,0,0,0,0,1},
		{80,124,9,9,54,14,0,0,38,53,37,3,0,0,0,0,0,17,22,0,0,0,0,0,0,1,0,0,0,0,0,0,45,100,16,9,124,46,6,4,34,124,124,76,25,4,3,4,106,124,108,10,2,0,0,6,18,17,0,0,0,0,0,0,3,6,5,54,88,44,36,8,50,16,21,89,109,16,16,68,124,43,8,3,8,1,0,124,19,3,0,0,0,0,0,2,1,0,0,124,44,3,1,11,60,0,1,63,18,0,0,124,36,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0},
		{1,8,1,0,22,133,4,0,88,102,0,0,27,79,7,2,107,87,0,0,0,0,0,0,1,0,0,0,0,0,0,0,21,88,10,3,34,30,4,7,70,37,1,5,133,90,9,9,133,101,0,1,8,6,4,24,31,4,0,0,0,0,0,1,66,38,1,0,3,23,59,133,18,1,0,0,30,133,133,53,133,4,0,0,2,19,73,133,22,0,0,0,0,0,0,10,2,0,0,0,0,3,24,93,0,0,0,0,0,23,56,9,1,0,0,0,0,1,28,32,0,0,0,0,0,0,0,2},
		{0,3,7,2,1,24,118,6,3,40,28,1,3,103,80,9,104,127,18,0,0,13,57,75,53,23,0,0,0,0,0,15,2,16,127,32,5,6,8,0,111,67,57,5,1,23,54,56,45,1,0,0,0,3,97,127,16,0,0,0,0,0,2,28,17,19,111,18,18,24,127,28,127,62,28,0,0,0,56,117,93,4,0,0,0,0,3,18,0,0,0,0,0,0,0,0,7,1,0,0,1,11,127,26,53,9,0,0,0,0,72,85,41,15,0,0,0,0,0,5,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,1,134,38,5,3,5,5,0,0,134,66,125,15,2,0,0,0,21,93,105,4,0,0,0,0,0,4,0,4,58,34,2,3,22,4,15,24,69,105,0,0,12,4,134,82,24,10,0,0,0,11,131,3,0,0,0,0,0,11,0,26,134,30,0,0,3,1,79,11,64,79,0,0,0,18,134,12,4,3,0,0,0,63,117,0,0,0,0,0,0,21,0,3,11,0,0,8,37,5,95,1,5,0,0,1,9,61,134,0,0,0,0,0,0,90,59,0,0,0,0,0,0,22},
		{0,0,5,81,31,0,0,0,36,76,72,98,22,0,0,7,23,93,106,17,0,0,0,1,3,35,86,9,0,0,0,0,4,1,0,64,74,0,0,1,104,17,5,45,55,3,1,40,34,37,91,71,109,28,4,11,109,109,60,13,9,4,3,14,12,3,1,16,70,5,0,0,109,40,4,9,39,8,1,3,39,29,2,1,62,91,106,32,76,8,0,0,5,14,109,109,4,1,0,0,60,33,1,0,57,57,11,0,37,25,19,27,31,109,13,0,0,10,52,24,16,76,3,0,0,1,38,19},
		{0,2,78,22,11,20,0,0,0,19,66,15,60,108,1,0,15,14,40,34,61,63,8,0,97,39,9,6,13,4,0,1,8,15,87,98,108,10,1,2,97,97,99,32,33,13,1,9,30,7,2,24,108,24,3,10,80,1,0,2,24,1,1,23,7,1,0,8,108,108,91,15,90,7,1,21,37,45,95,70,39,1,1,62,88,6,3,64,39,0,0,0,5,0,0,69,0,0,0,0,1,32,60,1,0,0,0,5,59,108,64,5,18,0,0,13,29,37,64,108,12,0,0,0,0,0,1,60},
		{16,1,2,74,27,0,0,35,42,2,3,19,11,2,3,119,7,15,31,106,55,7,8,31,72,119,49,23,3,0,0,26,51,12,0,27,37,36,59,42,119,28,0,3,16,42,20,54,16,1,1,38,84,119,103,50,81,11,2,7,4,14,53,119,7,1,0,0,34,119,119,7,119,24,0,0,23,77,20,26,68,7,0,0,0,102,86,16,3,1,0,0,0,51,86,24,0,0,0,0,24,59,6,0,53,1,0,0,15,65,44,52,39,1,0,0,0,4,5,24,0,0,0,0,0,16,17,0},
		{1,11,86,37,10,2,0,0,75,67,31,3,1,0,0,0,37,10,6,6,0,0,0,0,0,6,17,4,0,0,0,0,17,37,117,67,49,28,50,19,117,117,52,8,0,0,14,47,60,16,55,117,0,0,0,3,53,43,65,41,0,0,0,22,6,18,32,3,17,31,113,31,79,18,68,62,4,0,36,69,75,27,63,117,6,0,0,33,115,24,7,12,0,0,0,103,0,22,84,4,1,30,26,0,0,7,117,31,5,5,39,2,61,61,44,37,6,0,39,35,117,67,1,0,0,0,2,37},
		{32,15,11,3,0,0,0,58,123,64,7,0,0,0,0,3,48,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,32,148,88,0,0,0,3,148,145,48,16,0,0,0,5,105,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,14,115,48,0,0,17,144,148,24,11,4,0,0,2,148,100,1,0,0,0,0,0,17,0,0,0,0,0,0,0,0,4,0,0,0,0,0,75,148,34,0,0,0,0,0,13,148,14,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0},
		{0,2,1,65,102,10,4,0,59,74,3,5,5,8,7,1,71,86,4,4,5,0,0,0,2,4,8,41,129,6,0,0,0,0,0,11,97,26,15,0,41,25,1,13,37,18,11,2,129,59,0,5,17,0,0,6,12,2,0,61,129,1,0,0,0,0,0,12,71,119,8,0,46,2,0,23,41,30,11,19,129,12,0,4,27,1,1,40,10,1,0,18,129,5,0,1,0,0,0,0,5,129,66,0,16,0,0,0,3,129,129,9,74,12,0,2,18,25,77,32,4,1,0,8,129,50,17,2},
		{6,100,62,24,41,1,0,2,26,144,55,0,0,0,0,2,36,144,8,0,0,0,0,0,5,26,0,0,0,0,0,0,34,8,2,25,51,3,0,32,120,98,3,0,0,0,0,33,144,143,0,0,0,0,0,8,37,28,0,0,0,0,0,0,21,23,11,1,53,22,0,8,144,34,18,0,0,0,0,45,144,6,0,0,0,0,0,87,20,1,0,0,0,0,0,2,7,5,3,1,58,65,13,20,134,7,1,0,0,2,6,144,101,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0}
		};

/* keypoint list */
typedef vector<pair<VL::Sift::Keypoint,VL::float_t> > Keypoints ;

/* predicate used to order keypoints by increasing scale */
bool cmpKeypoints (Keypoints::value_type const&a,
		   Keypoints::value_type const&b) {
  return a.first.sigma < b.first.sigma ;
}

int DistSquared(unsigned char *descr1, unsigned char *descr2)
{
    int i, dif, distsq = 0;

    for (i = 0; i < 128; i++) {
      dif = (int) *descr1++ - (int) *descr2++;
      distsq += dif * dif;
    }
    return distsq;
}

int CheckForMatch(unsigned char *descr1, bool useSDRAMdesc)
{
    int dsq, distsq1 = 100000000, distsq2 = 100000000;
    int minkey = -1;


    /* Find the two closest matches, and put their squared distances in
       distsq1 and distsq2.
    */
    if (useSDRAMdesc)
    {
    	int numDesc = *((int*)0xf00000);
    	unsigned char *sdramPtr = (unsigned char*)0xf00008;
    	unsigned char descr[128];

    	cout << "numdesc: "<< numDesc << endl;

    	for (int i = 0; i < numDesc; i++)
    	{
    		//cout << i << ": "<<endl;
    		dsq = DistSquared(descr1, sdramPtr);
    		sdramPtr += 128;

    		if (dsq < distsq1) {
    			distsq2 = distsq1;
    			distsq1 = dsq;
    			minkey = i;
    		} else if (dsq < distsq2) {
    			distsq2 = dsq;
    		}
    	}


    }
    else
    {
    	for (int i = 0; i < NUM_DESCR; i++)
    	{
    		dsq = DistSquared(baselineDesc[i], descr1);

    		if (dsq < distsq1) {
    			distsq2 = distsq1;
    			distsq1 = dsq;
    			minkey = i;
    		} else if (dsq < distsq2) {
    			distsq2 = dsq;
    		}
    	}
    }

    if (10 * 10 * distsq1 >= 8 * 8 * distsq2)
    	printf("no match: distsq1 = %d, distsq2 = %d\n", distsq1, distsq2);
    /* Check whether closest distance is less than 0.6 of second. */
    if (10 * 10 * distsq1 < 8 * 8 * distsq2)
      return minkey;
    else return -1;
}

int FindMatches(VL::float_t *descr_pt, bool useSDRAMdesc)
{
	unsigned char descrBytes[128];


	for (int i = 0; i < 128; i++)
		descrBytes[i] = (unsigned char)(descr_pt[i] * 512);

	if (useSDRAMdesc)
		return CheckForMatch(descrBytes, 1);

	return CheckForMatch(descrBytes, 0);
}

void extractImageData(VL::PgmBuffer& buffer)
{
  VL::pixel_t* im_pt = new VL::pixel_t[IMAGE_WIDTH*IMAGE_HEIGHT];
  VL::pixel_t* start = im_pt;
	unsigned int x, y, byteNum, blockNum, offset;
	unsigned short* imgPtr = 0;
	unsigned short intensityVal;
	float maxVal = 0.0;
	float minVal = 1.0;
	float floatIntensity;

  buffer.width  = IMAGE_WIDTH ;
  buffer.height = IMAGE_HEIGHT ;
  buffer.data   = im_pt ;

	for (y = 0; y < IMAGE_HEIGHT; y++)
	{
		for (x = 0; x < IMAGE_WIDTH; x++)
		{
				byteNum = (y*IMAGE_WIDTH + x);
        blockNum = byteNum / 256;
        offset = byteNum % 256;

        // this offset is in terms of shorts (= byte offset / 2)
        // read from the second of the two locations used to store
        //	pixel (x,y)'s data, and write to the first
        imgPtr = (unsigned short*)BASE_ADDRESS + 512*blockNum + offset + 256;

        intensityVal = *(imgPtr) & 0x3ff;
        //intensityValSmall = intensityVal >> 2;

        floatIntensity = intensityVal / 1023.0f;

        if (floatIntensity > maxVal)
        	maxVal = floatIntensity;
        if (floatIntensity < minVal)
        	minVal = floatIntensity;

        *start++ = floatIntensity;
		}
	}

//	VL::pixel_t *end = start;

//	for (start = im_pt; start != end; start++)
//		*start = (*start - minVal) / (maxVal - minVal);

//	cout << "im_pt: " << im_pt << endl;
//	cout << "maxVal: " << maxVal << endl;
//	cout << "minVal: " << minVal << endl;
	//cout << im_pt - SIFT_DATA_START <<endl;

}

void replaceImageData()
{
  VL::pixel_t* im_pt = (VL::pixel_t*)BASE_ADDRESS;
	unsigned int x, y, byteNum, blockNum, offset;
	unsigned short *imgPtr = 0;

	for (y = 0; y < IMAGE_HEIGHT; y++)
	{
		for (x = 0; x < IMAGE_WIDTH; x++)
		{
				byteNum = (y*IMAGE_WIDTH + x);
        blockNum = byteNum / 256;
        offset = byteNum % 256;

        // this offset is in terms of shorts (= byte offset / 2)
        // read from the second of the two locations used to store
        //	pixel (x,y)'s data, and write to the first
        imgPtr = (unsigned short*)BASE_ADDRESS + 256*blockNum + byteNum;
        *imgPtr = *(imgPtr + 256) = (unsigned short)((*im_pt++ * 255.0f) * 4);
		}
	}

	cout << "im_pt2: " << im_pt << endl;

}
// moveImageToVGA
// This function copies a pixel_t image to the correct location
// to be displayed via VGA.
// The pixel_t image does not have to be the full size of the VGA (IMAGE_WIDTH x IMAGE_HEIGHT)
// but can instead be a subregion, defined by imgWidth and imgHeight,
// located on the screen at coordinates (VGAoffsetX, VGAoffsetY).
// The parts of the VGA image that are not part of the pixel_t image
// are set to a default color, set by backgroundBlue and backgroundRed,
// so that although the pixel_t part of the VGA image will be greyscale,
// the border can be any solid color.
// intensityMax and intensityMin set what float values are to be converted to white
// and black, respectively. pixel_t values out of this range are acceptable and will saturate
// to either full white or full black, depending on which side of the boundary they cross.
void moveImageToVGA(VL::pixel_t* imgPtr, float intensityMax, float intensityMin, unsigned int imgWidth, unsigned int imgHeight, unsigned int VGAoffsetX, unsigned int VGAoffsetY)
{
	// yellow background
	unsigned short backgroundBlue = 0xf000;
	unsigned short backgroundRed  = 0xffff;

	VL::pixel_t pixelIntensity;
	unsigned short ushortIntensity;

	int x, y, byteNum, blockNum, offset;
	unsigned short *vgaPtr = 0;
	imgPtr += imgWidth * imgHeight;

	// process vga pixels in reverse order,
	// in case VGA was overwritten with the image.
	// We will write to the red parts of all pixels first
	// Then after we will copy those to the blue parts
	for (y = IMAGE_HEIGHT-1; y >= 0; y--)
	{
		for (x = IMAGE_WIDTH-1; x >= 0; x--)
		{
			// calculate VGA/SDRAM red pixel address
			byteNum = (y*IMAGE_WIDTH + x);
			blockNum = byteNum / 256;
			offset = byteNum % 256;
			vgaPtr = (unsigned short*)BASE_ADDRESS + 512*blockNum + offset + 256;

			// check if out of bounds of image
			if ( (y < VGAoffsetY) || (y >= VGAoffsetY + imgHeight) ||
					(x < VGAoffsetX) || (x >= VGAoffsetX + imgWidth) )
			{
				// out of bounds, write default background color
				*vgaPtr = backgroundRed;
				continue;
			}

			// if we reach this point, we are in bounds of image
			// read in intensity value
			pixelIntensity = *(--imgPtr);

			// make sure pixel is not over or under saturated
			if (pixelIntensity > intensityMax)
				pixelIntensity = intensityMax ;
			if (pixelIntensity < intensityMin)
				pixelIntensity = intensityMin ;

			// normalize to 1024
			pixelIntensity = 1023.0 * (pixelIntensity - intensityMin) / (intensityMax - intensityMin);

			// round and convert to unsigned short
			ushortIntensity = (unsigned short)(pixelIntensity + 0.5);

			// save red to SDRAM
			*vgaPtr = ((0x001f & ushortIntensity) << 10) | ushortIntensity;
		}
	}

	// Now copy the blue parts
	for (y = IMAGE_HEIGHT-1; y >= 0; y--)
	{
		for (x = IMAGE_WIDTH-1; x >= 0; x--)
		{
			// calculate VGA/SDRAM blue pixel address
			byteNum = (y*IMAGE_WIDTH + x);
			blockNum = byteNum / 256;
			offset = byteNum % 256;
			vgaPtr = (unsigned short*)BASE_ADDRESS + 512*blockNum + offset;

			// check if out of bounds of image
			if ( (y < VGAoffsetY) || (y >= VGAoffsetY + imgHeight) ||
					(x < VGAoffsetX) || (x >= VGAoffsetX + imgWidth) )
			{
				// out of bounds, write default background color
				*vgaPtr = backgroundBlue;
				continue;
			}

			// if we reach this point, we are in bounds of image
			// read in intensity value
			ushortIntensity = 0x03ff & * (vgaPtr + 256);

			// copy red to blue in SDRAM
			*vgaPtr = ((0x03e0 & ushortIntensity) << 5) | ushortIntensity;
		}
	}

}
void writePixelAt(int x, int y, unsigned short r, unsigned short g, unsigned short b)
{
	r &= 0x3ff;
	g &= 0x3ff;
	b &= 0x3ff;

	if ((x<0) | (x>=IMAGE_WIDTH)) return;
	if ((y<0) | (y>=IMAGE_HEIGHT)) return;
	int byteNum = (y*IMAGE_WIDTH + x);
	int blockNum = byteNum / 256;
	int offset = byteNum % 256;
	unsigned short *vgaPtr = (unsigned short*)BASE_ADDRESS + 512*blockNum + offset;

	*(vgaPtr + 256) = r + ((g & 0x1F) << 10);
	*vgaPtr = b + ((g & 0x3E) << 10);
}
void writeRedPixelAt(int x, int y)
{
	writePixelAt(x,y,0x3ff,0,0);
}
void drawLine(int x0, int y0, int x1, int y1, unsigned short r, unsigned short g, unsigned short b)
{
	// Bresenham's line algorithm

	int dx = abs(x1-x0);
	int dy = abs(y1-y0);
	int sx, sy, err, e2;
	if (x0 < x1) sx = 1;
	else sx = -1;
	if (y0 < y1) sy = 1;
	else sy = -1;
	err = dx-dy;

	while (true)
	{
		writePixelAt(x0,y0,r,g,b);
		if ((x0 == x1) && (y0 == y1)) break;
		e2 = 2*err;
		if (e2 > -dy)
		{
			err -= dy;
			x0 += sx;
		}
		if (e2 < dx)
		{
			err += dx;
			y0 += sy;
		}
	}
}
void drawCircle(int x0, int y0, int radius, unsigned short r, unsigned short g, unsigned short b)
{
	// Bresenham's circle algorithm
	int f = 1 - radius;
	int ddF_x = 1;
	int ddF_y = -2*radius;
	int x = 0;
	int y = radius;
	writePixelAt(x0,y0+radius,r,g,b);
	writePixelAt(x0,y0-radius,r,g,b);
	writePixelAt(x0+radius,y0,r,g,b);
	writePixelAt(x0-radius,y0,r,g,b);
	while (x < y)
	{
		if (f >= 0)
		{
			y--;
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		writePixelAt(x0+x,y0+y,r,g,b);
		writePixelAt(x0-x,y0+y,r,g,b);
		writePixelAt(x0+x,y0-y,r,g,b);
		writePixelAt(x0-x,y0-y,r,g,b);
		writePixelAt(x0+y,y0+x,r,g,b);
		writePixelAt(x0-y,y0+x,r,g,b);
		writePixelAt(x0+y,y0-x,r,g,b);
		writePixelAt(x0-y,y0-x,r,g,b);
	}
}
// -------------------------------------------------------------------
//                                                                main
// -------------------------------------------------------------------


int
main(int argc, char** argv)
{
	//alt_timestamp_start();
	// Switch control to processor
	// Otherwise heap allocations and sdram access
	// will not work properly
	//unsigned t1, t2, t3;
	PROC_CONTROL_ON;
	//exp_union.exp_float = 7.13;

	//t1 = alt_timestamp();
	//IOWR_ALTERA_AVALON_PIO_DATA(FP_OPERAND_BASE, exp_union.exp_int );
	//t2 = alt_timestamp();
	//t3 = alt_timestamp();
	//cout << "WR ovh: " << t2-t1 - (t3-t2) << endl;
	//usleep(10000);
	//exp_union.exp_int = IORD_ALTERA_AVALON_PIO_DATA(FP_RESULT_BASE);
	//cout << exp_union.exp_float << endl;

	// move heap past camera image in SDRAM. We don't want the image being
	// overwritten or the heap being corrupted
	VL::pixel_t* OriginalImage = (VL::pixel_t*) new VL::pixel_t[IMAGE_WIDTH*IMAGE_HEIGHT];
/*
	//
	// Code I used to write a test square to VGA part of SDRAM using
	// the moveImageToVGA function and prove that it works
	int i = 100; // square size
	// allocate space for float representation of the image
	VL::pixel_t* floatImage = (VL::pixel_t*) new VL::pixel_t[i*i];
	// set image data, a diagonal gradient
	for (int y = 0; y < i; y++)
		for (int x = 0; x < i; x++)
			*(floatImage + (i*y + x)) = x + y;
	cout << "started writing test image to screen\n";
	moveImageToVGA(floatImage, (float)(2*(i-1)), 0.0, i, i, 50, 50);
	delete [] floatImage;
	PROC_CONTROL_OFF;
	cout << "finished writing test image to screen\n";
	cout << "displaying for 60 seconds before continuing\n";
	usleep(60*1000*1000);
	PROC_CONTROL_ON;
	//
*/
 //float x = EXP_MACRO2(2.0);
 //cout << "result: "<<x << endl;
  int    first          = 0 ;
  int    octaves        = 5 ;
  int    levels         = 3 ;
  VL::float_t  threshold      (0.04f / levels / 2.0f) ;
  VL::float_t  edgeThreshold  (10.0f);
  VL::float_t  magnif         (3.0) ;
  int    verbose        = 1 ;

  VL::PgmBuffer buffer ;

 // cout << "Hello!\n";
  extractImageData(buffer);



  /*
	cout << "writing extracted image data to VGA...";
	moveImageToVGA(buffer.data, 1.0, 0.0, buffer.width, buffer.height, 0, 0);
	PROC_CONTROL_OFF;
	cout << "done\n";
	//cout << "displaying for 10 seconds before continuing...";
	//usleep(10*1000*1000);
	PROC_CONTROL_ON;
	cout << "done\n";
	*/

  //replaceImageData();
  // -----------------------------------------------------------------
  //                                            Retrieve input image
  // -----------------------------------------------------------------
  // ON NIOS, SUBSTITUTE SDRAM IMAGE READ HERE

  /*
  unsigned int x, y, byteNum, blockNum, offset;
	unsigned short *imgPtr = 0;
	unsigned short intensityVal;
	unsigned char intensityValSmall;

  for (y = 0; y < IMAGE_HEIGHT; y++)
  {
    for (x = 0; x < IMAGE_WIDTH; x++)
    {
    	if (y >= 60 && y <= 420 && x >= 80 && x <= 560) {
      byteNum = (y*IMAGE_WIDTH + x);
      blockNum = byteNum / 256;
      offset = byteNum % 256;

      // imgPtr and BASE_ADDRESS are type unsigned char, so
      // 	 this adds a byte offset, which is what we want
      //imgPtr = BASE_ADDRESS + 2*byteNum + 512*blockNum;

      // this offset is in terms of shorts (= byte offset / 2)
      imgPtr = BASE_ADDRESS + 256*blockNum + byteNum;

      intensityVal = *(imgPtr) & 0x3ff;
      intensityValSmall = intensityVal >> 2;


      // write blue to the screen
      if (x % 3 == 0 || y%2 == 0)
      {
      	*(imgPtr) = 0x03ff;
      	*(imgPtr + 256) = 0x0000; // (256 = 512 bytes / 2)

      	//IOWR_16DIRECT(BASE_ADDRESS, 2*byteNum + 512*blockNum, 0x03ff);
      	//IOWR_16DIRECT(BASE_ADDRESS, 2*byteNum + 512*blockNum + 512, 0x0000);
      }
      else
      {
      	*(imgPtr) = 0x0000;
      	*(imgPtr + 256) = 0x03ff; // (256 = 512 bytes / 2)

      	//IOWR_16DIRECT(BASE_ADDRESS, 2*byteNum + 512*blockNum, 0x0000);
        //IOWR_16DIRECT(BASE_ADDRESS, 2*byteNum + 512*blockNum + 512, 0x03ff);
      }

    	}
    } // for each x
  } // for each y

*/


  //verbose && cout
  //      << " read "
  //      << buffer.width  <<" x "
  //      << buffer.height <<" pixels"
  //      << endl ;
      
  // ---------------------------------------------------------------
  //                                            Gaussian scale space
  // ---------------------------------------------------------------
  verbose && cout
        << "siftpp: computing Gaussian scale space" 
        << endl ;
      
  int         O      = octaves ;
  int const   S      = levels ;
  VL::float_t const sigman(.5) ;
  VL::float_t const sigma0(1.6 * powf(2.0f, 1.0f / S)) ;
      
  verbose && cout
        << "siftpp:   number of octaves     : " << O << endl
        << "siftpp:   levels per octave     : " << S
        << endl ;

  //for (int omin = first; omin < O; omin++)
  //{
    //verbose && cout << "siftpp:   current octave        : " << omin << endl;

    // initialize scalespace
    VL::Sift sift(buffer.data, buffer.width, buffer.height,
        sigman, sigma0,
        3, S,
		    0, -1, S+1) ;
      
    verbose && cout
        << "siftpp: Gaussian scale space completed"
        << endl ;
      

    // -------------------------------------------------------------
    //                                             Run SIFT detector
    // -------------------------------------------------------------
    verbose && cout
          << "siftpp: running detector  "<< endl;
	
    sift.detectKeypoints(threshold, edgeThreshold) ;
	
    verbose && cout
          << "siftpp: detector completed with " 
          << sift.keypointsEnd() - sift.keypointsBegin() 
          << " keypoints" 
          << endl ;
/*
    for (VL::Sift::KeypointsConstIter iter = sift.keypointsBegin();
    			iter != sift.keypointsEnd(); ++iter)
    {
    	drawCircle((iter->ix << iter->o), (iter->iy << iter->o), 5*(2+iter->s),0,0,0x3ff);
    	writeRedPixelAt((iter->ix << iter->o), (iter->iy << iter->o));
    }
    */

      
    // -------------------------------------------------------------
    //                  Run SIFT orientation detector and descriptor
    // -------------------------------------------------------------

    // set descriptor options
    sift.setNormalizeDescriptor( 1 ) ;
    sift.setMagnification( magnif ) ;


    verbose && cout << "siftpp: computing orientations and descriptors..." ;

    int *sdramDescrCount = (int*)0xf00000;
    int *sdramRW = (int*)0xf00004;
    unsigned char *sdramDescr = (unsigned char*)0xf00008;

    if (*sdramRW != 1)
    {
        *sdramDescrCount = 0;
    	*sdramRW = 1;
    }
    else
    	*sdramRW = 0;


    (*sdramRW == 0) && cout  << "reading!\n";
   (*sdramRW == 1) && cout << "writing!\n";

    // -------------------------------------------------------------
    //            Run detector, compute orientations and descriptors
    // -------------------------------------------------------------
    for( VL::Sift::KeypointsConstIter iter = sift.keypointsBegin() ;
	       iter != sift.keypointsEnd() ; ++iter ) {
	    
    	//unsigned t1, t2, t3, t4;
    	  //  alt_timestamp_start();
      // detect orientations
      VL::float_t angles [4] ;
      int nangles ;
      //unsigned t1, t2, t3;

      //alt_timestamp_start();


      //t1 = alt_timestamp();
      nangles = sift.computeKeypointOrientations(angles, *iter) ;
      //t2 = alt_timestamp();
     // nangles = sift.computeKeypointOrientations2(angles, *iter) ;
      //t3 = alt_timestamp();
      //cout << "ori speedup: " << 1.0*(t3-t2) / (t2-t1);
      //cout << t2-t1 << endl;
	    
      //cout << nangles << endl;



      // compute descriptors
      for(int a = 0 ; a < nangles ; ++a) {
        // compute descriptor
        VL::float_t descr_pt [128] ;
        int match;
        //t1 = alt_timestamp();
        sift.computeKeypointDescriptor(descr_pt, *iter, angles[a]) ;
        if (*sdramRW == 1)
        {
        	cout << "writing descriptor\n";
        	*sdramDescrCount = *sdramDescrCount + 1;

        	for (int j = 0; j < 128; j++)
        		*sdramDescr++ = (unsigned char)(descr_pt[j]*512);
        }
        else
        {

        	match = FindMatches(descr_pt, 1);



        	if (match != -1)
        	{
        		drawCircle((iter->ix << iter->o), (iter->iy << iter->o), 5*(2+iter->s),0,0,0x3ff);
        		writeRedPixelAt((iter->ix << iter->o), (iter->iy << iter->o));
        	}
        }


        //t2 = alt_timestamp();
        //sift.computeKeypointDescriptor2(descr_pt, *iter, angles[a]) ;
        //t3 = alt_timestamp();

        //cout << "desc speedup: " << 1.0*(t3-t2) / (t2-t1);
      } // next angle
      //t3 = alt_timestamp();

      //cout << 1.0*(t2-t1)/(t3-t1) << endl;
      //cout << 1.0*(t3-t2)/(t3-t1) << endl;
    } // next keypoint
    verbose && cout << "done\n" ;

	//} // next octave


	verbose && cout
          << "siftpp: job completed"<<endl ;

	PROC_CONTROL_OFF;
  while(1);

  return 0 ;
} // main()
